
calculator_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001bca  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002b20  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001788  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00005ee8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005f18  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000016  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000068f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000690d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 44 0a 	call	0x1488	; 0x1488 <main>
      64:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	00 d0       	rcall	.+0      	; 0x72 <GPIO_setupPinDirection+0x6>
      72:	1f 92       	push	r1
      74:	cd b7       	in	r28, 0x3d	; 61
      76:	de b7       	in	r29, 0x3e	; 62
      78:	89 83       	std	Y+1, r24	; 0x01
      7a:	6a 83       	std	Y+2, r22	; 0x02
      7c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
      7e:	8a 81       	ldd	r24, Y+2	; 0x02
      80:	88 30       	cpi	r24, 0x08	; 8
      82:	08 f0       	brcs	.+2      	; 0x86 <GPIO_setupPinDirection+0x1a>
      84:	d9 c0       	rjmp	.+434    	; 0x238 <GPIO_setupPinDirection+0x1cc>
      86:	89 81       	ldd	r24, Y+1	; 0x01
      88:	84 30       	cpi	r24, 0x04	; 4
      8a:	08 f0       	brcs	.+2      	; 0x8e <GPIO_setupPinDirection+0x22>
      8c:	d5 c0       	rjmp	.+426    	; 0x238 <GPIO_setupPinDirection+0x1cc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
      8e:	89 81       	ldd	r24, Y+1	; 0x01
      90:	88 2f       	mov	r24, r24
      92:	90 e0       	ldi	r25, 0x00	; 0
      94:	81 30       	cpi	r24, 0x01	; 1
      96:	91 05       	cpc	r25, r1
      98:	09 f4       	brne	.+2      	; 0x9c <GPIO_setupPinDirection+0x30>
      9a:	3e c0       	rjmp	.+124    	; 0x118 <GPIO_setupPinDirection+0xac>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	91 05       	cpc	r25, r1
      a0:	1c f4       	brge	.+6      	; 0xa8 <GPIO_setupPinDirection+0x3c>
      a2:	89 2b       	or	r24, r25
      a4:	49 f0       	breq	.+18     	; 0xb8 <GPIO_setupPinDirection+0x4c>
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
		}
	}
}
      a6:	c8 c0       	rjmp	.+400    	; 0x238 <GPIO_setupPinDirection+0x1cc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	91 05       	cpc	r25, r1
      ac:	09 f4       	brne	.+2      	; 0xb0 <GPIO_setupPinDirection+0x44>
      ae:	64 c0       	rjmp	.+200    	; 0x178 <GPIO_setupPinDirection+0x10c>
      b0:	03 97       	sbiw	r24, 0x03	; 3
      b2:	09 f4       	brne	.+2      	; 0xb6 <GPIO_setupPinDirection+0x4a>
      b4:	91 c0       	rjmp	.+290    	; 0x1d8 <GPIO_setupPinDirection+0x16c>
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
		}
	}
}
      b6:	c0 c0       	rjmp	.+384    	; 0x238 <GPIO_setupPinDirection+0x1cc>
	{
		/* Setup the pin direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
      b8:	8b 81       	ldd	r24, Y+3	; 0x03
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	b1 f4       	brne	.+44     	; 0xea <GPIO_setupPinDirection+0x7e>
			{
				SET_BIT(DDRA,pin_num);
      be:	8a e3       	ldi	r24, 0x3A	; 58
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	fc 01       	movw	r30, r24
      c4:	80 81       	ld	r24, Z
      c6:	48 2f       	mov	r20, r24
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <GPIO_setupPinDirection+0x6c>
      d4:	88 0f       	add	r24, r24
      d6:	99 1f       	adc	r25, r25
      d8:	2a 95       	dec	r18
      da:	e2 f7       	brpl	.-8      	; 0xd4 <GPIO_setupPinDirection+0x68>
      dc:	24 2f       	mov	r18, r20
      de:	28 2b       	or	r18, r24
      e0:	8a e3       	ldi	r24, 0x3A	; 58
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
			}
			break;
      e8:	a7 c0       	rjmp	.+334    	; 0x238 <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRA,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
      ea:	8a e3       	ldi	r24, 0x3A	; 58
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fc 01       	movw	r30, r24
      f0:	80 81       	ld	r24, Z
      f2:	48 2f       	mov	r20, r24
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	28 2f       	mov	r18, r24
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_setupPinDirection+0x98>
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_setupPinDirection+0x94>
     108:	80 95       	com	r24
     10a:	24 2f       	mov	r18, r20
     10c:	28 23       	and	r18, r24
     10e:	8a e3       	ldi	r24, 0x3A	; 58
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
			}
			break;
     116:	90 c0       	rjmp	.+288    	; 0x238 <GPIO_setupPinDirection+0x1cc>
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	b1 f4       	brne	.+44     	; 0x14a <GPIO_setupPinDirection+0xde>
			{
				SET_BIT(DDRB,pin_num);
     11e:	87 e3       	ldi	r24, 0x37	; 55
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	80 81       	ld	r24, Z
     126:	48 2f       	mov	r20, r24
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_setupPinDirection+0xcc>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	2a 95       	dec	r18
     13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_setupPinDirection+0xc8>
     13c:	24 2f       	mov	r18, r20
     13e:	28 2b       	or	r18, r24
     140:	87 e3       	ldi	r24, 0x37	; 55
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
			}
			break;
     148:	77 c0       	rjmp	.+238    	; 0x238 <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRB,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     14a:	87 e3       	ldi	r24, 0x37	; 55
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	fc 01       	movw	r30, r24
     150:	80 81       	ld	r24, Z
     152:	48 2f       	mov	r20, r24
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <GPIO_setupPinDirection+0xf8>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	2a 95       	dec	r18
     166:	e2 f7       	brpl	.-8      	; 0x160 <GPIO_setupPinDirection+0xf4>
     168:	80 95       	com	r24
     16a:	24 2f       	mov	r18, r20
     16c:	28 23       	and	r18, r24
     16e:	87 e3       	ldi	r24, 0x37	; 55
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
			}
			break;
     176:	60 c0       	rjmp	.+192    	; 0x238 <GPIO_setupPinDirection+0x1cc>
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     178:	8b 81       	ldd	r24, Y+3	; 0x03
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	b1 f4       	brne	.+44     	; 0x1aa <GPIO_setupPinDirection+0x13e>
			{
				SET_BIT(DDRC,pin_num);
     17e:	84 e3       	ldi	r24, 0x34	; 52
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	48 2f       	mov	r20, r24
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <GPIO_setupPinDirection+0x12c>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	2a 95       	dec	r18
     19a:	e2 f7       	brpl	.-8      	; 0x194 <GPIO_setupPinDirection+0x128>
     19c:	24 2f       	mov	r18, r20
     19e:	28 2b       	or	r18, r24
     1a0:	84 e3       	ldi	r24, 0x34	; 52
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
			}
			break;
     1a8:	47 c0       	rjmp	.+142    	; 0x238 <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRC,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     1aa:	84 e3       	ldi	r24, 0x34	; 52
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	48 2f       	mov	r20, r24
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <GPIO_setupPinDirection+0x158>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	2a 95       	dec	r18
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <GPIO_setupPinDirection+0x154>
     1c8:	80 95       	com	r24
     1ca:	24 2f       	mov	r18, r20
     1cc:	28 23       	and	r18, r24
     1ce:	84 e3       	ldi	r24, 0x34	; 52
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
			}
			break;
     1d6:	30 c0       	rjmp	.+96     	; 0x238 <GPIO_setupPinDirection+0x1cc>
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     1d8:	8b 81       	ldd	r24, Y+3	; 0x03
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	b1 f4       	brne	.+44     	; 0x20a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     1de:	81 e3       	ldi	r24, 0x31	; 49
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	48 2f       	mov	r20, r24
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	28 2f       	mov	r18, r24
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GPIO_setupPinDirection+0x18c>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	2a 95       	dec	r18
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GPIO_setupPinDirection+0x188>
     1fc:	24 2f       	mov	r18, r20
     1fe:	28 2b       	or	r18, r24
     200:	81 e3       	ldi	r24, 0x31	; 49
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	fc 01       	movw	r30, r24
     206:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
     208:	16 c0       	rjmp	.+44     	; 0x236 <GPIO_setupPinDirection+0x1ca>
			{
				SET_BIT(DDRD,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     20a:	81 e3       	ldi	r24, 0x31	; 49
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	48 2f       	mov	r20, r24
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <GPIO_setupPinDirection+0x1b8>
     220:	88 0f       	add	r24, r24
     222:	99 1f       	adc	r25, r25
     224:	2a 95       	dec	r18
     226:	e2 f7       	brpl	.-8      	; 0x220 <GPIO_setupPinDirection+0x1b4>
     228:	80 95       	com	r24
     22a:	24 2f       	mov	r18, r20
     22c:	28 23       	and	r18, r24
     22e:	81 e3       	ldi	r24, 0x31	; 49
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
			}
			break;
     236:	00 00       	nop
		}
	}
}
     238:	00 00       	nop
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <GPIO_setupPinDirectionR>:
 * Setup the direction of a range of pins from first_pin_num to last_pin_num in a given port.
 * If the input port number, pin range, or direction are not correct, the function will not handle the request.
 */

void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <GPIO_setupPinDirectionR+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <GPIO_setupPinDirectionR+0x8>
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	8a 83       	std	Y+2, r24	; 0x02
     256:	6b 83       	std	Y+3, r22	; 0x03
     258:	4c 83       	std	Y+4, r20	; 0x04
     25a:	2d 83       	std	Y+5, r18	; 0x05
	if((first_pin_num >= NUM_OF_PINS_PER_PORT) || (last_pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     25c:	8a 81       	ldd	r24, Y+2	; 0x02
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	38 f5       	brcc	.+78     	; 0x2b0 <GPIO_setupPinDirectionR+0x6a>
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	88 30       	cpi	r24, 0x08	; 8
     266:	20 f5       	brcc	.+72     	; 0x2b0 <GPIO_setupPinDirectionR+0x6a>
     268:	8c 81       	ldd	r24, Y+4	; 0x04
     26a:	84 30       	cpi	r24, 0x04	; 4
     26c:	08 f5       	brcc	.+66     	; 0x2b0 <GPIO_setupPinDirectionR+0x6a>
	{
		/* Do Nothing */
	}
	else if ((last_pin_num <= first_pin_num))
     26e:	9b 81       	ldd	r25, Y+3	; 0x03
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	89 17       	cp	r24, r25
     274:	e8 f4       	brcc	.+58     	; 0x2b0 <GPIO_setupPinDirectionR+0x6a>
	}

	else
	{
		uint8 i;
		for (i = 0; i < (last_pin_num - first_pin_num); i++){
     276:	19 82       	std	Y+1, r1	; 0x01
     278:	0b c0       	rjmp	.+22     	; 0x290 <GPIO_setupPinDirectionR+0x4a>
			GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	89 0f       	add	r24, r25
     280:	4d 81       	ldd	r20, Y+5	; 0x05
     282:	68 2f       	mov	r22, r24
     284:	8c 81       	ldd	r24, Y+4	; 0x04
     286:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
	}

	else
	{
		uint8 i;
		for (i = 0; i < (last_pin_num - first_pin_num); i++){
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	48 2f       	mov	r20, r24
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	8a 81       	ldd	r24, Y+2	; 0x02
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	ba 01       	movw	r22, r20
     2a4:	68 1b       	sub	r22, r24
     2a6:	79 0b       	sbc	r23, r25
     2a8:	cb 01       	movw	r24, r22
     2aa:	28 17       	cp	r18, r24
     2ac:	39 07       	cpc	r19, r25
     2ae:	2c f3       	brlt	.-54     	; 0x27a <GPIO_setupPinDirectionR+0x34>
			GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
		}
	}
}
     2b0:	00 00       	nop
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <GPIO_writePin+0x6>
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	89 83       	std	Y+1, r24	; 0x01
     2d0:	6a 83       	std	Y+2, r22	; 0x02
     2d2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	88 30       	cpi	r24, 0x08	; 8
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <GPIO_writePin+0x1a>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <GPIO_writePin+0x22>
     2e2:	d5 c0       	rjmp	.+426    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	91 05       	cpc	r25, r1
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <GPIO_writePin+0x30>
     2f0:	3e c0       	rjmp	.+124    	; 0x36e <GPIO_writePin+0xac>
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	91 05       	cpc	r25, r1
     2f6:	1c f4       	brge	.+6      	; 0x2fe <GPIO_writePin+0x3c>
     2f8:	89 2b       	or	r24, r25
     2fa:	49 f0       	breq	.+18     	; 0x30e <GPIO_writePin+0x4c>
				CLEAR_BIT(PORTD,pin_num);
			}
			break;
		}
	}
}
     2fc:	c8 c0       	rjmp	.+400    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	91 05       	cpc	r25, r1
     302:	09 f4       	brne	.+2      	; 0x306 <GPIO_writePin+0x44>
     304:	64 c0       	rjmp	.+200    	; 0x3ce <GPIO_writePin+0x10c>
     306:	03 97       	sbiw	r24, 0x03	; 3
     308:	09 f4       	brne	.+2      	; 0x30c <GPIO_writePin+0x4a>
     30a:	91 c0       	rjmp	.+290    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
				CLEAR_BIT(PORTD,pin_num);
			}
			break;
		}
	}
}
     30c:	c0 c0       	rjmp	.+384    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		/* Write the pin value as required */
		switch(port_num)
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     30e:	8b 81       	ldd	r24, Y+3	; 0x03
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	b1 f4       	brne	.+44     	; 0x340 <GPIO_writePin+0x7e>
			{
				SET_BIT(PORTA,pin_num);
     314:	8b e3       	ldi	r24, 0x3B	; 59
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	fc 01       	movw	r30, r24
     31a:	80 81       	ld	r24, Z
     31c:	48 2f       	mov	r20, r24
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <GPIO_writePin+0x6c>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	2a 95       	dec	r18
     330:	e2 f7       	brpl	.-8      	; 0x32a <GPIO_writePin+0x68>
     332:	24 2f       	mov	r18, r20
     334:	28 2b       	or	r18, r24
     336:	8b e3       	ldi	r24, 0x3B	; 59
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;
     33e:	a7 c0       	rjmp	.+334    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     340:	8b e3       	ldi	r24, 0x3B	; 59
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	48 2f       	mov	r20, r24
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_writePin+0x98>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	2a 95       	dec	r18
     35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_writePin+0x94>
     35e:	80 95       	com	r24
     360:	24 2f       	mov	r18, r20
     362:	28 23       	and	r18, r24
     364:	8b e3       	ldi	r24, 0x3B	; 59
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
			}
			break;
     36c:	90 c0       	rjmp	.+288    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	b1 f4       	brne	.+44     	; 0x3a0 <GPIO_writePin+0xde>
			{
				SET_BIT(PORTB,pin_num);
     374:	88 e3       	ldi	r24, 0x38	; 56
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	80 81       	ld	r24, Z
     37c:	48 2f       	mov	r20, r24
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	28 2f       	mov	r18, r24
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	02 c0       	rjmp	.+4      	; 0x38e <GPIO_writePin+0xcc>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	2a 95       	dec	r18
     390:	e2 f7       	brpl	.-8      	; 0x38a <GPIO_writePin+0xc8>
     392:	24 2f       	mov	r18, r20
     394:	28 2b       	or	r18, r24
     396:	88 e3       	ldi	r24, 0x38	; 56
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
			}
			break;
     39e:	77 c0       	rjmp	.+238    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
			{
				SET_BIT(PORTB,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     3a0:	88 e3       	ldi	r24, 0x38	; 56
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	80 81       	ld	r24, Z
     3a8:	48 2f       	mov	r20, r24
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	28 2f       	mov	r18, r24
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_writePin+0xf8>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	2a 95       	dec	r18
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_writePin+0xf4>
     3be:	80 95       	com	r24
     3c0:	24 2f       	mov	r18, r20
     3c2:	28 23       	and	r18, r24
     3c4:	88 e3       	ldi	r24, 0x38	; 56
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
			}
			break;
     3cc:	60 c0       	rjmp	.+192    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	b1 f4       	brne	.+44     	; 0x400 <__EEPROM_REGION_LENGTH__>
			{
				SET_BIT(PORTC,pin_num);
     3d4:	85 e3       	ldi	r24, 0x35	; 53
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	48 2f       	mov	r20, r24
     3de:	8a 81       	ldd	r24, Y+2	; 0x02
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <GPIO_writePin+0x12c>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	2a 95       	dec	r18
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <GPIO_writePin+0x128>
     3f2:	24 2f       	mov	r18, r20
     3f4:	28 2b       	or	r18, r24
     3f6:	85 e3       	ldi	r24, 0x35	; 53
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
			}
			break;
     3fe:	47 c0       	rjmp	.+142    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
			{
				SET_BIT(PORTC,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     400:	85 e3       	ldi	r24, 0x35	; 53
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	48 2f       	mov	r20, r24
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	2a 95       	dec	r18
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41e:	80 95       	com	r24
     420:	24 2f       	mov	r18, r20
     422:	28 23       	and	r18, r24
     424:	85 e3       	ldi	r24, 0x35	; 53
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
			}
			break;
     42c:	30 c0       	rjmp	.+96     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     42e:	8b 81       	ldd	r24, Y+3	; 0x03
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	b1 f4       	brne	.+44     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			{
				SET_BIT(PORTD,pin_num);
     434:	82 e3       	ldi	r24, 0x32	; 50
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	48 2f       	mov	r20, r24
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	2a 95       	dec	r18
     450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     452:	24 2f       	mov	r18, r20
     454:	28 2b       	or	r18, r24
     456:	82 e3       	ldi	r24, 0x32	; 50
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
			}
			break;
     45e:	16 c0       	rjmp	.+44     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			{
				SET_BIT(PORTD,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     460:	82 e3       	ldi	r24, 0x32	; 50
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	fc 01       	movw	r30, r24
     466:	80 81       	ld	r24, Z
     468:	48 2f       	mov	r20, r24
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	2a 95       	dec	r18
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	80 95       	com	r24
     480:	24 2f       	mov	r18, r20
     482:	28 23       	and	r18, r24
     484:	82 e3       	ldi	r24, 0x32	; 50
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
			}
			break;
     48c:	00 00       	nop
		}
	}
}
     48e:	00 00       	nop
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <GPIO_readPin+0x6>
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	8a 83       	std	Y+2, r24	; 0x02
     4aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     4ac:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	88 30       	cpi	r24, 0x08	; 8
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <GPIO_readPin+0x1a>
     4b4:	73 c0       	rjmp	.+230    	; 0x59c <GPIO_readPin+0x100>
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	84 30       	cpi	r24, 0x04	; 4
     4ba:	08 f0       	brcs	.+2      	; 0x4be <GPIO_readPin+0x22>
     4bc:	6f c0       	rjmp	.+222    	; 0x59c <GPIO_readPin+0x100>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	91 05       	cpc	r25, r1
     4c8:	21 f1       	breq	.+72     	; 0x512 <GPIO_readPin+0x76>
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	91 05       	cpc	r25, r1
     4ce:	1c f4       	brge	.+6      	; 0x4d6 <GPIO_readPin+0x3a>
     4d0:	89 2b       	or	r24, r25
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <GPIO_readPin+0x48>
     4d4:	63 c0       	rjmp	.+198    	; 0x59c <GPIO_readPin+0x100>
     4d6:	82 30       	cpi	r24, 0x02	; 2
     4d8:	91 05       	cpc	r25, r1
     4da:	91 f1       	breq	.+100    	; 0x540 <GPIO_readPin+0xa4>
     4dc:	03 97       	sbiw	r24, 0x03	; 3
     4de:	09 f4       	brne	.+2      	; 0x4e2 <GPIO_readPin+0x46>
     4e0:	46 c0       	rjmp	.+140    	; 0x56e <GPIO_readPin+0xd2>
     4e2:	5c c0       	rjmp	.+184    	; 0x59c <GPIO_readPin+0x100>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     4e4:	89 e3       	ldi	r24, 0x39	; 57
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2b 81       	ldd	r18, Y+3	; 0x03
     4f2:	22 2f       	mov	r18, r18
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <GPIO_readPin+0x60>
     4f8:	95 95       	asr	r25
     4fa:	87 95       	ror	r24
     4fc:	2a 95       	dec	r18
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <GPIO_readPin+0x5c>
     500:	81 70       	andi	r24, 0x01	; 1
     502:	99 27       	eor	r25, r25
     504:	89 2b       	or	r24, r25
     506:	19 f0       	breq	.+6      	; 0x50e <GPIO_readPin+0x72>
			{
				pin_value = LOGIC_HIGH;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     50c:	47 c0       	rjmp	.+142    	; 0x59c <GPIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     50e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     510:	45 c0       	rjmp	.+138    	; 0x59c <GPIO_readPin+0x100>
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     512:	86 e3       	ldi	r24, 0x36	; 54
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	2b 81       	ldd	r18, Y+3	; 0x03
     520:	22 2f       	mov	r18, r18
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <GPIO_readPin+0x8e>
     526:	95 95       	asr	r25
     528:	87 95       	ror	r24
     52a:	2a 95       	dec	r18
     52c:	e2 f7       	brpl	.-8      	; 0x526 <GPIO_readPin+0x8a>
     52e:	81 70       	andi	r24, 0x01	; 1
     530:	99 27       	eor	r25, r25
     532:	89 2b       	or	r24, r25
     534:	19 f0       	breq	.+6      	; 0x53c <GPIO_readPin+0xa0>
			{
				pin_value = LOGIC_HIGH;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     53a:	30 c0       	rjmp	.+96     	; 0x59c <GPIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     53c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     53e:	2e c0       	rjmp	.+92     	; 0x59c <GPIO_readPin+0x100>
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     540:	83 e3       	ldi	r24, 0x33	; 51
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	80 81       	ld	r24, Z
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	2b 81       	ldd	r18, Y+3	; 0x03
     54e:	22 2f       	mov	r18, r18
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <GPIO_readPin+0xbc>
     554:	95 95       	asr	r25
     556:	87 95       	ror	r24
     558:	2a 95       	dec	r18
     55a:	e2 f7       	brpl	.-8      	; 0x554 <GPIO_readPin+0xb8>
     55c:	81 70       	andi	r24, 0x01	; 1
     55e:	99 27       	eor	r25, r25
     560:	89 2b       	or	r24, r25
     562:	19 f0       	breq	.+6      	; 0x56a <GPIO_readPin+0xce>
			{
				pin_value = LOGIC_HIGH;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     568:	19 c0       	rjmp	.+50     	; 0x59c <GPIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     56a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     56c:	17 c0       	rjmp	.+46     	; 0x59c <GPIO_readPin+0x100>
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     56e:	80 e3       	ldi	r24, 0x30	; 48
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	2b 81       	ldd	r18, Y+3	; 0x03
     57c:	22 2f       	mov	r18, r18
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <GPIO_readPin+0xea>
     582:	95 95       	asr	r25
     584:	87 95       	ror	r24
     586:	2a 95       	dec	r18
     588:	e2 f7       	brpl	.-8      	; 0x582 <GPIO_readPin+0xe6>
     58a:	81 70       	andi	r24, 0x01	; 1
     58c:	99 27       	eor	r25, r25
     58e:	89 2b       	or	r24, r25
     590:	19 f0       	breq	.+6      	; 0x598 <GPIO_readPin+0xfc>
			{
				pin_value = LOGIC_HIGH;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     596:	01 c0       	rjmp	.+2      	; 0x59a <GPIO_readPin+0xfe>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     598:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     59a:	00 00       	nop
		}
	}

	return pin_value;
     59c:	89 81       	ldd	r24, Y+1	; 0x01
}
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <GPIO_setupPortDirection+0x6>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	84 30       	cpi	r24, 0x04	; 4
     5bc:	50 f5       	brcc	.+84     	; 0x612 <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	91 f0       	breq	.+36     	; 0x5ee <GPIO_setupPortDirection+0x44>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	91 05       	cpc	r25, r1
     5ce:	1c f4       	brge	.+6      	; 0x5d6 <GPIO_setupPortDirection+0x2c>
     5d0:	89 2b       	or	r24, r25
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <GPIO_setupPortDirection+0x38>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     5d4:	1e c0       	rjmp	.+60     	; 0x612 <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	79 f0       	breq	.+30     	; 0x5fa <GPIO_setupPortDirection+0x50>
     5dc:	03 97       	sbiw	r24, 0x03	; 3
     5de:	99 f0       	breq	.+38     	; 0x606 <GPIO_setupPortDirection+0x5c>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     5e0:	18 c0       	rjmp	.+48     	; 0x612 <GPIO_setupPortDirection+0x68>
	{
		/* Setup the port direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			DDRA = direction;
     5e2:	8a e3       	ldi	r24, 0x3A	; 58
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2a 81       	ldd	r18, Y+2	; 0x02
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			break;
     5ec:	12 c0       	rjmp	.+36     	; 0x612 <GPIO_setupPortDirection+0x68>
		case PORTB_ID:
			DDRB = direction;
     5ee:	87 e3       	ldi	r24, 0x37	; 55
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2a 81       	ldd	r18, Y+2	; 0x02
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
			break;
     5f8:	0c c0       	rjmp	.+24     	; 0x612 <GPIO_setupPortDirection+0x68>
		case PORTC_ID:
			DDRC = direction;
     5fa:	84 e3       	ldi	r24, 0x34	; 52
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2a 81       	ldd	r18, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
			break;
     604:	06 c0       	rjmp	.+12     	; 0x612 <GPIO_setupPortDirection+0x68>
		case PORTD_ID:
			DDRD = direction;
     606:	81 e3       	ldi	r24, 0x31	; 49
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2a 81       	ldd	r18, Y+2	; 0x02
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
			break;
     610:	00 00       	nop
		}
	}
}
     612:	00 00       	nop
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	00 d0       	rcall	.+0      	; 0x624 <GPIO_writePort+0x6>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	50 f5       	brcc	.+84     	; 0x686 <GPIO_writePort+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	88 2f       	mov	r24, r24
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	91 05       	cpc	r25, r1
     63c:	91 f0       	breq	.+36     	; 0x662 <GPIO_writePort+0x44>
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	91 05       	cpc	r25, r1
     642:	1c f4       	brge	.+6      	; 0x64a <GPIO_writePort+0x2c>
     644:	89 2b       	or	r24, r25
     646:	39 f0       	breq	.+14     	; 0x656 <GPIO_writePort+0x38>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     648:	1e c0       	rjmp	.+60     	; 0x686 <GPIO_writePort+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	91 05       	cpc	r25, r1
     64e:	79 f0       	breq	.+30     	; 0x66e <GPIO_writePort+0x50>
     650:	03 97       	sbiw	r24, 0x03	; 3
     652:	99 f0       	breq	.+38     	; 0x67a <GPIO_writePort+0x5c>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     654:	18 c0       	rjmp	.+48     	; 0x686 <GPIO_writePort+0x68>
	{
		/* Write the port value as required */
		switch(port_num)
		{
		case PORTA_ID:
			PORTA = value;
     656:	8b e3       	ldi	r24, 0x3B	; 59
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2a 81       	ldd	r18, Y+2	; 0x02
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
			break;
     660:	12 c0       	rjmp	.+36     	; 0x686 <GPIO_writePort+0x68>
		case PORTB_ID:
			PORTB = value;
     662:	88 e3       	ldi	r24, 0x38	; 56
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	2a 81       	ldd	r18, Y+2	; 0x02
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
			break;
     66c:	0c c0       	rjmp	.+24     	; 0x686 <GPIO_writePort+0x68>
		case PORTC_ID:
			PORTC = value;
     66e:	85 e3       	ldi	r24, 0x35	; 53
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	2a 81       	ldd	r18, Y+2	; 0x02
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
			break;
     678:	06 c0       	rjmp	.+12     	; 0x686 <GPIO_writePort+0x68>
		case PORTD_ID:
			PORTD = value;
     67a:	82 e3       	ldi	r24, 0x32	; 50
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2a 81       	ldd	r18, Y+2	; 0x02
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
			break;
     684:	00 00       	nop
		}
	}
}
     686:	00 00       	nop
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	00 d0       	rcall	.+0      	; 0x698 <GPIO_readPort+0x6>
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     69e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	84 30       	cpi	r24, 0x04	; 4
     6a4:	50 f5       	brcc	.+84     	; 0x6fa <GPIO_readPort+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	91 05       	cpc	r25, r1
     6b0:	91 f0       	breq	.+36     	; 0x6d6 <GPIO_readPort+0x44>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	91 05       	cpc	r25, r1
     6b6:	1c f4       	brge	.+6      	; 0x6be <GPIO_readPort+0x2c>
     6b8:	89 2b       	or	r24, r25
     6ba:	39 f0       	breq	.+14     	; 0x6ca <GPIO_readPort+0x38>
     6bc:	1e c0       	rjmp	.+60     	; 0x6fa <GPIO_readPort+0x68>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	91 05       	cpc	r25, r1
     6c2:	79 f0       	breq	.+30     	; 0x6e2 <GPIO_readPort+0x50>
     6c4:	03 97       	sbiw	r24, 0x03	; 3
     6c6:	99 f0       	breq	.+38     	; 0x6ee <GPIO_readPort+0x5c>
     6c8:	18 c0       	rjmp	.+48     	; 0x6fa <GPIO_readPort+0x68>
		{
		case PORTA_ID:
			value = PINA;
     6ca:	89 e3       	ldi	r24, 0x39	; 57
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	89 83       	std	Y+1, r24	; 0x01
			break;
     6d4:	12 c0       	rjmp	.+36     	; 0x6fa <GPIO_readPort+0x68>
		case PORTB_ID:
			value = PINB;
     6d6:	86 e3       	ldi	r24, 0x36	; 54
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	89 83       	std	Y+1, r24	; 0x01
			break;
     6e0:	0c c0       	rjmp	.+24     	; 0x6fa <GPIO_readPort+0x68>
		case PORTC_ID:
			value = PINC;
     6e2:	83 e3       	ldi	r24, 0x33	; 51
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	89 83       	std	Y+1, r24	; 0x01
			break;
     6ec:	06 c0       	rjmp	.+12     	; 0x6fa <GPIO_readPort+0x68>
		case PORTD_ID:
			value = PIND;
     6ee:	80 e3       	ldi	r24, 0x30	; 48
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	89 83       	std	Y+1, r24	; 0x01
			break;
     6f8:	00 00       	nop
		}
	}

	return value;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	60 97       	sbiw	r28, 0x10	; 16
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirectionR(KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_ROW_PORT_ID, PIN_INPUT);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	63 e0       	ldi	r22, 0x03	; 3
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_setupPinDirectionR>
	GPIO_setupPinDirectionR(KEYPAD_FIRST_COL_PIN_ID, KEYPAD_FIRST_COL_PIN_ID+3 ,KEYPAD_COL_PORT_ID,  PIN_INPUT);
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_setupPinDirectionR>

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     732:	1a 82       	std	Y+2, r1	; 0x02
     734:	9c c0       	rjmp	.+312    	; 0x86e <__stack+0xf>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	6a 81       	ldd	r22, Y+2	; 0x02
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	6a 81       	ldd	r22, Y+2	; 0x02
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     74a:	19 82       	std	Y+1, r1	; 0x01
     74c:	13 c0       	rjmp	.+38     	; 0x774 <KEYPAD_getPressedKey+0x6e>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     74e:	69 81       	ldd	r22, Y+1	; 0x01
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 4e 02 	call	0x49c	; 0x49c <GPIO_readPin>
     756:	88 23       	and	r24, r24
     758:	51 f4       	brne	.+20     	; 0x76e <KEYPAD_getPressedKey+0x68>
				{
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	98 2f       	mov	r25, r24
     75e:	99 0f       	add	r25, r25
     760:	99 0f       	add	r25, r25
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	89 0f       	add	r24, r25
     766:	8f 5f       	subi	r24, 0xFF	; 255
     768:	0e 94 45 04 	call	0x88a	; 0x88a <KEYPAD_4x4_adjustKeyNumber>
     76c:	85 c0       	rjmp	.+266    	; 0x878 <__stack+0x19>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	8f 5f       	subi	r24, 0xFF	; 255
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	84 30       	cpi	r24, 0x04	; 4
     778:	50 f3       	brcs	.-44     	; 0x74e <KEYPAD_getPressedKey+0x48>
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
				{
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	6a 81       	ldd	r22, Y+2	; 0x02
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a0 ea       	ldi	r26, 0xA0	; 160
     78a:	b0 e4       	ldi	r27, 0x40	; 64
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	9c 83       	std	Y+4, r25	; 0x04
     790:	ad 83       	std	Y+5, r26	; 0x05
     792:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	4a e7       	ldi	r20, 0x7A	; 122
     79a:	53 e4       	ldi	r21, 0x43	; 67
     79c:	6b 81       	ldd	r22, Y+3	; 0x03
     79e:	7c 81       	ldd	r23, Y+4	; 0x04
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	8f 83       	std	Y+7, r24	; 0x07
     7ae:	98 87       	std	Y+8, r25	; 0x08
     7b0:	a9 87       	std	Y+9, r26	; 0x09
     7b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	5f e3       	ldi	r21, 0x3F	; 63
     7bc:	6f 81       	ldd	r22, Y+7	; 0x07
     7be:	78 85       	ldd	r23, Y+8	; 0x08
     7c0:	89 85       	ldd	r24, Y+9	; 0x09
     7c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c4:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     7c8:	88 23       	and	r24, r24
     7ca:	2c f4       	brge	.+10     	; 0x7d6 <KEYPAD_getPressedKey+0xd0>
		__ticks = 1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	9c 87       	std	Y+12, r25	; 0x0c
     7d2:	8b 87       	std	Y+11, r24	; 0x0b
     7d4:	3f c0       	rjmp	.+126    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	else if (__tmp > 65535)
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	3f ef       	ldi	r19, 0xFF	; 255
     7da:	4f e7       	ldi	r20, 0x7F	; 127
     7dc:	57 e4       	ldi	r21, 0x47	; 71
     7de:	6f 81       	ldd	r22, Y+7	; 0x07
     7e0:	78 85       	ldd	r23, Y+8	; 0x08
     7e2:	89 85       	ldd	r24, Y+9	; 0x09
     7e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     7ea:	18 16       	cp	r1, r24
     7ec:	4c f5       	brge	.+82     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e2       	ldi	r20, 0x20	; 32
     7f4:	51 e4       	ldi	r21, 0x41	; 65
     7f6:	6b 81       	ldd	r22, Y+3	; 0x03
     7f8:	7c 81       	ldd	r23, Y+4	; 0x04
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	9e 81       	ldd	r25, Y+6	; 0x06
     7fe:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	bc 01       	movw	r22, r24
     808:	cd 01       	movw	r24, r26
     80a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	9c 87       	std	Y+12, r25	; 0x0c
     814:	8b 87       	std	Y+11, r24	; 0x0b
     816:	0f c0       	rjmp	.+30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     818:	89 e1       	ldi	r24, 0x19	; 25
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9e 87       	std	Y+14, r25	; 0x0e
     81e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     820:	8d 85       	ldd	r24, Y+13	; 0x0d
     822:	9e 85       	ldd	r25, Y+14	; 0x0e
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     828:	9e 87       	std	Y+14, r25	; 0x0e
     82a:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82c:	8b 85       	ldd	r24, Y+11	; 0x0b
     82e:	9c 85       	ldd	r25, Y+12	; 0x0c
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	9c 87       	std	Y+12, r25	; 0x0c
     834:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     836:	8b 85       	ldd	r24, Y+11	; 0x0b
     838:	9c 85       	ldd	r25, Y+12	; 0x0c
     83a:	89 2b       	or	r24, r25
     83c:	69 f7       	brne	.-38     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     83e:	14 c0       	rjmp	.+40     	; 0x868 <__stack+0x9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     840:	6f 81       	ldd	r22, Y+7	; 0x07
     842:	78 85       	ldd	r23, Y+8	; 0x08
     844:	89 85       	ldd	r24, Y+9	; 0x09
     846:	9a 85       	ldd	r25, Y+10	; 0x0a
     848:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	9c 87       	std	Y+12, r25	; 0x0c
     852:	8b 87       	std	Y+11, r24	; 0x0b
     854:	8b 85       	ldd	r24, Y+11	; 0x0b
     856:	9c 85       	ldd	r25, Y+12	; 0x0c
     858:	98 8b       	std	Y+16, r25	; 0x10
     85a:	8f 87       	std	Y+15, r24	; 0x0f
     85c:	8f 85       	ldd	r24, Y+15	; 0x0f
     85e:	98 89       	ldd	r25, Y+16	; 0x10
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
     864:	98 8b       	std	Y+16, r25	; 0x10
     866:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_setupPinDirectionR(KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_ROW_PORT_ID, PIN_INPUT);
	GPIO_setupPinDirectionR(KEYPAD_FIRST_COL_PIN_ID, KEYPAD_FIRST_COL_PIN_ID+3 ,KEYPAD_COL_PORT_ID,  PIN_INPUT);

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	84 30       	cpi	r24, 0x04	; 4
     872:	08 f4       	brcc	.+2      	; 0x876 <__stack+0x17>
     874:	60 cf       	rjmp	.-320    	; 0x736 <KEYPAD_getPressedKey+0x30>
     876:	5d cf       	rjmp	.-326    	; 0x732 <KEYPAD_getPressedKey+0x2c>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
     878:	60 96       	adiw	r28, 0x10	; 16
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	00 d0       	rcall	.+0      	; 0x890 <KEYPAD_4x4_adjustKeyNumber+0x6>
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     896:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	09 2e       	mov	r0, r25
     8a0:	00 0c       	add	r0, r0
     8a2:	aa 0b       	sbc	r26, r26
     8a4:	bb 0b       	sbc	r27, r27
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	a1 09       	sbc	r26, r1
     8aa:	b1 09       	sbc	r27, r1
     8ac:	80 31       	cpi	r24, 0x10	; 16
     8ae:	91 05       	cpc	r25, r1
     8b0:	a1 05       	cpc	r26, r1
     8b2:	b1 05       	cpc	r27, r1
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <KEYPAD_4x4_adjustKeyNumber+0x2e>
     8b6:	44 c0       	rjmp	.+136    	; 0x940 <KEYPAD_4x4_adjustKeyNumber+0xb6>
     8b8:	8f 59       	subi	r24, 0x9F	; 159
     8ba:	9b 4f       	sbci	r25, 0xFB	; 251
     8bc:	fc 01       	movw	r30, r24
     8be:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__tablejump2__>
     8c2:	71 04       	cpc	r7, r1
     8c4:	74 04       	cpc	r7, r4
     8c6:	77 04       	cpc	r7, r7
     8c8:	7a 04       	cpc	r7, r10
     8ca:	7d 04       	cpc	r7, r13
     8cc:	80 04       	cpc	r8, r0
     8ce:	83 04       	cpc	r8, r3
     8d0:	86 04       	cpc	r8, r6
     8d2:	89 04       	cpc	r8, r9
     8d4:	8c 04       	cpc	r8, r12
     8d6:	8f 04       	cpc	r8, r15
     8d8:	92 04       	cpc	r9, r2
     8da:	95 04       	cpc	r9, r5
     8dc:	98 04       	cpc	r9, r8
     8de:	9a 04       	cpc	r9, r10
     8e0:	9d 04       	cpc	r9, r13
	{
		case 1: keypad_button = 7;
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	89 83       	std	Y+1, r24	; 0x01
				break;
     8e6:	2f c0       	rjmp	.+94     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 2: keypad_button = 8;
     8e8:	88 e0       	ldi	r24, 0x08	; 8
     8ea:	89 83       	std	Y+1, r24	; 0x01
				break;
     8ec:	2c c0       	rjmp	.+88     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 3: keypad_button = 9;
     8ee:	89 e0       	ldi	r24, 0x09	; 9
     8f0:	89 83       	std	Y+1, r24	; 0x01
				break;
     8f2:	29 c0       	rjmp	.+82     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 4: keypad_button = '%'; // ASCII Code of %
     8f4:	85 e2       	ldi	r24, 0x25	; 37
     8f6:	89 83       	std	Y+1, r24	; 0x01
				break;
     8f8:	26 c0       	rjmp	.+76     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 5: keypad_button = 4;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	89 83       	std	Y+1, r24	; 0x01
				break;
     8fe:	23 c0       	rjmp	.+70     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 6: keypad_button = 5;
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	89 83       	std	Y+1, r24	; 0x01
				break;
     904:	20 c0       	rjmp	.+64     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 7: keypad_button = 6;
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	89 83       	std	Y+1, r24	; 0x01
				break;
     90a:	1d c0       	rjmp	.+58     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     90c:	8a e2       	ldi	r24, 0x2A	; 42
     90e:	89 83       	std	Y+1, r24	; 0x01
				break;		
     910:	1a c0       	rjmp	.+52     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 9: keypad_button = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	89 83       	std	Y+1, r24	; 0x01
				break;
     916:	17 c0       	rjmp	.+46     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 10: keypad_button = 2;
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	89 83       	std	Y+1, r24	; 0x01
				break;
     91c:	14 c0       	rjmp	.+40     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 11: keypad_button = 3;
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	89 83       	std	Y+1, r24	; 0x01
				break;
     922:	11 c0       	rjmp	.+34     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     924:	8d e2       	ldi	r24, 0x2D	; 45
     926:	89 83       	std	Y+1, r24	; 0x01
				break;
     928:	0e c0       	rjmp	.+28     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 13: keypad_button = 13;  /* ASCII of Enter */
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	89 83       	std	Y+1, r24	; 0x01
				break;			
     92e:	0b c0       	rjmp	.+22     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 14: keypad_button = 0;
     930:	19 82       	std	Y+1, r1	; 0x01
				break;
     932:	09 c0       	rjmp	.+18     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     934:	8d e3       	ldi	r24, 0x3D	; 61
     936:	89 83       	std	Y+1, r24	; 0x01
				break;
     938:	06 c0       	rjmp	.+12     	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     93a:	8b e2       	ldi	r24, 0x2B	; 43
     93c:	89 83       	std	Y+1, r24	; 0x01
				break;
     93e:	03 c0       	rjmp	.+6      	; 0x946 <KEYPAD_4x4_adjustKeyNumber+0xbc>
		default: keypad_button = button_number;
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	89 83       	std	Y+1, r24	; 0x01
				break;
     944:	00 00       	nop
	}
	return keypad_button;
     946:	89 81       	ldd	r24, Y+1	; 0x01
} 
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	2e 97       	sbiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     97a:	6f ef       	ldi	r22, 0xFF	; 255
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <GPIO_setupPortDirection>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 ea       	ldi	r26, 0xA0	; 160
     988:	b1 e4       	ldi	r27, 0x41	; 65
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	9a 83       	std	Y+2, r25	; 0x02
     98e:	ab 83       	std	Y+3, r26	; 0x03
     990:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	4a e7       	ldi	r20, 0x7A	; 122
     998:	53 e4       	ldi	r21, 0x43	; 67
     99a:	69 81       	ldd	r22, Y+1	; 0x01
     99c:	7a 81       	ldd	r23, Y+2	; 0x02
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	8d 83       	std	Y+5, r24	; 0x05
     9ac:	9e 83       	std	Y+6, r25	; 0x06
     9ae:	af 83       	std	Y+7, r26	; 0x07
     9b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	5f e3       	ldi	r21, 0x3F	; 63
     9ba:	6d 81       	ldd	r22, Y+5	; 0x05
     9bc:	7e 81       	ldd	r23, Y+6	; 0x06
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     9c6:	88 23       	and	r24, r24
     9c8:	2c f4       	brge	.+10     	; 0x9d4 <LCD_init+0x82>
		__ticks = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	9a 87       	std	Y+10, r25	; 0x0a
     9d0:	89 87       	std	Y+9, r24	; 0x09
     9d2:	3f c0       	rjmp	.+126    	; 0xa52 <LCD_init+0x100>
	else if (__tmp > 65535)
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
     9d8:	4f e7       	ldi	r20, 0x7F	; 127
     9da:	57 e4       	ldi	r21, 0x47	; 71
     9dc:	6d 81       	ldd	r22, Y+5	; 0x05
     9de:	7e 81       	ldd	r23, Y+6	; 0x06
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	98 85       	ldd	r25, Y+8	; 0x08
     9e4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     9e8:	18 16       	cp	r1, r24
     9ea:	4c f5       	brge	.+82     	; 0xa3e <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	69 81       	ldd	r22, Y+1	; 0x01
     9f6:	7a 81       	ldd	r23, Y+2	; 0x02
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	bc 01       	movw	r22, r24
     a06:	cd 01       	movw	r24, r26
     a08:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	9a 87       	std	Y+10, r25	; 0x0a
     a12:	89 87       	std	Y+9, r24	; 0x09
     a14:	0f c0       	rjmp	.+30     	; 0xa34 <LCD_init+0xe2>
     a16:	89 e1       	ldi	r24, 0x19	; 25
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9c 87       	std	Y+12, r25	; 0x0c
     a1c:	8b 87       	std	Y+11, r24	; 0x0b
     a1e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a20:	9c 85       	ldd	r25, Y+12	; 0x0c
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_init+0xd0>
     a26:	9c 87       	std	Y+12, r25	; 0x0c
     a28:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a2a:	89 85       	ldd	r24, Y+9	; 0x09
     a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9a 87       	std	Y+10, r25	; 0x0a
     a32:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a34:	89 85       	ldd	r24, Y+9	; 0x09
     a36:	9a 85       	ldd	r25, Y+10	; 0x0a
     a38:	89 2b       	or	r24, r25
     a3a:	69 f7       	brne	.-38     	; 0xa16 <LCD_init+0xc4>
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a3e:	6d 81       	ldd	r22, Y+5	; 0x05
     a40:	7e 81       	ldd	r23, Y+6	; 0x06
     a42:	8f 81       	ldd	r24, Y+7	; 0x07
     a44:	98 85       	ldd	r25, Y+8	; 0x08
     a46:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	9a 87       	std	Y+10, r25	; 0x0a
     a50:	89 87       	std	Y+9, r24	; 0x09
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	9e 87       	std	Y+14, r25	; 0x0e
     a58:	8d 87       	std	Y+13, r24	; 0x0d
     a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCD_init+0x10c>
     a62:	9e 87       	std	Y+14, r25	; 0x0e
     a64:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     a66:	88 e3       	ldi	r24, 0x38	; 56
     a68:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     a6c:	8c e0       	ldi	r24, 0x0C	; 12
     a6e:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_sendCommand>
}
     a78:	00 00       	nop
     a7a:	2e 96       	adiw	r28, 0x0e	; 14
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	e9 97       	sbiw	r28, 0x39	; 57
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e8       	ldi	r26, 0x80	; 128
     ab2:	bf e3       	ldi	r27, 0x3F	; 63
     ab4:	8b a7       	std	Y+43, r24	; 0x2b
     ab6:	9c a7       	std	Y+44, r25	; 0x2c
     ab8:	ad a7       	std	Y+45, r26	; 0x2d
     aba:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	4a e7       	ldi	r20, 0x7A	; 122
     ac2:	53 e4       	ldi	r21, 0x43	; 67
     ac4:	6b a5       	ldd	r22, Y+43	; 0x2b
     ac6:	7c a5       	ldd	r23, Y+44	; 0x2c
     ac8:	8d a5       	ldd	r24, Y+45	; 0x2d
     aca:	9e a5       	ldd	r25, Y+46	; 0x2e
     acc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	8f a7       	std	Y+47, r24	; 0x2f
     ad6:	98 ab       	std	Y+48, r25	; 0x30
     ad8:	a9 ab       	std	Y+49, r26	; 0x31
     ada:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e8       	ldi	r20, 0x80	; 128
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	6f a5       	ldd	r22, Y+47	; 0x2f
     ae6:	78 a9       	ldd	r23, Y+48	; 0x30
     ae8:	89 a9       	ldd	r24, Y+49	; 0x31
     aea:	9a a9       	ldd	r25, Y+50	; 0x32
     aec:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     af0:	88 23       	and	r24, r24
     af2:	2c f4       	brge	.+10     	; 0xafe <LCD_sendCommand+0x72>
		__ticks = 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9c ab       	std	Y+52, r25	; 0x34
     afa:	8b ab       	std	Y+51, r24	; 0x33
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	3f ef       	ldi	r19, 0xFF	; 255
     b02:	4f e7       	ldi	r20, 0x7F	; 127
     b04:	57 e4       	ldi	r21, 0x47	; 71
     b06:	6f a5       	ldd	r22, Y+47	; 0x2f
     b08:	78 a9       	ldd	r23, Y+48	; 0x30
     b0a:	89 a9       	ldd	r24, Y+49	; 0x31
     b0c:	9a a9       	ldd	r25, Y+50	; 0x32
     b0e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     b12:	18 16       	cp	r1, r24
     b14:	4c f5       	brge	.+82     	; 0xb68 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	51 e4       	ldi	r21, 0x41	; 65
     b1e:	6b a5       	ldd	r22, Y+43	; 0x2b
     b20:	7c a5       	ldd	r23, Y+44	; 0x2c
     b22:	8d a5       	ldd	r24, Y+45	; 0x2d
     b24:	9e a5       	ldd	r25, Y+46	; 0x2e
     b26:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	bc 01       	movw	r22, r24
     b30:	cd 01       	movw	r24, r26
     b32:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	9c ab       	std	Y+52, r25	; 0x34
     b3c:	8b ab       	std	Y+51, r24	; 0x33
     b3e:	0f c0       	rjmp	.+30     	; 0xb5e <LCD_sendCommand+0xd2>
     b40:	89 e1       	ldi	r24, 0x19	; 25
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	9e ab       	std	Y+54, r25	; 0x36
     b46:	8d ab       	std	Y+53, r24	; 0x35
     b48:	8d a9       	ldd	r24, Y+53	; 0x35
     b4a:	9e a9       	ldd	r25, Y+54	; 0x36
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <LCD_sendCommand+0xc0>
     b50:	9e ab       	std	Y+54, r25	; 0x36
     b52:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b54:	8b a9       	ldd	r24, Y+51	; 0x33
     b56:	9c a9       	ldd	r25, Y+52	; 0x34
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	9c ab       	std	Y+52, r25	; 0x34
     b5c:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b5e:	8b a9       	ldd	r24, Y+51	; 0x33
     b60:	9c a9       	ldd	r25, Y+52	; 0x34
     b62:	89 2b       	or	r24, r25
     b64:	69 f7       	brne	.-38     	; 0xb40 <LCD_sendCommand+0xb4>
     b66:	14 c0       	rjmp	.+40     	; 0xb90 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b68:	6f a5       	ldd	r22, Y+47	; 0x2f
     b6a:	78 a9       	ldd	r23, Y+48	; 0x30
     b6c:	89 a9       	ldd	r24, Y+49	; 0x31
     b6e:	9a a9       	ldd	r25, Y+50	; 0x32
     b70:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	9c ab       	std	Y+52, r25	; 0x34
     b7a:	8b ab       	std	Y+51, r24	; 0x33
     b7c:	8b a9       	ldd	r24, Y+51	; 0x33
     b7e:	9c a9       	ldd	r25, Y+52	; 0x34
     b80:	98 af       	std	Y+56, r25	; 0x38
     b82:	8f ab       	std	Y+55, r24	; 0x37
     b84:	8f a9       	ldd	r24, Y+55	; 0x37
     b86:	98 ad       	ldd	r25, Y+56	; 0x38
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_sendCommand+0xfc>
     b8c:	98 af       	std	Y+56, r25	; 0x38
     b8e:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e8       	ldi	r26, 0x80	; 128
     ba0:	bf e3       	ldi	r27, 0x3F	; 63
     ba2:	8d 8f       	std	Y+29, r24	; 0x1d
     ba4:	9e 8f       	std	Y+30, r25	; 0x1e
     ba6:	af 8f       	std	Y+31, r26	; 0x1f
     ba8:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	53 e4       	ldi	r21, 0x43	; 67
     bb2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bb4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bb8:	98 a1       	ldd	r25, Y+32	; 0x20
     bba:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	89 a3       	std	Y+33, r24	; 0x21
     bc4:	9a a3       	std	Y+34, r25	; 0x22
     bc6:	ab a3       	std	Y+35, r26	; 0x23
     bc8:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	69 a1       	ldd	r22, Y+33	; 0x21
     bd4:	7a a1       	ldd	r23, Y+34	; 0x22
     bd6:	8b a1       	ldd	r24, Y+35	; 0x23
     bd8:	9c a1       	ldd	r25, Y+36	; 0x24
     bda:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     bde:	88 23       	and	r24, r24
     be0:	2c f4       	brge	.+10     	; 0xbec <LCD_sendCommand+0x160>
		__ticks = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9e a3       	std	Y+38, r25	; 0x26
     be8:	8d a3       	std	Y+37, r24	; 0x25
     bea:	3f c0       	rjmp	.+126    	; 0xc6a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	69 a1       	ldd	r22, Y+33	; 0x21
     bf6:	7a a1       	ldd	r23, Y+34	; 0x22
     bf8:	8b a1       	ldd	r24, Y+35	; 0x23
     bfa:	9c a1       	ldd	r25, Y+36	; 0x24
     bfc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     c00:	18 16       	cp	r1, r24
     c02:	4c f5       	brge	.+82     	; 0xc56 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c12:	98 a1       	ldd	r25, Y+32	; 0x20
     c14:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	9e a3       	std	Y+38, r25	; 0x26
     c2a:	8d a3       	std	Y+37, r24	; 0x25
     c2c:	0f c0       	rjmp	.+30     	; 0xc4c <LCD_sendCommand+0x1c0>
     c2e:	89 e1       	ldi	r24, 0x19	; 25
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	98 a7       	std	Y+40, r25	; 0x28
     c34:	8f a3       	std	Y+39, r24	; 0x27
     c36:	8f a1       	ldd	r24, Y+39	; 0x27
     c38:	98 a5       	ldd	r25, Y+40	; 0x28
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <LCD_sendCommand+0x1ae>
     c3e:	98 a7       	std	Y+40, r25	; 0x28
     c40:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c42:	8d a1       	ldd	r24, Y+37	; 0x25
     c44:	9e a1       	ldd	r25, Y+38	; 0x26
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9e a3       	std	Y+38, r25	; 0x26
     c4a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	8d a1       	ldd	r24, Y+37	; 0x25
     c4e:	9e a1       	ldd	r25, Y+38	; 0x26
     c50:	89 2b       	or	r24, r25
     c52:	69 f7       	brne	.-38     	; 0xc2e <LCD_sendCommand+0x1a2>
     c54:	14 c0       	rjmp	.+40     	; 0xc7e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c56:	69 a1       	ldd	r22, Y+33	; 0x21
     c58:	7a a1       	ldd	r23, Y+34	; 0x22
     c5a:	8b a1       	ldd	r24, Y+35	; 0x23
     c5c:	9c a1       	ldd	r25, Y+36	; 0x24
     c5e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9e a3       	std	Y+38, r25	; 0x26
     c68:	8d a3       	std	Y+37, r24	; 0x25
     c6a:	8d a1       	ldd	r24, Y+37	; 0x25
     c6c:	9e a1       	ldd	r25, Y+38	; 0x26
     c6e:	9a a7       	std	Y+42, r25	; 0x2a
     c70:	89 a7       	std	Y+41, r24	; 0x29
     c72:	89 a5       	ldd	r24, Y+41	; 0x29
     c74:	9a a5       	ldd	r25, Y+42	; 0x2a
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <LCD_sendCommand+0x1ea>
     c7a:	9a a7       	std	Y+42, r25	; 0x2a
     c7c:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     c7e:	69 ad       	ldd	r22, Y+57	; 0x39
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	0e 94 0f 03 	call	0x61e	; 0x61e <GPIO_writePort>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e8       	ldi	r26, 0x80	; 128
     c8c:	bf e3       	ldi	r27, 0x3F	; 63
     c8e:	8f 87       	std	Y+15, r24	; 0x0f
     c90:	98 8b       	std	Y+16, r25	; 0x10
     c92:	a9 8b       	std	Y+17, r26	; 0x11
     c94:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	4a e7       	ldi	r20, 0x7A	; 122
     c9c:	53 e4       	ldi	r21, 0x43	; 67
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	78 89       	ldd	r23, Y+16	; 0x10
     ca2:	89 89       	ldd	r24, Y+17	; 0x11
     ca4:	9a 89       	ldd	r25, Y+18	; 0x12
     ca6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	8b 8b       	std	Y+19, r24	; 0x13
     cb0:	9c 8b       	std	Y+20, r25	; 0x14
     cb2:	ad 8b       	std	Y+21, r26	; 0x15
     cb4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e8       	ldi	r20, 0x80	; 128
     cbc:	5f e3       	ldi	r21, 0x3F	; 63
     cbe:	6b 89       	ldd	r22, Y+19	; 0x13
     cc0:	7c 89       	ldd	r23, Y+20	; 0x14
     cc2:	8d 89       	ldd	r24, Y+21	; 0x15
     cc4:	9e 89       	ldd	r25, Y+22	; 0x16
     cc6:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <LCD_sendCommand+0x24c>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	98 8f       	std	Y+24, r25	; 0x18
     cd4:	8f 8b       	std	Y+23, r24	; 0x17
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	3f ef       	ldi	r19, 0xFF	; 255
     cdc:	4f e7       	ldi	r20, 0x7F	; 127
     cde:	57 e4       	ldi	r21, 0x47	; 71
     ce0:	6b 89       	ldd	r22, Y+19	; 0x13
     ce2:	7c 89       	ldd	r23, Y+20	; 0x14
     ce4:	8d 89       	ldd	r24, Y+21	; 0x15
     ce6:	9e 89       	ldd	r25, Y+22	; 0x16
     ce8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e2       	ldi	r20, 0x20	; 32
     cf6:	51 e4       	ldi	r21, 0x41	; 65
     cf8:	6f 85       	ldd	r22, Y+15	; 0x0f
     cfa:	78 89       	ldd	r23, Y+16	; 0x10
     cfc:	89 89       	ldd	r24, Y+17	; 0x11
     cfe:	9a 89       	ldd	r25, Y+18	; 0x12
     d00:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	98 8f       	std	Y+24, r25	; 0x18
     d16:	8f 8b       	std	Y+23, r24	; 0x17
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <LCD_sendCommand+0x2ac>
     d1a:	89 e1       	ldi	r24, 0x19	; 25
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9a 8f       	std	Y+26, r25	; 0x1a
     d20:	89 8f       	std	Y+25, r24	; 0x19
     d22:	89 8d       	ldd	r24, Y+25	; 0x19
     d24:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <LCD_sendCommand+0x29a>
     d2a:	9a 8f       	std	Y+26, r25	; 0x1a
     d2c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8f 89       	ldd	r24, Y+23	; 0x17
     d30:	98 8d       	ldd	r25, Y+24	; 0x18
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	98 8f       	std	Y+24, r25	; 0x18
     d36:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	89 2b       	or	r24, r25
     d3e:	69 f7       	brne	.-38     	; 0xd1a <LCD_sendCommand+0x28e>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	6b 89       	ldd	r22, Y+19	; 0x13
     d44:	7c 89       	ldd	r23, Y+20	; 0x14
     d46:	8d 89       	ldd	r24, Y+21	; 0x15
     d48:	9e 89       	ldd	r25, Y+22	; 0x16
     d4a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	98 8f       	std	Y+24, r25	; 0x18
     d54:	8f 8b       	std	Y+23, r24	; 0x17
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	9c 8f       	std	Y+28, r25	; 0x1c
     d5c:	8b 8f       	std	Y+27, r24	; 0x1b
     d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <LCD_sendCommand+0x2d6>
     d66:	9c 8f       	std	Y+28, r25	; 0x1c
     d68:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e8       	ldi	r26, 0x80	; 128
     d7a:	bf e3       	ldi	r27, 0x3F	; 63
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	ab 83       	std	Y+3, r26	; 0x03
     d82:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a e7       	ldi	r20, 0x7A	; 122
     d8a:	53 e4       	ldi	r21, 0x43	; 67
     d8c:	69 81       	ldd	r22, Y+1	; 0x01
     d8e:	7a 81       	ldd	r23, Y+2	; 0x02
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	af 83       	std	Y+7, r26	; 0x07
     da2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	6d 81       	ldd	r22, Y+5	; 0x05
     dae:	7e 81       	ldd	r23, Y+6	; 0x06
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	98 85       	ldd	r25, Y+8	; 0x08
     db4:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	2c f4       	brge	.+10     	; 0xdc6 <LCD_sendCommand+0x33a>
		__ticks = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9a 87       	std	Y+10, r25	; 0x0a
     dc2:	89 87       	std	Y+9, r24	; 0x09
     dc4:	3f c0       	rjmp	.+126    	; 0xe44 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	6d 81       	ldd	r22, Y+5	; 0x05
     dd0:	7e 81       	ldd	r23, Y+6	; 0x06
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
     dd4:	98 85       	ldd	r25, Y+8	; 0x08
     dd6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     dda:	18 16       	cp	r1, r24
     ddc:	4c f5       	brge	.+82     	; 0xe30 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	69 81       	ldd	r22, Y+1	; 0x01
     de8:	7a 81       	ldd	r23, Y+2	; 0x02
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	9a 87       	std	Y+10, r25	; 0x0a
     e04:	89 87       	std	Y+9, r24	; 0x09
     e06:	0f c0       	rjmp	.+30     	; 0xe26 <LCD_sendCommand+0x39a>
     e08:	89 e1       	ldi	r24, 0x19	; 25
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9c 87       	std	Y+12, r25	; 0x0c
     e0e:	8b 87       	std	Y+11, r24	; 0x0b
     e10:	8b 85       	ldd	r24, Y+11	; 0x0b
     e12:	9c 85       	ldd	r25, Y+12	; 0x0c
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <LCD_sendCommand+0x388>
     e18:	9c 87       	std	Y+12, r25	; 0x0c
     e1a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	9a 87       	std	Y+10, r25	; 0x0a
     e24:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	89 2b       	or	r24, r25
     e2c:	69 f7       	brne	.-38     	; 0xe08 <LCD_sendCommand+0x37c>
	_delay_ms(1); /* delay for processing Th = 13ns */
}
     e2e:	14 c0       	rjmp	.+40     	; 0xe58 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e30:	6d 81       	ldd	r22, Y+5	; 0x05
     e32:	7e 81       	ldd	r23, Y+6	; 0x06
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	98 85       	ldd	r25, Y+8	; 0x08
     e38:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	9a 87       	std	Y+10, r25	; 0x0a
     e42:	89 87       	std	Y+9, r24	; 0x09
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	9e 87       	std	Y+14, r25	; 0x0e
     e4a:	8d 87       	std	Y+13, r24	; 0x0d
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <LCD_sendCommand+0x3c4>
     e54:	9e 87       	std	Y+14, r25	; 0x0e
     e56:	8d 87       	std	Y+13, r24	; 0x0d
     e58:	00 00       	nop
     e5a:	e9 96       	adiw	r28, 0x39	; 57
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	e9 97       	sbiw	r28, 0x39	; 57
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e8       	ldi	r26, 0x80	; 128
     e92:	bf e3       	ldi	r27, 0x3F	; 63
     e94:	8b a7       	std	Y+43, r24	; 0x2b
     e96:	9c a7       	std	Y+44, r25	; 0x2c
     e98:	ad a7       	std	Y+45, r26	; 0x2d
     e9a:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	53 e4       	ldi	r21, 0x43	; 67
     ea4:	6b a5       	ldd	r22, Y+43	; 0x2b
     ea6:	7c a5       	ldd	r23, Y+44	; 0x2c
     ea8:	8d a5       	ldd	r24, Y+45	; 0x2d
     eaa:	9e a5       	ldd	r25, Y+46	; 0x2e
     eac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8f a7       	std	Y+47, r24	; 0x2f
     eb6:	98 ab       	std	Y+48, r25	; 0x30
     eb8:	a9 ab       	std	Y+49, r26	; 0x31
     eba:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	6f a5       	ldd	r22, Y+47	; 0x2f
     ec6:	78 a9       	ldd	r23, Y+48	; 0x30
     ec8:	89 a9       	ldd	r24, Y+49	; 0x31
     eca:	9a a9       	ldd	r25, Y+50	; 0x32
     ecc:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <LCD_displayCharacter+0x72>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c ab       	std	Y+52, r25	; 0x34
     eda:	8b ab       	std	Y+51, r24	; 0x33
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	6f a5       	ldd	r22, Y+47	; 0x2f
     ee8:	78 a9       	ldd	r23, Y+48	; 0x30
     eea:	89 a9       	ldd	r24, Y+49	; 0x31
     eec:	9a a9       	ldd	r25, Y+50	; 0x32
     eee:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	6b a5       	ldd	r22, Y+43	; 0x2b
     f00:	7c a5       	ldd	r23, Y+44	; 0x2c
     f02:	8d a5       	ldd	r24, Y+45	; 0x2d
     f04:	9e a5       	ldd	r25, Y+46	; 0x2e
     f06:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9c ab       	std	Y+52, r25	; 0x34
     f1c:	8b ab       	std	Y+51, r24	; 0x33
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <LCD_displayCharacter+0xd2>
     f20:	89 e1       	ldi	r24, 0x19	; 25
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e ab       	std	Y+54, r25	; 0x36
     f26:	8d ab       	std	Y+53, r24	; 0x35
     f28:	8d a9       	ldd	r24, Y+53	; 0x35
     f2a:	9e a9       	ldd	r25, Y+54	; 0x36
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <LCD_displayCharacter+0xc0>
     f30:	9e ab       	std	Y+54, r25	; 0x36
     f32:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8b a9       	ldd	r24, Y+51	; 0x33
     f36:	9c a9       	ldd	r25, Y+52	; 0x34
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9c ab       	std	Y+52, r25	; 0x34
     f3c:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8b a9       	ldd	r24, Y+51	; 0x33
     f40:	9c a9       	ldd	r25, Y+52	; 0x34
     f42:	89 2b       	or	r24, r25
     f44:	69 f7       	brne	.-38     	; 0xf20 <LCD_displayCharacter+0xb4>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6f a5       	ldd	r22, Y+47	; 0x2f
     f4a:	78 a9       	ldd	r23, Y+48	; 0x30
     f4c:	89 a9       	ldd	r24, Y+49	; 0x31
     f4e:	9a a9       	ldd	r25, Y+50	; 0x32
     f50:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9c ab       	std	Y+52, r25	; 0x34
     f5a:	8b ab       	std	Y+51, r24	; 0x33
     f5c:	8b a9       	ldd	r24, Y+51	; 0x33
     f5e:	9c a9       	ldd	r25, Y+52	; 0x34
     f60:	98 af       	std	Y+56, r25	; 0x38
     f62:	8f ab       	std	Y+55, r24	; 0x37
     f64:	8f a9       	ldd	r24, Y+55	; 0x37
     f66:	98 ad       	ldd	r25, Y+56	; 0x38
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <LCD_displayCharacter+0xfc>
     f6c:	98 af       	std	Y+56, r25	; 0x38
     f6e:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e8       	ldi	r26, 0x80	; 128
     f80:	bf e3       	ldi	r27, 0x3F	; 63
     f82:	8d 8f       	std	Y+29, r24	; 0x1d
     f84:	9e 8f       	std	Y+30, r25	; 0x1e
     f86:	af 8f       	std	Y+31, r26	; 0x1f
     f88:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a e7       	ldi	r20, 0x7A	; 122
     f90:	53 e4       	ldi	r21, 0x43	; 67
     f92:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f94:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f98:	98 a1       	ldd	r25, Y+32	; 0x20
     f9a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 a3       	std	Y+33, r24	; 0x21
     fa4:	9a a3       	std	Y+34, r25	; 0x22
     fa6:	ab a3       	std	Y+35, r26	; 0x23
     fa8:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	69 a1       	ldd	r22, Y+33	; 0x21
     fb4:	7a a1       	ldd	r23, Y+34	; 0x22
     fb6:	8b a1       	ldd	r24, Y+35	; 0x23
     fb8:	9c a1       	ldd	r25, Y+36	; 0x24
     fba:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <LCD_displayCharacter+0x160>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e a3       	std	Y+38, r25	; 0x26
     fc8:	8d a3       	std	Y+37, r24	; 0x25
     fca:	3f c0       	rjmp	.+126    	; 0x104a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	69 a1       	ldd	r22, Y+33	; 0x21
     fd6:	7a a1       	ldd	r23, Y+34	; 0x22
     fd8:	8b a1       	ldd	r24, Y+35	; 0x23
     fda:	9c a1       	ldd	r25, Y+36	; 0x24
     fdc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fee:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff2:	98 a1       	ldd	r25, Y+32	; 0x20
     ff4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e a3       	std	Y+38, r25	; 0x26
    100a:	8d a3       	std	Y+37, r24	; 0x25
    100c:	0f c0       	rjmp	.+30     	; 0x102c <LCD_displayCharacter+0x1c0>
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	98 a7       	std	Y+40, r25	; 0x28
    1014:	8f a3       	std	Y+39, r24	; 0x27
    1016:	8f a1       	ldd	r24, Y+39	; 0x27
    1018:	98 a5       	ldd	r25, Y+40	; 0x28
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCD_displayCharacter+0x1ae>
    101e:	98 a7       	std	Y+40, r25	; 0x28
    1020:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d a1       	ldd	r24, Y+37	; 0x25
    1024:	9e a1       	ldd	r25, Y+38	; 0x26
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e a3       	std	Y+38, r25	; 0x26
    102a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d a1       	ldd	r24, Y+37	; 0x25
    102e:	9e a1       	ldd	r25, Y+38	; 0x26
    1030:	89 2b       	or	r24, r25
    1032:	69 f7       	brne	.-38     	; 0x100e <LCD_displayCharacter+0x1a2>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	69 a1       	ldd	r22, Y+33	; 0x21
    1038:	7a a1       	ldd	r23, Y+34	; 0x22
    103a:	8b a1       	ldd	r24, Y+35	; 0x23
    103c:	9c a1       	ldd	r25, Y+36	; 0x24
    103e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e a3       	std	Y+38, r25	; 0x26
    1048:	8d a3       	std	Y+37, r24	; 0x25
    104a:	8d a1       	ldd	r24, Y+37	; 0x25
    104c:	9e a1       	ldd	r25, Y+38	; 0x26
    104e:	9a a7       	std	Y+42, r25	; 0x2a
    1050:	89 a7       	std	Y+41, r24	; 0x29
    1052:	89 a5       	ldd	r24, Y+41	; 0x29
    1054:	9a a5       	ldd	r25, Y+42	; 0x2a
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCD_displayCharacter+0x1ea>
    105a:	9a a7       	std	Y+42, r25	; 0x2a
    105c:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    105e:	69 ad       	ldd	r22, Y+57	; 0x39
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 0f 03 	call	0x61e	; 0x61e <GPIO_writePort>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a0 e8       	ldi	r26, 0x80	; 128
    106c:	bf e3       	ldi	r27, 0x3F	; 63
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	98 8b       	std	Y+16, r25	; 0x10
    1072:	a9 8b       	std	Y+17, r26	; 0x11
    1074:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4a e7       	ldi	r20, 0x7A	; 122
    107c:	53 e4       	ldi	r21, 0x43	; 67
    107e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1080:	78 89       	ldd	r23, Y+16	; 0x10
    1082:	89 89       	ldd	r24, Y+17	; 0x11
    1084:	9a 89       	ldd	r25, Y+18	; 0x12
    1086:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	8b 8b       	std	Y+19, r24	; 0x13
    1090:	9c 8b       	std	Y+20, r25	; 0x14
    1092:	ad 8b       	std	Y+21, r26	; 0x15
    1094:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	6b 89       	ldd	r22, Y+19	; 0x13
    10a0:	7c 89       	ldd	r23, Y+20	; 0x14
    10a2:	8d 89       	ldd	r24, Y+21	; 0x15
    10a4:	9e 89       	ldd	r25, Y+22	; 0x16
    10a6:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	98 8f       	std	Y+24, r25	; 0x18
    10b4:	8f 8b       	std	Y+23, r24	; 0x17
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	6b 89       	ldd	r22, Y+19	; 0x13
    10c2:	7c 89       	ldd	r23, Y+20	; 0x14
    10c4:	8d 89       	ldd	r24, Y+21	; 0x15
    10c6:	9e 89       	ldd	r25, Y+22	; 0x16
    10c8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	4c f5       	brge	.+82     	; 0x1122 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    10da:	78 89       	ldd	r23, Y+16	; 0x10
    10dc:	89 89       	ldd	r24, Y+17	; 0x11
    10de:	9a 89       	ldd	r25, Y+18	; 0x12
    10e0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	98 8f       	std	Y+24, r25	; 0x18
    10f6:	8f 8b       	std	Y+23, r24	; 0x17
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <LCD_displayCharacter+0x2ac>
    10fa:	89 e1       	ldi	r24, 0x19	; 25
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1100:	89 8f       	std	Y+25, r24	; 0x19
    1102:	89 8d       	ldd	r24, Y+25	; 0x19
    1104:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <LCD_displayCharacter+0x29a>
    110a:	9a 8f       	std	Y+26, r25	; 0x1a
    110c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	98 8d       	ldd	r25, Y+24	; 0x18
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	98 8f       	std	Y+24, r25	; 0x18
    1116:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	89 2b       	or	r24, r25
    111e:	69 f7       	brne	.-38     	; 0x10fa <LCD_displayCharacter+0x28e>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	6b 89       	ldd	r22, Y+19	; 0x13
    1124:	7c 89       	ldd	r23, Y+20	; 0x14
    1126:	8d 89       	ldd	r24, Y+21	; 0x15
    1128:	9e 89       	ldd	r25, Y+22	; 0x16
    112a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	98 8f       	std	Y+24, r25	; 0x18
    1134:	8f 8b       	std	Y+23, r24	; 0x17
    1136:	8f 89       	ldd	r24, Y+23	; 0x17
    1138:	98 8d       	ldd	r25, Y+24	; 0x18
    113a:	9c 8f       	std	Y+28, r25	; 0x1c
    113c:	8b 8f       	std	Y+27, r24	; 0x1b
    113e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <LCD_displayCharacter+0x2d6>
    1146:	9c 8f       	std	Y+28, r25	; 0x1c
    1148:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GPIO_writePin>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a0 e8       	ldi	r26, 0x80	; 128
    115a:	bf e3       	ldi	r27, 0x3F	; 63
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	9a 83       	std	Y+2, r25	; 0x02
    1160:	ab 83       	std	Y+3, r26	; 0x03
    1162:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a e7       	ldi	r20, 0x7A	; 122
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	69 81       	ldd	r22, Y+1	; 0x01
    116e:	7a 81       	ldd	r23, Y+2	; 0x02
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	af 83       	std	Y+7, r26	; 0x07
    1182:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	6d 81       	ldd	r22, Y+5	; 0x05
    118e:	7e 81       	ldd	r23, Y+6	; 0x06
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	98 85       	ldd	r25, Y+8	; 0x08
    1194:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
    1198:	88 23       	and	r24, r24
    119a:	2c f4       	brge	.+10     	; 0x11a6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9a 87       	std	Y+10, r25	; 0x0a
    11a2:	89 87       	std	Y+9, r24	; 0x09
    11a4:	3f c0       	rjmp	.+126    	; 0x1224 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	6d 81       	ldd	r22, Y+5	; 0x05
    11b0:	7e 81       	ldd	r23, Y+6	; 0x06
    11b2:	8f 81       	ldd	r24, Y+7	; 0x07
    11b4:	98 85       	ldd	r25, Y+8	; 0x08
    11b6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	4c f5       	brge	.+82     	; 0x1210 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	69 81       	ldd	r22, Y+1	; 0x01
    11c8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	9a 87       	std	Y+10, r25	; 0x0a
    11e4:	89 87       	std	Y+9, r24	; 0x09
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <LCD_displayCharacter+0x39a>
    11e8:	89 e1       	ldi	r24, 0x19	; 25
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	9c 87       	std	Y+12, r25	; 0x0c
    11ee:	8b 87       	std	Y+11, r24	; 0x0b
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <LCD_displayCharacter+0x388>
    11f8:	9c 87       	std	Y+12, r25	; 0x0c
    11fa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	9a 87       	std	Y+10, r25	; 0x0a
    1204:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	89 2b       	or	r24, r25
    120c:	69 f7       	brne	.-38     	; 0x11e8 <LCD_displayCharacter+0x37c>
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1210:	6d 81       	ldd	r22, Y+5	; 0x05
    1212:	7e 81       	ldd	r23, Y+6	; 0x06
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9a 87       	std	Y+10, r25	; 0x0a
    1222:	89 87       	std	Y+9, r24	; 0x09
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	9e 87       	std	Y+14, r25	; 0x0e
    122a:	8d 87       	std	Y+13, r24	; 0x0d
    122c:	8d 85       	ldd	r24, Y+13	; 0x0d
    122e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <LCD_displayCharacter+0x3c4>
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	8d 87       	std	Y+13, r24	; 0x0d
    1238:	00 00       	nop
    123a:	e9 96       	adiw	r28, 0x39	; 57
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <LCD_displayString+0x6>
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	9b 83       	std	Y+3, r25	; 0x03
    125a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    125c:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
    125e:	0e c0       	rjmp	.+28     	; 0x127c <LCD_displayString+0x30>
	{
		LCD_displayCharacter(Str[i]);
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2a 81       	ldd	r18, Y+2	; 0x02
    1268:	3b 81       	ldd	r19, Y+3	; 0x03
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	fc 01       	movw	r30, r24
    1270:	80 81       	ld	r24, Z
    1272:	0e 94 36 07 	call	0xe6c	; 0xe6c <LCD_displayCharacter>
		i++;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	fc 01       	movw	r30, r24
    128c:	80 81       	ld	r24, Z
    128e:	88 23       	and	r24, r24
    1290:	39 f7       	brne	.-50     	; 0x1260 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1292:	00 00       	nop
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <LCD_moveCursor+0x6>
    12a6:	1f 92       	push	r1
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	79 f0       	breq	.+30     	; 0x12da <LCD_moveCursor+0x3a>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	1c f4       	brge	.+6      	; 0x12c8 <LCD_moveCursor+0x28>
    12c2:	89 2b       	or	r24, r25
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <LCD_moveCursor+0x34>
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <LCD_moveCursor+0x52>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	91 05       	cpc	r25, r1
    12cc:	51 f0       	breq	.+20     	; 0x12e2 <LCD_moveCursor+0x42>
    12ce:	03 97       	sbiw	r24, 0x03	; 3
    12d0:	61 f0       	breq	.+24     	; 0x12ea <LCD_moveCursor+0x4a>
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <LCD_moveCursor+0x52>
	{
		case 0:
			lcd_memory_address=col;
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	89 83       	std	Y+1, r24	; 0x01
				break;
    12d8:	0c c0       	rjmp	.+24     	; 0x12f2 <LCD_moveCursor+0x52>
		case 1:
			lcd_memory_address=col+0x40;
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	80 5c       	subi	r24, 0xC0	; 192
    12de:	89 83       	std	Y+1, r24	; 0x01
				break;
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <LCD_moveCursor+0x52>
		case 2:
			lcd_memory_address=col+0x10;
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	80 5f       	subi	r24, 0xF0	; 240
    12e6:	89 83       	std	Y+1, r24	; 0x01
				break;
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <LCD_moveCursor+0x52>
		case 3:
			lcd_memory_address=col+0x50;
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	80 5b       	subi	r24, 0xB0	; 176
    12ee:	89 83       	std	Y+1, r24	; 0x01
				break;
    12f0:	00 00       	nop
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_sendCommand>
}
    12fa:	00 00       	nop
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	00 d0       	rcall	.+0      	; 0x130e <LCD_displayStringRowColumn+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <LCD_displayStringRowColumn+0x8>
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	6a 83       	std	Y+2, r22	; 0x02
    1318:	5c 83       	std	Y+4, r21	; 0x04
    131a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    131c:	6a 81       	ldd	r22, Y+2	; 0x02
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	0e 94 50 09 	call	0x12a0	; 0x12a0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_displayString>
}
    132c:	00 00       	nop
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	66 97       	sbiw	r28, 0x16	; 22
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	9e 8b       	std	Y+22, r25	; 0x16
    1352:	8d 8b       	std	Y+21, r24	; 0x15
   char buff[20]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1354:	8d 89       	ldd	r24, Y+21	; 0x15
    1356:	9e 89       	ldd	r25, Y+22	; 0x16
    1358:	4a e0       	ldi	r20, 0x0A	; 10
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	9e 01       	movw	r18, r28
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	b9 01       	movw	r22, r18
    1364:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <itoa>
   LCD_displayString(buff); /* Display the string */
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	0e 94 26 09 	call	0x124c	; 0x124c <LCD_displayString>
}
    1370:	00 00       	nop
    1372:	66 96       	adiw	r28, 0x16	; 22
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_sendCommand>
}
    1392:	00 00       	nop
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <doOperation>:
 * Perform the mathematical operation specified by the operator on two operands.
 * The supported operations are addition (+), subtraction (-), multiplication (*), and division (%).
 * Returns the result of the operation.
 */

uint32 doOperation(uint32 firstOperand, uint32 secondOperand, uint8 Operation){
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	29 97       	sbiw	r28, 0x09	; 9
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	69 83       	std	Y+1, r22	; 0x01
    13b8:	7a 83       	std	Y+2, r23	; 0x02
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	2d 83       	std	Y+5, r18	; 0x05
    13c0:	3e 83       	std	Y+6, r19	; 0x06
    13c2:	4f 83       	std	Y+7, r20	; 0x07
    13c4:	58 87       	std	Y+8, r21	; 0x08
    13c6:	09 87       	std	Y+9, r16	; 0x09
	switch (Operation){
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	8a 32       	cpi	r24, 0x2A	; 42
    13d0:	91 05       	cpc	r25, r1
    13d2:	51 f1       	breq	.+84     	; 0x1428 <doOperation+0x8e>
    13d4:	8b 32       	cpi	r24, 0x2B	; 43
    13d6:	91 05       	cpc	r25, r1
    13d8:	1c f4       	brge	.+6      	; 0x13e0 <doOperation+0x46>
    13da:	85 97       	sbiw	r24, 0x25	; 37
    13dc:	a1 f1       	breq	.+104    	; 0x1446 <doOperation+0xac>
    13de:	42 c0       	rjmp	.+132    	; 0x1464 <doOperation+0xca>
    13e0:	8b 32       	cpi	r24, 0x2B	; 43
    13e2:	91 05       	cpc	r25, r1
    13e4:	19 f0       	breq	.+6      	; 0x13ec <doOperation+0x52>
    13e6:	8d 97       	sbiw	r24, 0x2d	; 45
    13e8:	71 f0       	breq	.+28     	; 0x1406 <doOperation+0x6c>
    13ea:	3c c0       	rjmp	.+120    	; 0x1464 <doOperation+0xca>
		case '+':
			return (firstOperand + secondOperand);
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	3a 81       	ldd	r19, Y+2	; 0x02
    13f0:	4b 81       	ldd	r20, Y+3	; 0x03
    13f2:	5c 81       	ldd	r21, Y+4	; 0x04
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	af 81       	ldd	r26, Y+7	; 0x07
    13fa:	b8 85       	ldd	r27, Y+8	; 0x08
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	a4 1f       	adc	r26, r20
    1402:	b5 1f       	adc	r27, r21
    1404:	32 c0       	rjmp	.+100    	; 0x146a <doOperation+0xd0>
			break;
		case '-':
			return (firstOperand - secondOperand);
    1406:	29 81       	ldd	r18, Y+1	; 0x01
    1408:	3a 81       	ldd	r19, Y+2	; 0x02
    140a:	4b 81       	ldd	r20, Y+3	; 0x03
    140c:	5c 81       	ldd	r21, Y+4	; 0x04
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	af 81       	ldd	r26, Y+7	; 0x07
    1414:	b8 85       	ldd	r27, Y+8	; 0x08
    1416:	79 01       	movw	r14, r18
    1418:	8a 01       	movw	r16, r20
    141a:	e8 1a       	sub	r14, r24
    141c:	f9 0a       	sbc	r15, r25
    141e:	0a 0b       	sbc	r16, r26
    1420:	1b 0b       	sbc	r17, r27
    1422:	d8 01       	movw	r26, r16
    1424:	c7 01       	movw	r24, r14
    1426:	21 c0       	rjmp	.+66     	; 0x146a <doOperation+0xd0>
			break;
		case '*':
			return (firstOperand * secondOperand);
    1428:	29 81       	ldd	r18, Y+1	; 0x01
    142a:	3a 81       	ldd	r19, Y+2	; 0x02
    142c:	4b 81       	ldd	r20, Y+3	; 0x03
    142e:	5c 81       	ldd	r21, Y+4	; 0x04
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	af 81       	ldd	r26, Y+7	; 0x07
    1436:	b8 85       	ldd	r27, Y+8	; 0x08
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 36 0c 	call	0x186c	; 0x186c <__mulsi3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	12 c0       	rjmp	.+36     	; 0x146a <doOperation+0xd0>
		break;
			break;
		case '%':
			return (firstOperand / secondOperand);
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	ab 81       	ldd	r26, Y+3	; 0x03
    144c:	bc 81       	ldd	r27, Y+4	; 0x04
    144e:	2d 81       	ldd	r18, Y+5	; 0x05
    1450:	3e 81       	ldd	r19, Y+6	; 0x06
    1452:	4f 81       	ldd	r20, Y+7	; 0x07
    1454:	58 85       	ldd	r21, Y+8	; 0x08
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 46 0c 	call	0x188c	; 0x188c <__udivmodsi4>
    145e:	da 01       	movw	r26, r20
    1460:	c9 01       	movw	r24, r18
    1462:	03 c0       	rjmp	.+6      	; 0x146a <doOperation+0xd0>
			break;
	}
	return 0;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	dc 01       	movw	r26, r24

}
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	29 96       	adiw	r28, 0x09	; 9
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	08 95       	ret

00001488 <main>:

int main(void)
{
    1488:	0f 93       	push	r16
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	ae 97       	sbiw	r28, 0x2e	; 46
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
	uint8 key;               /* Variable to store the pressed key value */
	uint8 operation = 0;     /* Variable to store the operation (+, -, *, /) */
    149e:	19 82       	std	Y+1, r1	; 0x01
	sint32 result;           /* Variable to store the result of the operation*/

	sint32 first = 0;        /* Variable to store the first operand*/
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	1b 82       	std	Y+3, r1	; 0x03
    14a4:	1c 82       	std	Y+4, r1	; 0x04
    14a6:	1d 82       	std	Y+5, r1	; 0x05
	sint32 second = 0;       /*Variable to store the second operand*/
    14a8:	1a 86       	std	Y+10, r1	; 0x0a
    14aa:	1b 86       	std	Y+11, r1	; 0x0b
    14ac:	1c 86       	std	Y+12, r1	; 0x0c
    14ae:	1d 86       	std	Y+13, r1	; 0x0d
	sint32 num = 0;          /* Variable to store the currently entered number*/
    14b0:	1e 82       	std	Y+6, r1	; 0x06
    14b2:	1f 82       	std	Y+7, r1	; 0x07
    14b4:	18 86       	std	Y+8, r1	; 0x08
    14b6:	19 86       	std	Y+9, r1	; 0x09

	LCD_init();              /* Initialize the LCD*/
    14b8:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_init>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a8 ec       	ldi	r26, 0xC8	; 200
    14c2:	b2 e4       	ldi	r27, 0x42	; 66
    14c4:	8b 8b       	std	Y+19, r24	; 0x13
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	ad 8b       	std	Y+21, r26	; 0x15
    14ca:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	4a e7       	ldi	r20, 0x7A	; 122
    14d2:	53 e4       	ldi	r21, 0x43	; 67
    14d4:	6b 89       	ldd	r22, Y+19	; 0x13
    14d6:	7c 89       	ldd	r23, Y+20	; 0x14
    14d8:	8d 89       	ldd	r24, Y+21	; 0x15
    14da:	9e 89       	ldd	r25, Y+22	; 0x16
    14dc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8f 8b       	std	Y+23, r24	; 0x17
    14e6:	98 8f       	std	Y+24, r25	; 0x18
    14e8:	a9 8f       	std	Y+25, r26	; 0x19
    14ea:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e8       	ldi	r20, 0x80	; 128
    14f2:	5f e3       	ldi	r21, 0x3F	; 63
    14f4:	6f 89       	ldd	r22, Y+23	; 0x17
    14f6:	78 8d       	ldd	r23, Y+24	; 0x18
    14f8:	89 8d       	ldd	r24, Y+25	; 0x19
    14fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14fc:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <main+0x86>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 8f       	std	Y+28, r25	; 0x1c
    150a:	8b 8f       	std	Y+27, r24	; 0x1b
    150c:	3f c0       	rjmp	.+126    	; 0x158c <main+0x104>
	else if (__tmp > 65535)
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	57 e4       	ldi	r21, 0x47	; 71
    1516:	6f 89       	ldd	r22, Y+23	; 0x17
    1518:	78 8d       	ldd	r23, Y+24	; 0x18
    151a:	89 8d       	ldd	r24, Y+25	; 0x19
    151c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    151e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e2       	ldi	r20, 0x20	; 32
    152c:	51 e4       	ldi	r21, 0x41	; 65
    152e:	6b 89       	ldd	r22, Y+19	; 0x13
    1530:	7c 89       	ldd	r23, Y+20	; 0x14
    1532:	8d 89       	ldd	r24, Y+21	; 0x15
    1534:	9e 89       	ldd	r25, Y+22	; 0x16
    1536:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9c 8f       	std	Y+28, r25	; 0x1c
    154c:	8b 8f       	std	Y+27, r24	; 0x1b
    154e:	0f c0       	rjmp	.+30     	; 0x156e <main+0xe6>
    1550:	89 e1       	ldi	r24, 0x19	; 25
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9e 8f       	std	Y+30, r25	; 0x1e
    1556:	8d 8f       	std	Y+29, r24	; 0x1d
    1558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <main+0xd4>
    1560:	9e 8f       	std	Y+30, r25	; 0x1e
    1562:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9c 8f       	std	Y+28, r25	; 0x1c
    156c:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1572:	89 2b       	or	r24, r25
    1574:	69 f7       	brne	.-38     	; 0x1550 <main+0xc8>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	6f 89       	ldd	r22, Y+23	; 0x17
    157a:	78 8d       	ldd	r23, Y+24	; 0x18
    157c:	89 8d       	ldd	r24, Y+25	; 0x19
    157e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1580:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9c 8f       	std	Y+28, r25	; 0x1c
    158a:	8b 8f       	std	Y+27, r24	; 0x1b
    158c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    158e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1590:	98 a3       	std	Y+32, r25	; 0x20
    1592:	8f 8f       	std	Y+31, r24	; 0x1f
    1594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1596:	98 a1       	ldd	r25, Y+32	; 0x20
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0x110>
    159c:	98 a3       	std	Y+32, r25	; 0x20
    159e:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(100);          /* Wait for 100 ms*/


	while(1)
	{
		key = KEYPAD_getPressedKey();
    15a0:	0e 94 83 03 	call	0x706	; 0x706 <KEYPAD_getPressedKey>
    15a4:	8e 87       	std	Y+14, r24	; 0x0e
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a8 e4       	ldi	r26, 0x48	; 72
    15ac:	b3 e4       	ldi	r27, 0x43	; 67
    15ae:	89 a3       	std	Y+33, r24	; 0x21
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	ab a3       	std	Y+35, r26	; 0x23
    15b4:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a e7       	ldi	r20, 0x7A	; 122
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	69 a1       	ldd	r22, Y+33	; 0x21
    15c0:	7a a1       	ldd	r23, Y+34	; 0x22
    15c2:	8b a1       	ldd	r24, Y+35	; 0x23
    15c4:	9c a1       	ldd	r25, Y+36	; 0x24
    15c6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8d a3       	std	Y+37, r24	; 0x25
    15d0:	9e a3       	std	Y+38, r25	; 0x26
    15d2:	af a3       	std	Y+39, r26	; 0x27
    15d4:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	6d a1       	ldd	r22, Y+37	; 0x25
    15e0:	7e a1       	ldd	r23, Y+38	; 0x26
    15e2:	8f a1       	ldd	r24, Y+39	; 0x27
    15e4:	98 a5       	ldd	r25, Y+40	; 0x28
    15e6:	0e 94 88 0c 	call	0x1910	; 0x1910 <__cmpsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <main+0x170>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9a a7       	std	Y+42, r25	; 0x2a
    15f4:	89 a7       	std	Y+41, r24	; 0x29
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <main+0x1ee>
	else if (__tmp > 65535)
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	6d a1       	ldd	r22, Y+37	; 0x25
    1602:	7e a1       	ldd	r23, Y+38	; 0x26
    1604:	8f a1       	ldd	r24, Y+39	; 0x27
    1606:	98 a5       	ldd	r25, Y+40	; 0x28
    1608:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__gesf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	69 a1       	ldd	r22, Y+33	; 0x21
    161a:	7a a1       	ldd	r23, Y+34	; 0x22
    161c:	8b a1       	ldd	r24, Y+35	; 0x23
    161e:	9c a1       	ldd	r25, Y+36	; 0x24
    1620:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9a a7       	std	Y+42, r25	; 0x2a
    1636:	89 a7       	std	Y+41, r24	; 0x29
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <main+0x1d0>
    163a:	89 e1       	ldi	r24, 0x19	; 25
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9c a7       	std	Y+44, r25	; 0x2c
    1640:	8b a7       	std	Y+43, r24	; 0x2b
    1642:	8b a5       	ldd	r24, Y+43	; 0x2b
    1644:	9c a5       	ldd	r25, Y+44	; 0x2c
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <main+0x1be>
    164a:	9c a7       	std	Y+44, r25	; 0x2c
    164c:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9a a7       	std	Y+42, r25	; 0x2a
    1656:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	89 a5       	ldd	r24, Y+41	; 0x29
    165a:	9a a5       	ldd	r25, Y+42	; 0x2a
    165c:	89 2b       	or	r24, r25
    165e:	69 f7       	brne	.-38     	; 0x163a <main+0x1b2>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6d a1       	ldd	r22, Y+37	; 0x25
    1664:	7e a1       	ldd	r23, Y+38	; 0x26
    1666:	8f a1       	ldd	r24, Y+39	; 0x27
    1668:	98 a5       	ldd	r25, Y+40	; 0x28
    166a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9a a7       	std	Y+42, r25	; 0x2a
    1674:	89 a7       	std	Y+41, r24	; 0x29
    1676:	89 a5       	ldd	r24, Y+41	; 0x29
    1678:	9a a5       	ldd	r25, Y+42	; 0x2a
    167a:	9e a7       	std	Y+46, r25	; 0x2e
    167c:	8d a7       	std	Y+45, r24	; 0x2d
    167e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1680:	9e a5       	ldd	r25, Y+46	; 0x2e
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <main+0x1fa>
    1686:	9e a7       	std	Y+46, r25	; 0x2e
    1688:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(200);

		if (key >= 0 && key <= 9){
    168a:	8e 85       	ldd	r24, Y+14	; 0x0e
    168c:	8a 30       	cpi	r24, 0x0A	; 10
    168e:	08 f0       	brcs	.+2      	; 0x1692 <main+0x20a>
    1690:	43 c0       	rjmp	.+134    	; 0x1718 <main+0x290>
			LCD_intgerToString(key);
    1692:	8e 85       	ldd	r24, Y+14	; 0x0e
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_intgerToString>

			if (num){
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	a8 85       	ldd	r26, Y+8	; 0x08
    16a2:	b9 85       	ldd	r27, Y+9	; 0x09
    16a4:	89 2b       	or	r24, r25
    16a6:	8a 2b       	or	r24, r26
    16a8:	8b 2b       	or	r24, r27
    16aa:	61 f1       	breq	.+88     	; 0x1704 <main+0x27c>
                num *= 10; /* Shift the current number to the left by one decimal place */
    16ac:	2e 81       	ldd	r18, Y+6	; 0x06
    16ae:	3f 81       	ldd	r19, Y+7	; 0x07
    16b0:	48 85       	ldd	r20, Y+8	; 0x08
    16b2:	59 85       	ldd	r21, Y+9	; 0x09
    16b4:	da 01       	movw	r26, r20
    16b6:	c9 01       	movw	r24, r18
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	aa 1f       	adc	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	82 0f       	add	r24, r18
    16ca:	93 1f       	adc	r25, r19
    16cc:	a4 1f       	adc	r26, r20
    16ce:	b5 1f       	adc	r27, r21
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	aa 1f       	adc	r26, r26
    16d6:	bb 1f       	adc	r27, r27
    16d8:	8e 83       	std	Y+6, r24	; 0x06
    16da:	9f 83       	std	Y+7, r25	; 0x07
    16dc:	a8 87       	std	Y+8, r26	; 0x08
    16de:	b9 87       	std	Y+9, r27	; 0x09
                num += key; /* Add the pressed key */
    16e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	2e 81       	ldd	r18, Y+6	; 0x06
    16ec:	3f 81       	ldd	r19, Y+7	; 0x07
    16ee:	48 85       	ldd	r20, Y+8	; 0x08
    16f0:	59 85       	ldd	r21, Y+9	; 0x09
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	a4 1f       	adc	r26, r20
    16f8:	b5 1f       	adc	r27, r21
    16fa:	8e 83       	std	Y+6, r24	; 0x06
    16fc:	9f 83       	std	Y+7, r25	; 0x07
    16fe:	a8 87       	std	Y+8, r26	; 0x08
    1700:	b9 87       	std	Y+9, r27	; 0x09
    1702:	4e cf       	rjmp	.-356    	; 0x15a0 <main+0x118>
			}
			else {
                num = key; /* Set the current number to the pressed key */
    1704:	8e 85       	ldd	r24, Y+14	; 0x0e
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a0 e0       	ldi	r26, 0x00	; 0
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	8e 83       	std	Y+6, r24	; 0x06
    1710:	9f 83       	std	Y+7, r25	; 0x07
    1712:	a8 87       	std	Y+8, r26	; 0x08
    1714:	b9 87       	std	Y+9, r27	; 0x09
    1716:	44 cf       	rjmp	.-376    	; 0x15a0 <main+0x118>
			}

		}

		else if (num && (key == '*' || key == '%' || key == '-' || key == '+')){
    1718:	8e 81       	ldd	r24, Y+6	; 0x06
    171a:	9f 81       	ldd	r25, Y+7	; 0x07
    171c:	a8 85       	ldd	r26, Y+8	; 0x08
    171e:	b9 85       	ldd	r27, Y+9	; 0x09
    1720:	89 2b       	or	r24, r25
    1722:	8a 2b       	or	r24, r26
    1724:	8b 2b       	or	r24, r27
    1726:	09 f4       	brne	.+2      	; 0x172a <main+0x2a2>
    1728:	40 c0       	rjmp	.+128    	; 0x17aa <main+0x322>
    172a:	8e 85       	ldd	r24, Y+14	; 0x0e
    172c:	8a 32       	cpi	r24, 0x2A	; 42
    172e:	49 f0       	breq	.+18     	; 0x1742 <main+0x2ba>
    1730:	8e 85       	ldd	r24, Y+14	; 0x0e
    1732:	85 32       	cpi	r24, 0x25	; 37
    1734:	31 f0       	breq	.+12     	; 0x1742 <main+0x2ba>
    1736:	8e 85       	ldd	r24, Y+14	; 0x0e
    1738:	8d 32       	cpi	r24, 0x2D	; 45
    173a:	19 f0       	breq	.+6      	; 0x1742 <main+0x2ba>
    173c:	8e 85       	ldd	r24, Y+14	; 0x0e
    173e:	8b 32       	cpi	r24, 0x2B	; 43
    1740:	a1 f5       	brne	.+104    	; 0x17aa <main+0x322>
			if (first){
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	ac 81       	ldd	r26, Y+4	; 0x04
    1748:	bd 81       	ldd	r27, Y+5	; 0x05
    174a:	89 2b       	or	r24, r25
    174c:	8a 2b       	or	r24, r26
    174e:	8b 2b       	or	r24, r27
    1750:	d1 f0       	breq	.+52     	; 0x1786 <main+0x2fe>
                first = doOperation(first, num, operation); /* Perform the operation with the current number and the previous result */
    1752:	2e 81       	ldd	r18, Y+6	; 0x06
    1754:	3f 81       	ldd	r19, Y+7	; 0x07
    1756:	48 85       	ldd	r20, Y+8	; 0x08
    1758:	59 85       	ldd	r21, Y+9	; 0x09
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	ac 81       	ldd	r26, Y+4	; 0x04
    1760:	bd 81       	ldd	r27, Y+5	; 0x05
    1762:	09 81       	ldd	r16, Y+1	; 0x01
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 cd 09 	call	0x139a	; 0x139a <doOperation>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8a 83       	std	Y+2, r24	; 0x02
    1772:	9b 83       	std	Y+3, r25	; 0x03
    1774:	ac 83       	std	Y+4, r26	; 0x04
    1776:	bd 83       	std	Y+5, r27	; 0x05
                LCD_clearScreen(); /* Clear the LCD display */
    1778:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_clearScreen>
                LCD_intgerToString(first); /* Display the updated result on the LCD */
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_intgerToString>
    1784:	08 c0       	rjmp	.+16     	; 0x1796 <main+0x30e>
			}
            else
            {
                first = num; /* Set the first operand to the current number */
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	a8 85       	ldd	r26, Y+8	; 0x08
    178c:	b9 85       	ldd	r27, Y+9	; 0x09
    178e:	8a 83       	std	Y+2, r24	; 0x02
    1790:	9b 83       	std	Y+3, r25	; 0x03
    1792:	ac 83       	std	Y+4, r26	; 0x04
    1794:	bd 83       	std	Y+5, r27	; 0x05
            }
            num = 0; /* Reset the current number */
    1796:	1e 82       	std	Y+6, r1	; 0x06
    1798:	1f 82       	std	Y+7, r1	; 0x07
    179a:	18 86       	std	Y+8, r1	; 0x08
    179c:	19 86       	std	Y+9, r1	; 0x09
            operation = key; /* Set the operation to the pressed key */
    179e:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a0:	89 83       	std	Y+1, r24	; 0x01
            LCD_displayCharacter(key); /* Display the operation symbol on the LCD */
    17a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a4:	0e 94 36 07 	call	0xe6c	; 0xe6c <LCD_displayCharacter>
    17a8:	60 c0       	rjmp	.+192    	; 0x186a <main+0x3e2>
        }

		else if (key == '='){
    17aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ac:	8d 33       	cpi	r24, 0x3D	; 61
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <main+0x32a>
    17b0:	49 c0       	rjmp	.+146    	; 0x1844 <main+0x3bc>
			if (first && num){
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	9b 81       	ldd	r25, Y+3	; 0x03
    17b6:	ac 81       	ldd	r26, Y+4	; 0x04
    17b8:	bd 81       	ldd	r27, Y+5	; 0x05
    17ba:	89 2b       	or	r24, r25
    17bc:	8a 2b       	or	r24, r26
    17be:	8b 2b       	or	r24, r27
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <main+0x33c>
    17c2:	ee ce       	rjmp	.-548    	; 0x15a0 <main+0x118>
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	9f 81       	ldd	r25, Y+7	; 0x07
    17c8:	a8 85       	ldd	r26, Y+8	; 0x08
    17ca:	b9 85       	ldd	r27, Y+9	; 0x09
    17cc:	89 2b       	or	r24, r25
    17ce:	8a 2b       	or	r24, r26
    17d0:	8b 2b       	or	r24, r27
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <main+0x34e>
    17d4:	e5 ce       	rjmp	.-566    	; 0x15a0 <main+0x118>
				second = num;
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	a8 85       	ldd	r26, Y+8	; 0x08
    17dc:	b9 85       	ldd	r27, Y+9	; 0x09
    17de:	8a 87       	std	Y+10, r24	; 0x0a
    17e0:	9b 87       	std	Y+11, r25	; 0x0b
    17e2:	ac 87       	std	Y+12, r26	; 0x0c
    17e4:	bd 87       	std	Y+13, r27	; 0x0d
				num = 0;
    17e6:	1e 82       	std	Y+6, r1	; 0x06
    17e8:	1f 82       	std	Y+7, r1	; 0x07
    17ea:	18 86       	std	Y+8, r1	; 0x08
    17ec:	19 86       	std	Y+9, r1	; 0x09
				result = doOperation(first, second, operation);
    17ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    17f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    17f2:	4c 85       	ldd	r20, Y+12	; 0x0c
    17f4:	5d 85       	ldd	r21, Y+13	; 0x0d
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	9b 81       	ldd	r25, Y+3	; 0x03
    17fa:	ac 81       	ldd	r26, Y+4	; 0x04
    17fc:	bd 81       	ldd	r27, Y+5	; 0x05
    17fe:	09 81       	ldd	r16, Y+1	; 0x01
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 cd 09 	call	0x139a	; 0x139a <doOperation>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	8f 87       	std	Y+15, r24	; 0x0f
    180e:	98 8b       	std	Y+16, r25	; 0x10
    1810:	a9 8b       	std	Y+17, r26	; 0x11
    1812:	ba 8b       	std	Y+18, r27	; 0x12

				LCD_clearScreen(); /* Clear the LCD display */
    1814:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_clearScreen>

				LCD_intgerToString(result);
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
    181a:	98 89       	ldd	r25, Y+16	; 0x10
    181c:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_intgerToString>
				first = 0; /* Reset the first operand */
    1820:	1a 82       	std	Y+2, r1	; 0x02
    1822:	1b 82       	std	Y+3, r1	; 0x03
    1824:	1c 82       	std	Y+4, r1	; 0x04
    1826:	1d 82       	std	Y+5, r1	; 0x05
				second = 0; /* Reset the second operand */
    1828:	1a 86       	std	Y+10, r1	; 0x0a
    182a:	1b 86       	std	Y+11, r1	; 0x0b
    182c:	1c 86       	std	Y+12, r1	; 0x0c
    182e:	1d 86       	std	Y+13, r1	; 0x0d
				operation = 0; /* Reset the operation */
    1830:	19 82       	std	Y+1, r1	; 0x01
				num = result;
    1832:	8f 85       	ldd	r24, Y+15	; 0x0f
    1834:	98 89       	ldd	r25, Y+16	; 0x10
    1836:	a9 89       	ldd	r26, Y+17	; 0x11
    1838:	ba 89       	ldd	r27, Y+18	; 0x12
    183a:	8e 83       	std	Y+6, r24	; 0x06
    183c:	9f 83       	std	Y+7, r25	; 0x07
    183e:	a8 87       	std	Y+8, r26	; 0x08
    1840:	b9 87       	std	Y+9, r27	; 0x09
    1842:	ae ce       	rjmp	.-676    	; 0x15a0 <main+0x118>
			}
		}
        else if(key == 13)
    1844:	8e 85       	ldd	r24, Y+14	; 0x0e
    1846:	8d 30       	cpi	r24, 0x0D	; 13
    1848:	09 f0       	breq	.+2      	; 0x184c <main+0x3c4>
    184a:	aa ce       	rjmp	.-684    	; 0x15a0 <main+0x118>
        {
            LCD_clearScreen(); /* Clear the LCD display */
    184c:	0e 94 c2 09 	call	0x1384	; 0x1384 <LCD_clearScreen>
            first = 0; /* Reset the first operand */
    1850:	1a 82       	std	Y+2, r1	; 0x02
    1852:	1b 82       	std	Y+3, r1	; 0x03
    1854:	1c 82       	std	Y+4, r1	; 0x04
    1856:	1d 82       	std	Y+5, r1	; 0x05
            second = 0; /* Reset the second operand */
    1858:	1a 86       	std	Y+10, r1	; 0x0a
    185a:	1b 86       	std	Y+11, r1	; 0x0b
    185c:	1c 86       	std	Y+12, r1	; 0x0c
    185e:	1d 86       	std	Y+13, r1	; 0x0d
            operation = 0; /* Reset the operation */
    1860:	19 82       	std	Y+1, r1	; 0x01
            num = 0; /* Reset the current number */
    1862:	1e 82       	std	Y+6, r1	; 0x06
    1864:	1f 82       	std	Y+7, r1	; 0x07
    1866:	18 86       	std	Y+8, r1	; 0x08
    1868:	19 86       	std	Y+9, r1	; 0x09
	_delay_ms(100);          /* Wait for 100 ms*/


	while(1)
	{
		key = KEYPAD_getPressedKey();
    186a:	9a ce       	rjmp	.-716    	; 0x15a0 <main+0x118>

0000186c <__mulsi3>:
    186c:	db 01       	movw	r26, r22
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__muluhisi3>
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	a2 9f       	mul	r26, r18
    187c:	80 0d       	add	r24, r0
    187e:	91 1d       	adc	r25, r1
    1880:	a3 9f       	mul	r26, r19
    1882:	90 0d       	add	r25, r0
    1884:	b2 9f       	mul	r27, r18
    1886:	90 0d       	add	r25, r0
    1888:	11 24       	eor	r1, r1
    188a:	08 95       	ret

0000188c <__udivmodsi4>:
    188c:	a1 e2       	ldi	r26, 0x21	; 33
    188e:	1a 2e       	mov	r1, r26
    1890:	aa 1b       	sub	r26, r26
    1892:	bb 1b       	sub	r27, r27
    1894:	fd 01       	movw	r30, r26
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <__udivmodsi4_ep>

00001898 <__udivmodsi4_loop>:
    1898:	aa 1f       	adc	r26, r26
    189a:	bb 1f       	adc	r27, r27
    189c:	ee 1f       	adc	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	a2 17       	cp	r26, r18
    18a2:	b3 07       	cpc	r27, r19
    18a4:	e4 07       	cpc	r30, r20
    18a6:	f5 07       	cpc	r31, r21
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <__udivmodsi4_ep>
    18aa:	a2 1b       	sub	r26, r18
    18ac:	b3 0b       	sbc	r27, r19
    18ae:	e4 0b       	sbc	r30, r20
    18b0:	f5 0b       	sbc	r31, r21

000018b2 <__udivmodsi4_ep>:
    18b2:	66 1f       	adc	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	1a 94       	dec	r1
    18bc:	69 f7       	brne	.-38     	; 0x1898 <__udivmodsi4_loop>
    18be:	60 95       	com	r22
    18c0:	70 95       	com	r23
    18c2:	80 95       	com	r24
    18c4:	90 95       	com	r25
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	bd 01       	movw	r22, r26
    18cc:	cf 01       	movw	r24, r30
    18ce:	08 95       	ret

000018d0 <__tablejump2__>:
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	05 90       	lpm	r0, Z+
    18d6:	f4 91       	lpm	r31, Z
    18d8:	e0 2d       	mov	r30, r0
    18da:	09 94       	ijmp

000018dc <__muluhisi3>:
    18dc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__umulhisi3>
    18e0:	a5 9f       	mul	r26, r21
    18e2:	90 0d       	add	r25, r0
    18e4:	b4 9f       	mul	r27, r20
    18e6:	90 0d       	add	r25, r0
    18e8:	a4 9f       	mul	r26, r20
    18ea:	80 0d       	add	r24, r0
    18ec:	91 1d       	adc	r25, r1
    18ee:	11 24       	eor	r1, r1
    18f0:	08 95       	ret

000018f2 <__umulhisi3>:
    18f2:	a2 9f       	mul	r26, r18
    18f4:	b0 01       	movw	r22, r0
    18f6:	b3 9f       	mul	r27, r19
    18f8:	c0 01       	movw	r24, r0
    18fa:	a3 9f       	mul	r26, r19
    18fc:	70 0d       	add	r23, r0
    18fe:	81 1d       	adc	r24, r1
    1900:	11 24       	eor	r1, r1
    1902:	91 1d       	adc	r25, r1
    1904:	b2 9f       	mul	r27, r18
    1906:	70 0d       	add	r23, r0
    1908:	81 1d       	adc	r24, r1
    190a:	11 24       	eor	r1, r1
    190c:	91 1d       	adc	r25, r1
    190e:	08 95       	ret

00001910 <__cmpsf2>:
    1910:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_cmp>
    1914:	08 f4       	brcc	.+2      	; 0x1918 <__cmpsf2+0x8>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret

0000191a <__fixunssfsi>:
    191a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_splitA>
    191e:	88 f0       	brcs	.+34     	; 0x1942 <__fixunssfsi+0x28>
    1920:	9f 57       	subi	r25, 0x7F	; 127
    1922:	98 f0       	brcs	.+38     	; 0x194a <__fixunssfsi+0x30>
    1924:	b9 2f       	mov	r27, r25
    1926:	99 27       	eor	r25, r25
    1928:	b7 51       	subi	r27, 0x17	; 23
    192a:	b0 f0       	brcs	.+44     	; 0x1958 <__fixunssfsi+0x3e>
    192c:	e1 f0       	breq	.+56     	; 0x1966 <__fixunssfsi+0x4c>
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	1a f0       	brmi	.+6      	; 0x193e <__fixunssfsi+0x24>
    1938:	ba 95       	dec	r27
    193a:	c9 f7       	brne	.-14     	; 0x192e <__fixunssfsi+0x14>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <__fixunssfsi+0x4c>
    193e:	b1 30       	cpi	r27, 0x01	; 1
    1940:	91 f0       	breq	.+36     	; 0x1966 <__fixunssfsi+0x4c>
    1942:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_zero>
    1946:	b1 e0       	ldi	r27, 0x01	; 1
    1948:	08 95       	ret
    194a:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__fp_zero>
    194e:	67 2f       	mov	r22, r23
    1950:	78 2f       	mov	r23, r24
    1952:	88 27       	eor	r24, r24
    1954:	b8 5f       	subi	r27, 0xF8	; 248
    1956:	39 f0       	breq	.+14     	; 0x1966 <__fixunssfsi+0x4c>
    1958:	b9 3f       	cpi	r27, 0xF9	; 249
    195a:	cc f3       	brlt	.-14     	; 0x194e <__fixunssfsi+0x34>
    195c:	86 95       	lsr	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b3 95       	inc	r27
    1964:	d9 f7       	brne	.-10     	; 0x195c <__fixunssfsi+0x42>
    1966:	3e f4       	brtc	.+14     	; 0x1976 <__fixunssfsi+0x5c>
    1968:	90 95       	com	r25
    196a:	80 95       	com	r24
    196c:	70 95       	com	r23
    196e:	61 95       	neg	r22
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	8f 4f       	sbci	r24, 0xFF	; 255
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	08 95       	ret

00001978 <__fp_cmp>:
    1978:	99 0f       	add	r25, r25
    197a:	00 08       	sbc	r0, r0
    197c:	55 0f       	add	r21, r21
    197e:	aa 0b       	sbc	r26, r26
    1980:	e0 e8       	ldi	r30, 0x80	; 128
    1982:	fe ef       	ldi	r31, 0xFE	; 254
    1984:	16 16       	cp	r1, r22
    1986:	17 06       	cpc	r1, r23
    1988:	e8 07       	cpc	r30, r24
    198a:	f9 07       	cpc	r31, r25
    198c:	c0 f0       	brcs	.+48     	; 0x19be <__fp_cmp+0x46>
    198e:	12 16       	cp	r1, r18
    1990:	13 06       	cpc	r1, r19
    1992:	e4 07       	cpc	r30, r20
    1994:	f5 07       	cpc	r31, r21
    1996:	98 f0       	brcs	.+38     	; 0x19be <__fp_cmp+0x46>
    1998:	62 1b       	sub	r22, r18
    199a:	73 0b       	sbc	r23, r19
    199c:	84 0b       	sbc	r24, r20
    199e:	95 0b       	sbc	r25, r21
    19a0:	39 f4       	brne	.+14     	; 0x19b0 <__fp_cmp+0x38>
    19a2:	0a 26       	eor	r0, r26
    19a4:	61 f0       	breq	.+24     	; 0x19be <__fp_cmp+0x46>
    19a6:	23 2b       	or	r18, r19
    19a8:	24 2b       	or	r18, r20
    19aa:	25 2b       	or	r18, r21
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <__fp_cmp+0x3e>
    19ae:	08 95       	ret
    19b0:	0a 26       	eor	r0, r26
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__fp_cmp+0x3e>
    19b4:	a1 40       	sbci	r26, 0x01	; 1
    19b6:	a6 95       	lsr	r26
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	81 1d       	adc	r24, r1
    19bc:	81 1d       	adc	r24, r1
    19be:	08 95       	ret

000019c0 <__fp_split3>:
    19c0:	57 fd       	sbrc	r21, 7
    19c2:	90 58       	subi	r25, 0x80	; 128
    19c4:	44 0f       	add	r20, r20
    19c6:	55 1f       	adc	r21, r21
    19c8:	59 f0       	breq	.+22     	; 0x19e0 <__fp_splitA+0x10>
    19ca:	5f 3f       	cpi	r21, 0xFF	; 255
    19cc:	71 f0       	breq	.+28     	; 0x19ea <__fp_splitA+0x1a>
    19ce:	47 95       	ror	r20

000019d0 <__fp_splitA>:
    19d0:	88 0f       	add	r24, r24
    19d2:	97 fb       	bst	r25, 7
    19d4:	99 1f       	adc	r25, r25
    19d6:	61 f0       	breq	.+24     	; 0x19f0 <__fp_splitA+0x20>
    19d8:	9f 3f       	cpi	r25, 0xFF	; 255
    19da:	79 f0       	breq	.+30     	; 0x19fa <__fp_splitA+0x2a>
    19dc:	87 95       	ror	r24
    19de:	08 95       	ret
    19e0:	12 16       	cp	r1, r18
    19e2:	13 06       	cpc	r1, r19
    19e4:	14 06       	cpc	r1, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	f2 cf       	rjmp	.-28     	; 0x19ce <__fp_split3+0xe>
    19ea:	46 95       	lsr	r20
    19ec:	f1 df       	rcall	.-30     	; 0x19d0 <__fp_splitA>
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <__fp_splitA+0x30>
    19f0:	16 16       	cp	r1, r22
    19f2:	17 06       	cpc	r1, r23
    19f4:	18 06       	cpc	r1, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	f1 cf       	rjmp	.-30     	; 0x19dc <__fp_splitA+0xc>
    19fa:	86 95       	lsr	r24
    19fc:	71 05       	cpc	r23, r1
    19fe:	61 05       	cpc	r22, r1
    1a00:	08 94       	sec
    1a02:	08 95       	ret

00001a04 <__fp_zero>:
    1a04:	e8 94       	clt

00001a06 <__fp_szero>:
    1a06:	bb 27       	eor	r27, r27
    1a08:	66 27       	eor	r22, r22
    1a0a:	77 27       	eor	r23, r23
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	97 f9       	bld	r25, 7
    1a10:	08 95       	ret

00001a12 <__gesf2>:
    1a12:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_cmp>
    1a16:	08 f4       	brcc	.+2      	; 0x1a1a <__gesf2+0x8>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__mulsf3>:
    1a1c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__mulsf3x>
    1a20:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__fp_round>
    1a24:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__fp_pscA>
    1a28:	38 f0       	brcs	.+14     	; 0x1a38 <__mulsf3+0x1c>
    1a2a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fp_pscB>
    1a2e:	20 f0       	brcs	.+8      	; 0x1a38 <__mulsf3+0x1c>
    1a30:	95 23       	and	r25, r21
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <__mulsf3+0x1c>
    1a34:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_inf>
    1a38:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_nan>
    1a3c:	11 24       	eor	r1, r1
    1a3e:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>

00001a42 <__mulsf3x>:
    1a42:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__fp_split3>
    1a46:	70 f3       	brcs	.-36     	; 0x1a24 <__mulsf3+0x8>

00001a48 <__mulsf3_pse>:
    1a48:	95 9f       	mul	r25, r21
    1a4a:	c1 f3       	breq	.-16     	; 0x1a3c <__mulsf3+0x20>
    1a4c:	95 0f       	add	r25, r21
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	55 1f       	adc	r21, r21
    1a52:	62 9f       	mul	r22, r18
    1a54:	f0 01       	movw	r30, r0
    1a56:	72 9f       	mul	r23, r18
    1a58:	bb 27       	eor	r27, r27
    1a5a:	f0 0d       	add	r31, r0
    1a5c:	b1 1d       	adc	r27, r1
    1a5e:	63 9f       	mul	r22, r19
    1a60:	aa 27       	eor	r26, r26
    1a62:	f0 0d       	add	r31, r0
    1a64:	b1 1d       	adc	r27, r1
    1a66:	aa 1f       	adc	r26, r26
    1a68:	64 9f       	mul	r22, r20
    1a6a:	66 27       	eor	r22, r22
    1a6c:	b0 0d       	add	r27, r0
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	66 1f       	adc	r22, r22
    1a72:	82 9f       	mul	r24, r18
    1a74:	22 27       	eor	r18, r18
    1a76:	b0 0d       	add	r27, r0
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	62 1f       	adc	r22, r18
    1a7c:	73 9f       	mul	r23, r19
    1a7e:	b0 0d       	add	r27, r0
    1a80:	a1 1d       	adc	r26, r1
    1a82:	62 1f       	adc	r22, r18
    1a84:	83 9f       	mul	r24, r19
    1a86:	a0 0d       	add	r26, r0
    1a88:	61 1d       	adc	r22, r1
    1a8a:	22 1f       	adc	r18, r18
    1a8c:	74 9f       	mul	r23, r20
    1a8e:	33 27       	eor	r19, r19
    1a90:	a0 0d       	add	r26, r0
    1a92:	61 1d       	adc	r22, r1
    1a94:	23 1f       	adc	r18, r19
    1a96:	84 9f       	mul	r24, r20
    1a98:	60 0d       	add	r22, r0
    1a9a:	21 1d       	adc	r18, r1
    1a9c:	82 2f       	mov	r24, r18
    1a9e:	76 2f       	mov	r23, r22
    1aa0:	6a 2f       	mov	r22, r26
    1aa2:	11 24       	eor	r1, r1
    1aa4:	9f 57       	subi	r25, 0x7F	; 127
    1aa6:	50 40       	sbci	r21, 0x00	; 0
    1aa8:	9a f0       	brmi	.+38     	; 0x1ad0 <__mulsf3_pse+0x88>
    1aaa:	f1 f0       	breq	.+60     	; 0x1ae8 <__mulsf3_pse+0xa0>
    1aac:	88 23       	and	r24, r24
    1aae:	4a f0       	brmi	.+18     	; 0x1ac2 <__mulsf3_pse+0x7a>
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	bb 1f       	adc	r27, r27
    1ab6:	66 1f       	adc	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	91 50       	subi	r25, 0x01	; 1
    1abe:	50 40       	sbci	r21, 0x00	; 0
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__mulsf3_pse+0x64>
    1ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac4:	51 05       	cpc	r21, r1
    1ac6:	80 f0       	brcs	.+32     	; 0x1ae8 <__mulsf3_pse+0xa0>
    1ac8:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__fp_inf>
    1acc:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_szero>
    1ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad2:	e4 f3       	brlt	.-8      	; 0x1acc <__mulsf3_pse+0x84>
    1ad4:	98 3e       	cpi	r25, 0xE8	; 232
    1ad6:	d4 f3       	brlt	.-12     	; 0x1acc <__mulsf3_pse+0x84>
    1ad8:	86 95       	lsr	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b7 95       	ror	r27
    1ae0:	f7 95       	ror	r31
    1ae2:	e7 95       	ror	r30
    1ae4:	9f 5f       	subi	r25, 0xFF	; 255
    1ae6:	c1 f7       	brne	.-16     	; 0x1ad8 <__mulsf3_pse+0x90>
    1ae8:	fe 2b       	or	r31, r30
    1aea:	88 0f       	add	r24, r24
    1aec:	91 1d       	adc	r25, r1
    1aee:	96 95       	lsr	r25
    1af0:	87 95       	ror	r24
    1af2:	97 f9       	bld	r25, 7
    1af4:	08 95       	ret

00001af6 <__fp_inf>:
    1af6:	97 f9       	bld	r25, 7
    1af8:	9f 67       	ori	r25, 0x7F	; 127
    1afa:	80 e8       	ldi	r24, 0x80	; 128
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	08 95       	ret

00001b02 <__fp_nan>:
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	80 ec       	ldi	r24, 0xC0	; 192
    1b06:	08 95       	ret

00001b08 <__fp_pscA>:
    1b08:	00 24       	eor	r0, r0
    1b0a:	0a 94       	dec	r0
    1b0c:	16 16       	cp	r1, r22
    1b0e:	17 06       	cpc	r1, r23
    1b10:	18 06       	cpc	r1, r24
    1b12:	09 06       	cpc	r0, r25
    1b14:	08 95       	ret

00001b16 <__fp_pscB>:
    1b16:	00 24       	eor	r0, r0
    1b18:	0a 94       	dec	r0
    1b1a:	12 16       	cp	r1, r18
    1b1c:	13 06       	cpc	r1, r19
    1b1e:	14 06       	cpc	r1, r20
    1b20:	05 06       	cpc	r0, r21
    1b22:	08 95       	ret

00001b24 <__fp_round>:
    1b24:	09 2e       	mov	r0, r25
    1b26:	03 94       	inc	r0
    1b28:	00 0c       	add	r0, r0
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <__fp_round+0xc>
    1b2c:	88 23       	and	r24, r24
    1b2e:	52 f0       	brmi	.+20     	; 0x1b44 <__fp_round+0x20>
    1b30:	bb 0f       	add	r27, r27
    1b32:	40 f4       	brcc	.+16     	; 0x1b44 <__fp_round+0x20>
    1b34:	bf 2b       	or	r27, r31
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <__fp_round+0x18>
    1b38:	60 ff       	sbrs	r22, 0
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <__fp_round+0x20>
    1b3c:	6f 5f       	subi	r22, 0xFF	; 255
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	08 95       	ret

00001b46 <itoa>:
    1b46:	45 32       	cpi	r20, 0x25	; 37
    1b48:	51 05       	cpc	r21, r1
    1b4a:	20 f4       	brcc	.+8      	; 0x1b54 <itoa+0xe>
    1b4c:	42 30       	cpi	r20, 0x02	; 2
    1b4e:	10 f0       	brcs	.+4      	; 0x1b54 <itoa+0xe>
    1b50:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__itoa_ncheck>
    1b54:	fb 01       	movw	r30, r22
    1b56:	10 82       	st	Z, r1
    1b58:	cb 01       	movw	r24, r22
    1b5a:	08 95       	ret

00001b5c <__itoa_ncheck>:
    1b5c:	bb 27       	eor	r27, r27
    1b5e:	4a 30       	cpi	r20, 0x0A	; 10
    1b60:	31 f4       	brne	.+12     	; 0x1b6e <__itoa_ncheck+0x12>
    1b62:	99 23       	and	r25, r25
    1b64:	22 f4       	brpl	.+8      	; 0x1b6e <__itoa_ncheck+0x12>
    1b66:	bd e2       	ldi	r27, 0x2D	; 45
    1b68:	90 95       	com	r25
    1b6a:	81 95       	neg	r24
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__utoa_common>

00001b72 <__utoa_ncheck>:
    1b72:	bb 27       	eor	r27, r27

00001b74 <__utoa_common>:
    1b74:	fb 01       	movw	r30, r22
    1b76:	55 27       	eor	r21, r21
    1b78:	aa 27       	eor	r26, r26
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	aa 1f       	adc	r26, r26
    1b80:	a4 17       	cp	r26, r20
    1b82:	10 f0       	brcs	.+4      	; 0x1b88 <__utoa_common+0x14>
    1b84:	a4 1b       	sub	r26, r20
    1b86:	83 95       	inc	r24
    1b88:	50 51       	subi	r21, 0x10	; 16
    1b8a:	b9 f7       	brne	.-18     	; 0x1b7a <__utoa_common+0x6>
    1b8c:	a0 5d       	subi	r26, 0xD0	; 208
    1b8e:	aa 33       	cpi	r26, 0x3A	; 58
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <__utoa_common+0x20>
    1b92:	a9 5d       	subi	r26, 0xD9	; 217
    1b94:	a1 93       	st	Z+, r26
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	79 f7       	brne	.-34     	; 0x1b78 <__utoa_common+0x4>
    1b9a:	b1 11       	cpse	r27, r1
    1b9c:	b1 93       	st	Z+, r27
    1b9e:	11 92       	st	Z+, r1
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <strrev>

00001ba6 <strrev>:
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	fc 01       	movw	r30, r24
    1baa:	67 2f       	mov	r22, r23
    1bac:	71 91       	ld	r23, Z+
    1bae:	77 23       	and	r23, r23
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <strrev+0x4>
    1bb2:	32 97       	sbiw	r30, 0x02	; 2
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <strrev+0x18>
    1bb6:	7c 91       	ld	r23, X
    1bb8:	6d 93       	st	X+, r22
    1bba:	70 83       	st	Z, r23
    1bbc:	62 91       	ld	r22, -Z
    1bbe:	ae 17       	cp	r26, r30
    1bc0:	bf 07       	cpc	r27, r31
    1bc2:	c8 f3       	brcs	.-14     	; 0x1bb6 <strrev+0x10>
    1bc4:	08 95       	ret

00001bc6 <_exit>:
    1bc6:	f8 94       	cli

00001bc8 <__stop_program>:
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <__stop_program>
