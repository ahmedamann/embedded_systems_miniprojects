
miniproject4_eclipseWS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000180a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000180a  0000189e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080008a  0080008a  000018c8  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003154  00000000  00000000  000041b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007338  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000785a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00007d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 09 	call	0x12fe	; 0x12fe <main>
      8a:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setupPinDirection>:
 * Parameters:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - direction: Desired direction of the pin (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_setupPinDirection+0x6>
      98:	1f 92       	push	r1
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT) {
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	88 30       	cpi	r24, 0x08	; 8
      a8:	08 f0       	brcs	.+2      	; 0xac <GPIO_setupPinDirection+0x1a>
      aa:	52 c0       	rjmp	.+164    	; 0x150 <GPIO_setupPinDirection+0xbe>
        if (direction == PIN_OUTPUT) {
      ac:	8b 81       	ldd	r24, Y+3	; 0x03
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	31 f5       	brne	.+76     	; 0xfe <GPIO_setupPinDirection+0x6c>
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
      b2:	89 81       	ldd	r24, Y+1	; 0x01
      b4:	88 2f       	mov	r24, r24
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	88 0f       	add	r24, r24
      ba:	99 1f       	adc	r25, r25
      bc:	80 5a       	subi	r24, 0xA0	; 160
      be:	9f 4f       	sbci	r25, 0xFF	; 255
      c0:	fc 01       	movw	r30, r24
      c2:	80 81       	ld	r24, Z
      c4:	91 81       	ldd	r25, Z+1	; 0x01
      c6:	fc 01       	movw	r30, r24
      c8:	80 81       	ld	r24, Z
      ca:	48 2f       	mov	r20, r24
      cc:	8a 81       	ldd	r24, Y+2	; 0x02
      ce:	28 2f       	mov	r18, r24
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_setupPinDirection+0x4a>
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	2a 95       	dec	r18
      de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_setupPinDirection+0x46>
      e0:	24 2f       	mov	r18, r20
      e2:	28 2b       	or	r18, r24
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	88 2f       	mov	r24, r24
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	88 0f       	add	r24, r24
      ec:	99 1f       	adc	r25, r25
      ee:	80 5a       	subi	r24, 0xA0	; 160
      f0:	9f 4f       	sbci	r25, 0xFF	; 255
      f2:	fc 01       	movw	r30, r24
      f4:	80 81       	ld	r24, Z
      f6:	91 81       	ldd	r25, Z+1	; 0x01
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
        } else if (direction == PIN_INPUT) {
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
        }
    }
}
      fc:	29 c0       	rjmp	.+82     	; 0x150 <GPIO_setupPinDirection+0xbe>
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    if (pin_num < NUM_OF_PINS_PER_PORT) {
        if (direction == PIN_OUTPUT) {
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
        } else if (direction == PIN_INPUT) {
      fe:	8b 81       	ldd	r24, Y+3	; 0x03
     100:	88 23       	and	r24, r24
     102:	31 f5       	brne	.+76     	; 0x150 <GPIO_setupPinDirection+0xbe>
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	88 2f       	mov	r24, r24
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	80 5a       	subi	r24, 0xA0	; 160
     110:	9f 4f       	sbci	r25, 0xFF	; 255
     112:	fc 01       	movw	r30, r24
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	fc 01       	movw	r30, r24
     11a:	80 81       	ld	r24, Z
     11c:	48 2f       	mov	r20, r24
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	28 2f       	mov	r18, r24
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	02 c0       	rjmp	.+4      	; 0x12e <GPIO_setupPinDirection+0x9c>
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	2a 95       	dec	r18
     130:	e2 f7       	brpl	.-8      	; 0x12a <GPIO_setupPinDirection+0x98>
     132:	80 95       	com	r24
     134:	24 2f       	mov	r18, r20
     136:	28 23       	and	r18, r24
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	80 5a       	subi	r24, 0xA0	; 160
     144:	9f 4f       	sbci	r25, 0xFF	; 255
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	91 81       	ldd	r25, Z+1	; 0x01
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
        }
    }
}
     150:	00 00       	nop
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <GPIO_setupPinDirectionR>:
 * - last_pin_num: Last pin number in the range (0 to NUM_OF_PINS_PER_PORT-1).
 * - port_num: Port number where the pins are located.
 * - direction: Desired direction of the pins (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	00 d0       	rcall	.+0      	; 0x164 <GPIO_setupPinDirectionR+0x6>
     164:	00 d0       	rcall	.+0      	; 0x166 <GPIO_setupPinDirectionR+0x8>
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	8a 83       	std	Y+2, r24	; 0x02
     16e:	6b 83       	std	Y+3, r22	; 0x03
     170:	4c 83       	std	Y+4, r20	; 0x04
     172:	2d 83       	std	Y+5, r18	; 0x05
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	38 f5       	brcc	.+78     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	88 30       	cpi	r24, 0x08	; 8
     17e:	20 f5       	brcc	.+72     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
     180:	8c 81       	ldd	r24, Y+4	; 0x04
     182:	84 30       	cpi	r24, 0x04	; 4
     184:	08 f5       	brcc	.+66     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
        if (last_pin_num > first_pin_num) {
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	89 17       	cp	r24, r25
     18c:	e8 f4       	brcc	.+58     	; 0x1c8 <GPIO_setupPinDirectionR+0x6a>
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     18e:	19 82       	std	Y+1, r1	; 0x01
     190:	0b c0       	rjmp	.+22     	; 0x1a8 <GPIO_setupPinDirectionR+0x4a>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	89 0f       	add	r24, r25
     198:	4d 81       	ldd	r20, Y+5	; 0x05
     19a:	68 2f       	mov	r22, r24
     19c:	8c 81       	ldd	r24, Y+4	; 0x04
     19e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
        if (last_pin_num > first_pin_num) {
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	89 83       	std	Y+1, r24	; 0x01
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	28 2f       	mov	r18, r24
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	48 2f       	mov	r20, r24
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	88 2f       	mov	r24, r24
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	ba 01       	movw	r22, r20
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	cb 01       	movw	r24, r22
     1c2:	82 17       	cp	r24, r18
     1c4:	93 07       	cpc	r25, r19
     1c6:	2c f7       	brge	.-54     	; 0x192 <GPIO_setupPinDirectionR+0x34>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
            }
        }
    }
}
     1c8:	00 00       	nop
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <GPIO_writePin>:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - value: Logic level to be written (LOGIC_HIGH or LOGIC_LOW).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <GPIO_writePin+0x6>
     1e0:	1f 92       	push	r1
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	89 83       	std	Y+1, r24	; 0x01
     1e8:	6a 83       	std	Y+2, r22	; 0x02
     1ea:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     1ec:	8a 81       	ldd	r24, Y+2	; 0x02
     1ee:	88 30       	cpi	r24, 0x08	; 8
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <GPIO_writePin+0x1a>
     1f2:	56 c0       	rjmp	.+172    	; 0x2a0 <GPIO_writePin+0xc6>
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	84 30       	cpi	r24, 0x04	; 4
     1f8:	08 f0       	brcs	.+2      	; 0x1fc <GPIO_writePin+0x22>
     1fa:	52 c0       	rjmp	.+164    	; 0x2a0 <GPIO_writePin+0xc6>
        if (value == LOGIC_HIGH) {
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	31 f5       	brne	.+76     	; 0x24e <GPIO_writePin+0x74>
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	88 59       	subi	r24, 0x98	; 152
     20e:	9f 4f       	sbci	r25, 0xFF	; 255
     210:	fc 01       	movw	r30, r24
     212:	80 81       	ld	r24, Z
     214:	91 81       	ldd	r25, Z+1	; 0x01
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	48 2f       	mov	r20, r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <GPIO_writePin+0x52>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	2a 95       	dec	r18
     22e:	e2 f7       	brpl	.-8      	; 0x228 <GPIO_writePin+0x4e>
     230:	24 2f       	mov	r18, r20
     232:	28 2b       	or	r18, r24
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	88 2f       	mov	r24, r24
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	88 59       	subi	r24, 0x98	; 152
     240:	9f 4f       	sbci	r25, 0xFF	; 255
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
        } else if (value == LOGIC_LOW) {
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
        }
    }
}
     24c:	29 c0       	rjmp	.+82     	; 0x2a0 <GPIO_writePin+0xc6>
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
        if (value == LOGIC_HIGH) {
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
        } else if (value == LOGIC_LOW) {
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	88 23       	and	r24, r24
     252:	31 f5       	brne	.+76     	; 0x2a0 <GPIO_writePin+0xc6>
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	88 59       	subi	r24, 0x98	; 152
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	fc 01       	movw	r30, r24
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	48 2f       	mov	r20, r24
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	28 2f       	mov	r18, r24
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	02 c0       	rjmp	.+4      	; 0x27e <GPIO_writePin+0xa4>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	2a 95       	dec	r18
     280:	e2 f7       	brpl	.-8      	; 0x27a <GPIO_writePin+0xa0>
     282:	80 95       	com	r24
     284:	24 2f       	mov	r18, r20
     286:	28 23       	and	r18, r24
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	88 59       	subi	r24, 0x98	; 152
     294:	9f 4f       	sbci	r25, 0xFF	; 255
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18
        }
    }
}
     2a0:	00 00       	nop
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <GPIO_readPin>:
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * Returns:
 * - Logic level of the pin (LOGIC_HIGH or LOGIC_LOW).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <GPIO_readPin+0x6>
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
     2be:	19 82       	std	Y+1, r1	; 0x01

    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	88 30       	cpi	r24, 0x08	; 8
     2c4:	f8 f4       	brcc	.+62     	; 0x304 <GPIO_readPin+0x56>
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	84 30       	cpi	r24, 0x04	; 4
     2ca:	e0 f4       	brcc	.+56     	; 0x304 <GPIO_readPin+0x56>
        if (READ_REG[port_num]->byte & (1 << pin_num)) {
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	80 59       	subi	r24, 0x90	; 144
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	91 81       	ldd	r25, Z+1	; 0x01
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 81       	ld	r24, Z
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	22 2f       	mov	r18, r18
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_readPin+0x46>
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_readPin+0x42>
     2f8:	81 70       	andi	r24, 0x01	; 1
     2fa:	99 27       	eor	r25, r25
     2fc:	89 2b       	or	r24, r25
     2fe:	11 f0       	breq	.+4      	; 0x304 <GPIO_readPin+0x56>
            pin_value = LOGIC_HIGH; // Pin is logic high
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return pin_value;
     304:	89 81       	ldd	r24, Y+1	; 0x01
}
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <GPIO_setupPortDirection>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - direction: Desired direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <GPIO_setupPortDirection+0x6>
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	84 30       	cpi	r24, 0x04	; 4
     324:	68 f4       	brcc	.+26     	; 0x340 <GPIO_setupPortDirection+0x2e>
        DIRECTION_REG[port_num]->byte = direction; // Set port direction
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	80 5a       	subi	r24, 0xA0	; 160
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
    }
}
     340:	00 00       	nop
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <GPIO_writePort>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - value: Value to be written to the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <GPIO_writePort+0x6>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	68 f4       	brcc	.+26     	; 0x37a <GPIO_writePort+0x2e>
        WRITE_REG[port_num]->byte = value; // Write value to port
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 59       	subi	r24, 0x98	; 152
     36c:	9f 4f       	sbci	r25, 0xFF	; 255
     36e:	fc 01       	movw	r30, r24
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	2a 81       	ldd	r18, Y+2	; 0x02
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
    }
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <GPIO_readPort>:
 * - port_num: Port number to read from.
 * Returns:
 * - Value read from the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	00 d0       	rcall	.+0      	; 0x38c <GPIO_readPort+0x6>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
     392:	19 82       	std	Y+1, r1	; 0x01

    if (port_num < NUM_OF_PORTS) {
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	84 30       	cpi	r24, 0x04	; 4
     398:	68 f4       	brcc	.+26     	; 0x3b4 <GPIO_readPort+0x2e>
        value = READ_REG[port_num]->byte; // Read value from port
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	80 59       	subi	r24, 0x90	; 144
     3a6:	9f 4f       	sbci	r25, 0xFF	; 255
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	fc 01       	movw	r30, r24
     3b0:	80 81       	ld	r24, Z
     3b2:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <__vector_6>:
 * Description:
 * Interrupt service routine for TIMER1 capture event.
 * Calls the callback function if it is not NULL.
 */
ISR (TIMER1_CAPT_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
    if(g_callBackPtr != NULL_PTR)
     3ea:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     3ee:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     3f2:	89 2b       	or	r24, r25
     3f4:	31 f0       	breq	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
    {
        (*g_callBackPtr)();
     3f6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     3fa:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     3fe:	fc 01       	movw	r30, r24
     400:	09 95       	icall
    }
}
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <ICU_init>:
 *
 * Parameters:
 * - Config_Ptr: Pointer to the configuration structure containing clock and edge settings.
 */
void ICU_init(const ICU_ConfigType *Config_Ptr)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <ICU_init+0x6>
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(DDRD, PD6);
     438:	81 e3       	ldi	r24, 0x31	; 49
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	40 81       	ld	r20, Z
     440:	81 e3       	ldi	r24, 0x31	; 49
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	4f 7b       	andi	r20, 0xBF	; 191
     446:	fc 01       	movw	r30, r24
     448:	40 83       	st	Z, r20
    TCNT1 = 0;
     44a:	8c e4       	ldi	r24, 0x4C	; 76
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	11 82       	std	Z+1, r1	; 0x01
     452:	10 82       	st	Z, r1
    ICR1 = 0;
     454:	86 e4       	ldi	r24, 0x46	; 70
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	fc 01       	movw	r30, r24
     45a:	11 82       	std	Z+1, r1	; 0x01
     45c:	10 82       	st	Z, r1
    TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     45e:	8f e4       	ldi	r24, 0x4F	; 79
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	4c e0       	ldi	r20, 0x0C	; 12
     464:	fc 01       	movw	r30, r24
     466:	40 83       	st	Z, r20
    TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     468:	8e e4       	ldi	r24, 0x4E	; 78
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	fc 01       	movw	r30, r24
     46e:	80 81       	ld	r24, Z
     470:	48 2f       	mov	r20, r24
     472:	48 7f       	andi	r20, 0xF8	; 248
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	48 2b       	or	r20, r24
     47e:	8e e4       	ldi	r24, 0x4E	; 78
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	40 83       	st	Z, r20
    TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge) << ICES1);
     486:	8e e4       	ldi	r24, 0x4E	; 78
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	48 2f       	mov	r20, r24
     490:	4f 7b       	andi	r20, 0xBF	; 191
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	fc 01       	movw	r30, r24
     498:	81 81       	ldd	r24, Z+1	; 0x01
     49a:	88 2f       	mov	r24, r24
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	38 2f       	mov	r19, r24
     4a0:	36 95       	lsr	r19
     4a2:	36 95       	lsr	r19
     4a4:	28 2f       	mov	r18, r24
     4a6:	22 95       	swap	r18
     4a8:	22 0f       	add	r18, r18
     4aa:	22 0f       	add	r18, r18
     4ac:	20 7c       	andi	r18, 0xC0	; 192
     4ae:	82 2f       	mov	r24, r18
     4b0:	24 2f       	mov	r18, r20
     4b2:	28 2b       	or	r18, r24
     4b4:	8e e4       	ldi	r24, 0x4E	; 78
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
    SET_BIT(TIMSK, TICIE1);
     4bc:	89 e5       	ldi	r24, 0x59	; 89
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 81       	ld	r18, Z
     4c4:	89 e5       	ldi	r24, 0x59	; 89
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	20 62       	ori	r18, 0x20	; 32
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18
}
     4ce:	00 00       	nop
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <ICU_setEdgeDetection>:
 *
 * Parameters:
 * - a_edge_type: Edge type to set (FALLING_EDGE or RISING_EDGE).
 */
void ICU_setEdgeDetection(const ICU_EdgeType a_edge_type)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	1f 92       	push	r1
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B = (TCCR1B & 0xBF) | (a_edge_type << ICES1);
     4e6:	8e e4       	ldi	r24, 0x4E	; 78
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	80 81       	ld	r24, Z
     4ee:	48 2f       	mov	r20, r24
     4f0:	4f 7b       	andi	r20, 0xBF	; 191
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	38 2f       	mov	r19, r24
     4fa:	36 95       	lsr	r19
     4fc:	36 95       	lsr	r19
     4fe:	28 2f       	mov	r18, r24
     500:	22 95       	swap	r18
     502:	22 0f       	add	r18, r18
     504:	22 0f       	add	r18, r18
     506:	20 7c       	andi	r18, 0xC0	; 192
     508:	82 2f       	mov	r24, r18
     50a:	24 2f       	mov	r18, r20
     50c:	28 2b       	or	r18, r24
     50e:	8e e4       	ldi	r24, 0x4E	; 78
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
}
     516:	00 00       	nop
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <ICU_getTimerValue>:
 *
 * Returns:
 * - Current timer value.
 */
uint16 ICU_getTimerValue(void)
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
     528:	86 e4       	ldi	r24, 0x46	; 70
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <ICU_clearTimerValue>:
 * ICU_clearTimerValue
 * Description:
 * Clears the timer value captured by the ICU.
 */
void ICU_clearTimerValue(void)
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
     540:	8c e4       	ldi	r24, 0x4C	; 76
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	11 82       	std	Z+1, r1	; 0x01
     548:	10 82       	st	Z, r1
}
     54a:	00 00       	nop
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <ICU_setCallBack>:
 *
 * Parameters:
 * - a_ptr: Pointer to the callback function.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <ICU_setCallBack+0x6>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	9a 83       	std	Y+2, r25	; 0x02
     55e:	89 83       	std	Y+1, r24	; 0x01
    g_callBackPtr = a_ptr;
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
     568:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
}
     56c:	00 00       	nop
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <ICU_deinit>:
 * ICU_deinit
 * Description:
 * De-initializes the ICU, resetting it to its default state.
 */
void ICU_deinit(void)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
    TCCR1A = 0;
     580:	8f e4       	ldi	r24, 0x4F	; 79
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	10 82       	st	Z, r1
    TCCR1B = 0;
     588:	8e e4       	ldi	r24, 0x4E	; 78
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	10 82       	st	Z, r1
    TCNT1 = 0;
     590:	8c e4       	ldi	r24, 0x4C	; 76
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	11 82       	std	Z+1, r1	; 0x01
     598:	10 82       	st	Z, r1
    ICR1 = 0;
     59a:	86 e4       	ldi	r24, 0x46	; 70
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	11 82       	std	Z+1, r1	; 0x01
     5a2:	10 82       	st	Z, r1
    CLEAR_BIT(TIMSK, TICIE1);
     5a4:	89 e5       	ldi	r24, 0x59	; 89
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 81       	ld	r18, Z
     5ac:	89 e5       	ldi	r24, 0x59	; 89
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	2f 7d       	andi	r18, 0xDF	; 223
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
    g_callBackPtr = NULL_PTR;
     5b6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x1>
     5ba:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
}
     5be:	00 00       	nop
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	2e 97       	sbiw	r28, 0x0e	; 14
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b1 e4       	ldi	r27, 0x41	; 65
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	ab 83       	std	Y+3, r26	; 0x03
     5fc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	4a ef       	ldi	r20, 0xFA	; 250
     604:	54 e4       	ldi	r21, 0x44	; 68
     606:	69 81       	ldd	r22, Y+1	; 0x01
     608:	7a 81       	ldd	r23, Y+2	; 0x02
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	9c 81       	ldd	r25, Y+4	; 0x04
     60e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	8d 83       	std	Y+5, r24	; 0x05
     618:	9e 83       	std	Y+6, r25	; 0x06
     61a:	af 83       	std	Y+7, r26	; 0x07
     61c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e8       	ldi	r20, 0x80	; 128
     624:	5f e3       	ldi	r21, 0x3F	; 63
     626:	6d 81       	ldd	r22, Y+5	; 0x05
     628:	7e 81       	ldd	r23, Y+6	; 0x06
     62a:	8f 81       	ldd	r24, Y+7	; 0x07
     62c:	98 85       	ldd	r25, Y+8	; 0x08
     62e:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     632:	88 23       	and	r24, r24
     634:	2c f4       	brge	.+10     	; 0x640 <LCD_init+0x7a>
		__ticks = 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	9a 87       	std	Y+10, r25	; 0x0a
     63c:	89 87       	std	Y+9, r24	; 0x09
     63e:	3f c0       	rjmp	.+126    	; 0x6be <LCD_init+0xf8>
	else if (__tmp > 65535)
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	3f ef       	ldi	r19, 0xFF	; 255
     644:	4f e7       	ldi	r20, 0x7F	; 127
     646:	57 e4       	ldi	r21, 0x47	; 71
     648:	6d 81       	ldd	r22, Y+5	; 0x05
     64a:	7e 81       	ldd	r23, Y+6	; 0x06
     64c:	8f 81       	ldd	r24, Y+7	; 0x07
     64e:	98 85       	ldd	r25, Y+8	; 0x08
     650:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     654:	18 16       	cp	r1, r24
     656:	4c f5       	brge	.+82     	; 0x6aa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e2       	ldi	r20, 0x20	; 32
     65e:	51 e4       	ldi	r21, 0x41	; 65
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	bc 01       	movw	r22, r24
     672:	cd 01       	movw	r24, r26
     674:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	9a 87       	std	Y+10, r25	; 0x0a
     67e:	89 87       	std	Y+9, r24	; 0x09
     680:	0f c0       	rjmp	.+30     	; 0x6a0 <LCD_init+0xda>
     682:	88 ec       	ldi	r24, 0xC8	; 200
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	9c 87       	std	Y+12, r25	; 0x0c
     688:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     68a:	8b 85       	ldd	r24, Y+11	; 0x0b
     68c:	9c 85       	ldd	r25, Y+12	; 0x0c
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <LCD_init+0xc8>
     692:	9c 87       	std	Y+12, r25	; 0x0c
     694:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     696:	89 85       	ldd	r24, Y+9	; 0x09
     698:	9a 85       	ldd	r25, Y+10	; 0x0a
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	9a 87       	std	Y+10, r25	; 0x0a
     69e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a0:	89 85       	ldd	r24, Y+9	; 0x09
     6a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a4:	89 2b       	or	r24, r25
     6a6:	69 f7       	brne	.-38     	; 0x682 <LCD_init+0xbc>
     6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6aa:	6d 81       	ldd	r22, Y+5	; 0x05
     6ac:	7e 81       	ldd	r23, Y+6	; 0x06
     6ae:	8f 81       	ldd	r24, Y+7	; 0x07
     6b0:	98 85       	ldd	r25, Y+8	; 0x08
     6b2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9a 87       	std	Y+10, r25	; 0x0a
     6bc:	89 87       	std	Y+9, r24	; 0x09
     6be:	89 85       	ldd	r24, Y+9	; 0x09
     6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c2:	9e 87       	std	Y+14, r25	; 0x0e
     6c4:	8d 87       	std	Y+13, r24	; 0x0d
     6c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_init+0x104>
     6ce:	9e 87       	std	Y+14, r25	; 0x0e
     6d0:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */



	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     6d2:	6f ef       	ldi	r22, 0xFF	; 255
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 89 01 	call	0x312	; 0x312 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     6da:	88 e3       	ldi	r24, 0x38	; 56
     6dc:	0e 94 80 03 	call	0x700	; 0x700 <LCD_sendCommand>



	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     6e0:	8c e0       	ldi	r24, 0x0C	; 12
     6e2:	0e 94 80 03 	call	0x700	; 0x700 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 80 03 	call	0x700	; 0x700 <LCD_sendCommand>
}
     6ec:	00 00       	nop
     6ee:	2e 96       	adiw	r28, 0x0e	; 14
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	e9 97       	sbiw	r28, 0x39	; 57
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	a0 e8       	ldi	r26, 0x80	; 128
     726:	bf e3       	ldi	r27, 0x3F	; 63
     728:	8b a7       	std	Y+43, r24	; 0x2b
     72a:	9c a7       	std	Y+44, r25	; 0x2c
     72c:	ad a7       	std	Y+45, r26	; 0x2d
     72e:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	4a ef       	ldi	r20, 0xFA	; 250
     736:	54 e4       	ldi	r21, 0x44	; 68
     738:	6b a5       	ldd	r22, Y+43	; 0x2b
     73a:	7c a5       	ldd	r23, Y+44	; 0x2c
     73c:	8d a5       	ldd	r24, Y+45	; 0x2d
     73e:	9e a5       	ldd	r25, Y+46	; 0x2e
     740:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	8f a7       	std	Y+47, r24	; 0x2f
     74a:	98 ab       	std	Y+48, r25	; 0x30
     74c:	a9 ab       	std	Y+49, r26	; 0x31
     74e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e8       	ldi	r20, 0x80	; 128
     756:	5f e3       	ldi	r21, 0x3F	; 63
     758:	6f a5       	ldd	r22, Y+47	; 0x2f
     75a:	78 a9       	ldd	r23, Y+48	; 0x30
     75c:	89 a9       	ldd	r24, Y+49	; 0x31
     75e:	9a a9       	ldd	r25, Y+50	; 0x32
     760:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     764:	88 23       	and	r24, r24
     766:	2c f4       	brge	.+10     	; 0x772 <LCD_sendCommand+0x72>
		__ticks = 1;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9c ab       	std	Y+52, r25	; 0x34
     76e:	8b ab       	std	Y+51, r24	; 0x33
     770:	3f c0       	rjmp	.+126    	; 0x7f0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	3f ef       	ldi	r19, 0xFF	; 255
     776:	4f e7       	ldi	r20, 0x7F	; 127
     778:	57 e4       	ldi	r21, 0x47	; 71
     77a:	6f a5       	ldd	r22, Y+47	; 0x2f
     77c:	78 a9       	ldd	r23, Y+48	; 0x30
     77e:	89 a9       	ldd	r24, Y+49	; 0x31
     780:	9a a9       	ldd	r25, Y+50	; 0x32
     782:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     786:	18 16       	cp	r1, r24
     788:	4c f5       	brge	.+82     	; 0x7dc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e2       	ldi	r20, 0x20	; 32
     790:	51 e4       	ldi	r21, 0x41	; 65
     792:	6b a5       	ldd	r22, Y+43	; 0x2b
     794:	7c a5       	ldd	r23, Y+44	; 0x2c
     796:	8d a5       	ldd	r24, Y+45	; 0x2d
     798:	9e a5       	ldd	r25, Y+46	; 0x2e
     79a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9c ab       	std	Y+52, r25	; 0x34
     7b0:	8b ab       	std	Y+51, r24	; 0x33
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <LCD_sendCommand+0xd2>
     7b4:	88 ec       	ldi	r24, 0xC8	; 200
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9e ab       	std	Y+54, r25	; 0x36
     7ba:	8d ab       	std	Y+53, r24	; 0x35
     7bc:	8d a9       	ldd	r24, Y+53	; 0x35
     7be:	9e a9       	ldd	r25, Y+54	; 0x36
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <LCD_sendCommand+0xc0>
     7c4:	9e ab       	std	Y+54, r25	; 0x36
     7c6:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c8:	8b a9       	ldd	r24, Y+51	; 0x33
     7ca:	9c a9       	ldd	r25, Y+52	; 0x34
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	9c ab       	std	Y+52, r25	; 0x34
     7d0:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d2:	8b a9       	ldd	r24, Y+51	; 0x33
     7d4:	9c a9       	ldd	r25, Y+52	; 0x34
     7d6:	89 2b       	or	r24, r25
     7d8:	69 f7       	brne	.-38     	; 0x7b4 <LCD_sendCommand+0xb4>
     7da:	14 c0       	rjmp	.+40     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7dc:	6f a5       	ldd	r22, Y+47	; 0x2f
     7de:	78 a9       	ldd	r23, Y+48	; 0x30
     7e0:	89 a9       	ldd	r24, Y+49	; 0x31
     7e2:	9a a9       	ldd	r25, Y+50	; 0x32
     7e4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	9c ab       	std	Y+52, r25	; 0x34
     7ee:	8b ab       	std	Y+51, r24	; 0x33
     7f0:	8b a9       	ldd	r24, Y+51	; 0x33
     7f2:	9c a9       	ldd	r25, Y+52	; 0x34
     7f4:	98 af       	std	Y+56, r25	; 0x38
     7f6:	8f ab       	std	Y+55, r24	; 0x37
     7f8:	8f a9       	ldd	r24, Y+55	; 0x37
     7fa:	98 ad       	ldd	r25, Y+56	; 0x38
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_sendCommand+0xfc>
     800:	98 af       	std	Y+56, r25	; 0x38
     802:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e8       	ldi	r26, 0x80	; 128
     814:	bf e3       	ldi	r27, 0x3F	; 63
     816:	8d 8f       	std	Y+29, r24	; 0x1d
     818:	9e 8f       	std	Y+30, r25	; 0x1e
     81a:	af 8f       	std	Y+31, r26	; 0x1f
     81c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	4a ef       	ldi	r20, 0xFA	; 250
     824:	54 e4       	ldi	r21, 0x44	; 68
     826:	6d 8d       	ldd	r22, Y+29	; 0x1d
     828:	7e 8d       	ldd	r23, Y+30	; 0x1e
     82a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     82c:	98 a1       	ldd	r25, Y+32	; 0x20
     82e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	89 a3       	std	Y+33, r24	; 0x21
     838:	9a a3       	std	Y+34, r25	; 0x22
     83a:	ab a3       	std	Y+35, r26	; 0x23
     83c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	69 a1       	ldd	r22, Y+33	; 0x21
     848:	7a a1       	ldd	r23, Y+34	; 0x22
     84a:	8b a1       	ldd	r24, Y+35	; 0x23
     84c:	9c a1       	ldd	r25, Y+36	; 0x24
     84e:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     852:	88 23       	and	r24, r24
     854:	2c f4       	brge	.+10     	; 0x860 <__stack+0x1>
		__ticks = 1;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	9e a3       	std	Y+38, r25	; 0x26
     85c:	8d a3       	std	Y+37, r24	; 0x25
     85e:	3f c0       	rjmp	.+126    	; 0x8de <__stack+0x7f>
	else if (__tmp > 65535)
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	3f ef       	ldi	r19, 0xFF	; 255
     864:	4f e7       	ldi	r20, 0x7F	; 127
     866:	57 e4       	ldi	r21, 0x47	; 71
     868:	69 a1       	ldd	r22, Y+33	; 0x21
     86a:	7a a1       	ldd	r23, Y+34	; 0x22
     86c:	8b a1       	ldd	r24, Y+35	; 0x23
     86e:	9c a1       	ldd	r25, Y+36	; 0x24
     870:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     874:	18 16       	cp	r1, r24
     876:	4c f5       	brge	.+82     	; 0x8ca <__stack+0x6b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e2       	ldi	r20, 0x20	; 32
     87e:	51 e4       	ldi	r21, 0x41	; 65
     880:	6d 8d       	ldd	r22, Y+29	; 0x1d
     882:	7e 8d       	ldd	r23, Y+30	; 0x1e
     884:	8f 8d       	ldd	r24, Y+31	; 0x1f
     886:	98 a1       	ldd	r25, Y+32	; 0x20
     888:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	9e a3       	std	Y+38, r25	; 0x26
     89e:	8d a3       	std	Y+37, r24	; 0x25
     8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <__stack+0x61>
     8a2:	88 ec       	ldi	r24, 0xC8	; 200
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	98 a7       	std	Y+40, r25	; 0x28
     8a8:	8f a3       	std	Y+39, r24	; 0x27
     8aa:	8f a1       	ldd	r24, Y+39	; 0x27
     8ac:	98 a5       	ldd	r25, Y+40	; 0x28
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <__stack+0x4f>
     8b2:	98 a7       	std	Y+40, r25	; 0x28
     8b4:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b6:	8d a1       	ldd	r24, Y+37	; 0x25
     8b8:	9e a1       	ldd	r25, Y+38	; 0x26
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	9e a3       	std	Y+38, r25	; 0x26
     8be:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c0:	8d a1       	ldd	r24, Y+37	; 0x25
     8c2:	9e a1       	ldd	r25, Y+38	; 0x26
     8c4:	89 2b       	or	r24, r25
     8c6:	69 f7       	brne	.-38     	; 0x8a2 <__stack+0x43>
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__stack+0x93>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ca:	69 a1       	ldd	r22, Y+33	; 0x21
     8cc:	7a a1       	ldd	r23, Y+34	; 0x22
     8ce:	8b a1       	ldd	r24, Y+35	; 0x23
     8d0:	9c a1       	ldd	r25, Y+36	; 0x24
     8d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	9e a3       	std	Y+38, r25	; 0x26
     8dc:	8d a3       	std	Y+37, r24	; 0x25
     8de:	8d a1       	ldd	r24, Y+37	; 0x25
     8e0:	9e a1       	ldd	r25, Y+38	; 0x26
     8e2:	9a a7       	std	Y+42, r25	; 0x2a
     8e4:	89 a7       	std	Y+41, r24	; 0x29
     8e6:	89 a5       	ldd	r24, Y+41	; 0x29
     8e8:	9a a5       	ldd	r25, Y+42	; 0x2a
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__stack+0x8b>
     8ee:	9a a7       	std	Y+42, r25	; 0x2a
     8f0:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     8f2:	69 ad       	ldd	r22, Y+57	; 0x39
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 a6 01 	call	0x34c	; 0x34c <GPIO_writePort>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	a0 e8       	ldi	r26, 0x80	; 128
     900:	bf e3       	ldi	r27, 0x3F	; 63
     902:	8f 87       	std	Y+15, r24	; 0x0f
     904:	98 8b       	std	Y+16, r25	; 0x10
     906:	a9 8b       	std	Y+17, r26	; 0x11
     908:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	4a ef       	ldi	r20, 0xFA	; 250
     910:	54 e4       	ldi	r21, 0x44	; 68
     912:	6f 85       	ldd	r22, Y+15	; 0x0f
     914:	78 89       	ldd	r23, Y+16	; 0x10
     916:	89 89       	ldd	r24, Y+17	; 0x11
     918:	9a 89       	ldd	r25, Y+18	; 0x12
     91a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	8b 8b       	std	Y+19, r24	; 0x13
     924:	9c 8b       	std	Y+20, r25	; 0x14
     926:	ad 8b       	std	Y+21, r26	; 0x15
     928:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e8       	ldi	r20, 0x80	; 128
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	6b 89       	ldd	r22, Y+19	; 0x13
     934:	7c 89       	ldd	r23, Y+20	; 0x14
     936:	8d 89       	ldd	r24, Y+21	; 0x15
     938:	9e 89       	ldd	r25, Y+22	; 0x16
     93a:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     93e:	88 23       	and	r24, r24
     940:	2c f4       	brge	.+10     	; 0x94c <__stack+0xed>
		__ticks = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	98 8f       	std	Y+24, r25	; 0x18
     948:	8f 8b       	std	Y+23, r24	; 0x17
     94a:	3f c0       	rjmp	.+126    	; 0x9ca <__stack+0x16b>
	else if (__tmp > 65535)
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	3f ef       	ldi	r19, 0xFF	; 255
     950:	4f e7       	ldi	r20, 0x7F	; 127
     952:	57 e4       	ldi	r21, 0x47	; 71
     954:	6b 89       	ldd	r22, Y+19	; 0x13
     956:	7c 89       	ldd	r23, Y+20	; 0x14
     958:	8d 89       	ldd	r24, Y+21	; 0x15
     95a:	9e 89       	ldd	r25, Y+22	; 0x16
     95c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     960:	18 16       	cp	r1, r24
     962:	4c f5       	brge	.+82     	; 0x9b6 <__stack+0x157>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e2       	ldi	r20, 0x20	; 32
     96a:	51 e4       	ldi	r21, 0x41	; 65
     96c:	6f 85       	ldd	r22, Y+15	; 0x0f
     96e:	78 89       	ldd	r23, Y+16	; 0x10
     970:	89 89       	ldd	r24, Y+17	; 0x11
     972:	9a 89       	ldd	r25, Y+18	; 0x12
     974:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	bc 01       	movw	r22, r24
     97e:	cd 01       	movw	r24, r26
     980:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	98 8f       	std	Y+24, r25	; 0x18
     98a:	8f 8b       	std	Y+23, r24	; 0x17
     98c:	0f c0       	rjmp	.+30     	; 0x9ac <__stack+0x14d>
     98e:	88 ec       	ldi	r24, 0xC8	; 200
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9a 8f       	std	Y+26, r25	; 0x1a
     994:	89 8f       	std	Y+25, r24	; 0x19
     996:	89 8d       	ldd	r24, Y+25	; 0x19
     998:	9a 8d       	ldd	r25, Y+26	; 0x1a
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <__stack+0x13b>
     99e:	9a 8f       	std	Y+26, r25	; 0x1a
     9a0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a2:	8f 89       	ldd	r24, Y+23	; 0x17
     9a4:	98 8d       	ldd	r25, Y+24	; 0x18
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	98 8f       	std	Y+24, r25	; 0x18
     9aa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ac:	8f 89       	ldd	r24, Y+23	; 0x17
     9ae:	98 8d       	ldd	r25, Y+24	; 0x18
     9b0:	89 2b       	or	r24, r25
     9b2:	69 f7       	brne	.-38     	; 0x98e <__stack+0x12f>
     9b4:	14 c0       	rjmp	.+40     	; 0x9de <__stack+0x17f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9b6:	6b 89       	ldd	r22, Y+19	; 0x13
     9b8:	7c 89       	ldd	r23, Y+20	; 0x14
     9ba:	8d 89       	ldd	r24, Y+21	; 0x15
     9bc:	9e 89       	ldd	r25, Y+22	; 0x16
     9be:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	98 8f       	std	Y+24, r25	; 0x18
     9c8:	8f 8b       	std	Y+23, r24	; 0x17
     9ca:	8f 89       	ldd	r24, Y+23	; 0x17
     9cc:	98 8d       	ldd	r25, Y+24	; 0x18
     9ce:	9c 8f       	std	Y+28, r25	; 0x1c
     9d0:	8b 8f       	std	Y+27, r24	; 0x1b
     9d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <__stack+0x177>
     9da:	9c 8f       	std	Y+28, r25	; 0x1c
     9dc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	a0 e8       	ldi	r26, 0x80	; 128
     9ee:	bf e3       	ldi	r27, 0x3F	; 63
     9f0:	89 83       	std	Y+1, r24	; 0x01
     9f2:	9a 83       	std	Y+2, r25	; 0x02
     9f4:	ab 83       	std	Y+3, r26	; 0x03
     9f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	4a ef       	ldi	r20, 0xFA	; 250
     9fe:	54 e4       	ldi	r21, 0x44	; 68
     a00:	69 81       	ldd	r22, Y+1	; 0x01
     a02:	7a 81       	ldd	r23, Y+2	; 0x02
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	8d 83       	std	Y+5, r24	; 0x05
     a12:	9e 83       	std	Y+6, r25	; 0x06
     a14:	af 83       	std	Y+7, r26	; 0x07
     a16:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e8       	ldi	r20, 0x80	; 128
     a1e:	5f e3       	ldi	r21, 0x3F	; 63
     a20:	6d 81       	ldd	r22, Y+5	; 0x05
     a22:	7e 81       	ldd	r23, Y+6	; 0x06
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     a2c:	88 23       	and	r24, r24
     a2e:	2c f4       	brge	.+10     	; 0xa3a <__stack+0x1db>
		__ticks = 1;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	9a 87       	std	Y+10, r25	; 0x0a
     a36:	89 87       	std	Y+9, r24	; 0x09
     a38:	3f c0       	rjmp	.+126    	; 0xab8 <__stack+0x259>
	else if (__tmp > 65535)
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
     a3e:	4f e7       	ldi	r20, 0x7F	; 127
     a40:	57 e4       	ldi	r21, 0x47	; 71
     a42:	6d 81       	ldd	r22, Y+5	; 0x05
     a44:	7e 81       	ldd	r23, Y+6	; 0x06
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	98 85       	ldd	r25, Y+8	; 0x08
     a4a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     a4e:	18 16       	cp	r1, r24
     a50:	4c f5       	brge	.+82     	; 0xaa4 <__stack+0x245>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e2       	ldi	r20, 0x20	; 32
     a58:	51 e4       	ldi	r21, 0x41	; 65
     a5a:	69 81       	ldd	r22, Y+1	; 0x01
     a5c:	7a 81       	ldd	r23, Y+2	; 0x02
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	9a 87       	std	Y+10, r25	; 0x0a
     a78:	89 87       	std	Y+9, r24	; 0x09
     a7a:	0f c0       	rjmp	.+30     	; 0xa9a <__stack+0x23b>
     a7c:	88 ec       	ldi	r24, 0xC8	; 200
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9c 87       	std	Y+12, r25	; 0x0c
     a82:	8b 87       	std	Y+11, r24	; 0x0b
     a84:	8b 85       	ldd	r24, Y+11	; 0x0b
     a86:	9c 85       	ldd	r25, Y+12	; 0x0c
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <__stack+0x229>
     a8c:	9c 87       	std	Y+12, r25	; 0x0c
     a8e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a90:	89 85       	ldd	r24, Y+9	; 0x09
     a92:	9a 85       	ldd	r25, Y+10	; 0x0a
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	9a 87       	std	Y+10, r25	; 0x0a
     a98:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a9a:	89 85       	ldd	r24, Y+9	; 0x09
     a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9e:	89 2b       	or	r24, r25
     aa0:	69 f7       	brne	.-38     	; 0xa7c <__stack+0x21d>
	_delay_ms(1); /* delay for processing Th = 13ns */

}
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <__stack+0x26d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa4:	6d 81       	ldd	r22, Y+5	; 0x05
     aa6:	7e 81       	ldd	r23, Y+6	; 0x06
     aa8:	8f 81       	ldd	r24, Y+7	; 0x07
     aaa:	98 85       	ldd	r25, Y+8	; 0x08
     aac:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	9a 87       	std	Y+10, r25	; 0x0a
     ab6:	89 87       	std	Y+9, r24	; 0x09
     ab8:	89 85       	ldd	r24, Y+9	; 0x09
     aba:	9a 85       	ldd	r25, Y+10	; 0x0a
     abc:	9e 87       	std	Y+14, r25	; 0x0e
     abe:	8d 87       	std	Y+13, r24	; 0x0d
     ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <__stack+0x265>
     ac8:	9e 87       	std	Y+14, r25	; 0x0e
     aca:	8d 87       	std	Y+13, r24	; 0x0d
     acc:	00 00       	nop
     ace:	e9 96       	adiw	r28, 0x39	; 57
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	e9 97       	sbiw	r28, 0x39	; 57
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e8       	ldi	r26, 0x80	; 128
     b06:	bf e3       	ldi	r27, 0x3F	; 63
     b08:	8b a7       	std	Y+43, r24	; 0x2b
     b0a:	9c a7       	std	Y+44, r25	; 0x2c
     b0c:	ad a7       	std	Y+45, r26	; 0x2d
     b0e:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	4a ef       	ldi	r20, 0xFA	; 250
     b16:	54 e4       	ldi	r21, 0x44	; 68
     b18:	6b a5       	ldd	r22, Y+43	; 0x2b
     b1a:	7c a5       	ldd	r23, Y+44	; 0x2c
     b1c:	8d a5       	ldd	r24, Y+45	; 0x2d
     b1e:	9e a5       	ldd	r25, Y+46	; 0x2e
     b20:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	8f a7       	std	Y+47, r24	; 0x2f
     b2a:	98 ab       	std	Y+48, r25	; 0x30
     b2c:	a9 ab       	std	Y+49, r26	; 0x31
     b2e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	6f a5       	ldd	r22, Y+47	; 0x2f
     b3a:	78 a9       	ldd	r23, Y+48	; 0x30
     b3c:	89 a9       	ldd	r24, Y+49	; 0x31
     b3e:	9a a9       	ldd	r25, Y+50	; 0x32
     b40:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     b44:	88 23       	and	r24, r24
     b46:	2c f4       	brge	.+10     	; 0xb52 <LCD_displayCharacter+0x72>
		__ticks = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	9c ab       	std	Y+52, r25	; 0x34
     b4e:	8b ab       	std	Y+51, r24	; 0x33
     b50:	3f c0       	rjmp	.+126    	; 0xbd0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	57 e4       	ldi	r21, 0x47	; 71
     b5a:	6f a5       	ldd	r22, Y+47	; 0x2f
     b5c:	78 a9       	ldd	r23, Y+48	; 0x30
     b5e:	89 a9       	ldd	r24, Y+49	; 0x31
     b60:	9a a9       	ldd	r25, Y+50	; 0x32
     b62:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	4c f5       	brge	.+82     	; 0xbbc <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e2       	ldi	r20, 0x20	; 32
     b70:	51 e4       	ldi	r21, 0x41	; 65
     b72:	6b a5       	ldd	r22, Y+43	; 0x2b
     b74:	7c a5       	ldd	r23, Y+44	; 0x2c
     b76:	8d a5       	ldd	r24, Y+45	; 0x2d
     b78:	9e a5       	ldd	r25, Y+46	; 0x2e
     b7a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	9c ab       	std	Y+52, r25	; 0x34
     b90:	8b ab       	std	Y+51, r24	; 0x33
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <LCD_displayCharacter+0xd2>
     b94:	88 ec       	ldi	r24, 0xC8	; 200
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	9e ab       	std	Y+54, r25	; 0x36
     b9a:	8d ab       	std	Y+53, r24	; 0x35
     b9c:	8d a9       	ldd	r24, Y+53	; 0x35
     b9e:	9e a9       	ldd	r25, Y+54	; 0x36
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <LCD_displayCharacter+0xc0>
     ba4:	9e ab       	std	Y+54, r25	; 0x36
     ba6:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba8:	8b a9       	ldd	r24, Y+51	; 0x33
     baa:	9c a9       	ldd	r25, Y+52	; 0x34
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	9c ab       	std	Y+52, r25	; 0x34
     bb0:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb2:	8b a9       	ldd	r24, Y+51	; 0x33
     bb4:	9c a9       	ldd	r25, Y+52	; 0x34
     bb6:	89 2b       	or	r24, r25
     bb8:	69 f7       	brne	.-38     	; 0xb94 <LCD_displayCharacter+0xb4>
     bba:	14 c0       	rjmp	.+40     	; 0xbe4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bbc:	6f a5       	ldd	r22, Y+47	; 0x2f
     bbe:	78 a9       	ldd	r23, Y+48	; 0x30
     bc0:	89 a9       	ldd	r24, Y+49	; 0x31
     bc2:	9a a9       	ldd	r25, Y+50	; 0x32
     bc4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	9c ab       	std	Y+52, r25	; 0x34
     bce:	8b ab       	std	Y+51, r24	; 0x33
     bd0:	8b a9       	ldd	r24, Y+51	; 0x33
     bd2:	9c a9       	ldd	r25, Y+52	; 0x34
     bd4:	98 af       	std	Y+56, r25	; 0x38
     bd6:	8f ab       	std	Y+55, r24	; 0x37
     bd8:	8f a9       	ldd	r24, Y+55	; 0x37
     bda:	98 ad       	ldd	r25, Y+56	; 0x38
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <LCD_displayCharacter+0xfc>
     be0:	98 af       	std	Y+56, r25	; 0x38
     be2:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	a0 e8       	ldi	r26, 0x80	; 128
     bf4:	bf e3       	ldi	r27, 0x3F	; 63
     bf6:	8d 8f       	std	Y+29, r24	; 0x1d
     bf8:	9e 8f       	std	Y+30, r25	; 0x1e
     bfa:	af 8f       	std	Y+31, r26	; 0x1f
     bfc:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	4a ef       	ldi	r20, 0xFA	; 250
     c04:	54 e4       	ldi	r21, 0x44	; 68
     c06:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c08:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c0c:	98 a1       	ldd	r25, Y+32	; 0x20
     c0e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	89 a3       	std	Y+33, r24	; 0x21
     c18:	9a a3       	std	Y+34, r25	; 0x22
     c1a:	ab a3       	std	Y+35, r26	; 0x23
     c1c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e8       	ldi	r20, 0x80	; 128
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	69 a1       	ldd	r22, Y+33	; 0x21
     c28:	7a a1       	ldd	r23, Y+34	; 0x22
     c2a:	8b a1       	ldd	r24, Y+35	; 0x23
     c2c:	9c a1       	ldd	r25, Y+36	; 0x24
     c2e:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     c32:	88 23       	and	r24, r24
     c34:	2c f4       	brge	.+10     	; 0xc40 <LCD_displayCharacter+0x160>
		__ticks = 1;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9e a3       	std	Y+38, r25	; 0x26
     c3c:	8d a3       	std	Y+37, r24	; 0x25
     c3e:	3f c0       	rjmp	.+126    	; 0xcbe <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	3f ef       	ldi	r19, 0xFF	; 255
     c44:	4f e7       	ldi	r20, 0x7F	; 127
     c46:	57 e4       	ldi	r21, 0x47	; 71
     c48:	69 a1       	ldd	r22, Y+33	; 0x21
     c4a:	7a a1       	ldd	r23, Y+34	; 0x22
     c4c:	8b a1       	ldd	r24, Y+35	; 0x23
     c4e:	9c a1       	ldd	r25, Y+36	; 0x24
     c50:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     c54:	18 16       	cp	r1, r24
     c56:	4c f5       	brge	.+82     	; 0xcaa <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e2       	ldi	r20, 0x20	; 32
     c5e:	51 e4       	ldi	r21, 0x41	; 65
     c60:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c62:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c64:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c66:	98 a1       	ldd	r25, Y+32	; 0x20
     c68:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	bc 01       	movw	r22, r24
     c72:	cd 01       	movw	r24, r26
     c74:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	9e a3       	std	Y+38, r25	; 0x26
     c7e:	8d a3       	std	Y+37, r24	; 0x25
     c80:	0f c0       	rjmp	.+30     	; 0xca0 <LCD_displayCharacter+0x1c0>
     c82:	88 ec       	ldi	r24, 0xC8	; 200
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	98 a7       	std	Y+40, r25	; 0x28
     c88:	8f a3       	std	Y+39, r24	; 0x27
     c8a:	8f a1       	ldd	r24, Y+39	; 0x27
     c8c:	98 a5       	ldd	r25, Y+40	; 0x28
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <LCD_displayCharacter+0x1ae>
     c92:	98 a7       	std	Y+40, r25	; 0x28
     c94:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c96:	8d a1       	ldd	r24, Y+37	; 0x25
     c98:	9e a1       	ldd	r25, Y+38	; 0x26
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	9e a3       	std	Y+38, r25	; 0x26
     c9e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca0:	8d a1       	ldd	r24, Y+37	; 0x25
     ca2:	9e a1       	ldd	r25, Y+38	; 0x26
     ca4:	89 2b       	or	r24, r25
     ca6:	69 f7       	brne	.-38     	; 0xc82 <LCD_displayCharacter+0x1a2>
     ca8:	14 c0       	rjmp	.+40     	; 0xcd2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     caa:	69 a1       	ldd	r22, Y+33	; 0x21
     cac:	7a a1       	ldd	r23, Y+34	; 0x22
     cae:	8b a1       	ldd	r24, Y+35	; 0x23
     cb0:	9c a1       	ldd	r25, Y+36	; 0x24
     cb2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	9e a3       	std	Y+38, r25	; 0x26
     cbc:	8d a3       	std	Y+37, r24	; 0x25
     cbe:	8d a1       	ldd	r24, Y+37	; 0x25
     cc0:	9e a1       	ldd	r25, Y+38	; 0x26
     cc2:	9a a7       	std	Y+42, r25	; 0x2a
     cc4:	89 a7       	std	Y+41, r24	; 0x29
     cc6:	89 a5       	ldd	r24, Y+41	; 0x29
     cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <LCD_displayCharacter+0x1ea>
     cce:	9a a7       	std	Y+42, r25	; 0x2a
     cd0:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
     cd2:	69 ad       	ldd	r22, Y+57	; 0x39
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 a6 01 	call	0x34c	; 0x34c <GPIO_writePort>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e8       	ldi	r26, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	8f 87       	std	Y+15, r24	; 0x0f
     ce4:	98 8b       	std	Y+16, r25	; 0x10
     ce6:	a9 8b       	std	Y+17, r26	; 0x11
     ce8:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a ef       	ldi	r20, 0xFA	; 250
     cf0:	54 e4       	ldi	r21, 0x44	; 68
     cf2:	6f 85       	ldd	r22, Y+15	; 0x0f
     cf4:	78 89       	ldd	r23, Y+16	; 0x10
     cf6:	89 89       	ldd	r24, Y+17	; 0x11
     cf8:	9a 89       	ldd	r25, Y+18	; 0x12
     cfa:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8b 8b       	std	Y+19, r24	; 0x13
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	ad 8b       	std	Y+21, r26	; 0x15
     d08:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	6b 89       	ldd	r22, Y+19	; 0x13
     d14:	7c 89       	ldd	r23, Y+20	; 0x14
     d16:	8d 89       	ldd	r24, Y+21	; 0x15
     d18:	9e 89       	ldd	r25, Y+22	; 0x16
     d1a:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <LCD_displayCharacter+0x24c>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	98 8f       	std	Y+24, r25	; 0x18
     d28:	8f 8b       	std	Y+23, r24	; 0x17
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	6b 89       	ldd	r22, Y+19	; 0x13
     d36:	7c 89       	ldd	r23, Y+20	; 0x14
     d38:	8d 89       	ldd	r24, Y+21	; 0x15
     d3a:	9e 89       	ldd	r25, Y+22	; 0x16
     d3c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d4e:	78 89       	ldd	r23, Y+16	; 0x10
     d50:	89 89       	ldd	r24, Y+17	; 0x11
     d52:	9a 89       	ldd	r25, Y+18	; 0x12
     d54:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	98 8f       	std	Y+24, r25	; 0x18
     d6a:	8f 8b       	std	Y+23, r24	; 0x17
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <LCD_displayCharacter+0x2ac>
     d6e:	88 ec       	ldi	r24, 0xC8	; 200
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9a 8f       	std	Y+26, r25	; 0x1a
     d74:	89 8f       	std	Y+25, r24	; 0x19
     d76:	89 8d       	ldd	r24, Y+25	; 0x19
     d78:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCD_displayCharacter+0x29a>
     d7e:	9a 8f       	std	Y+26, r25	; 0x1a
     d80:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	8f 89       	ldd	r24, Y+23	; 0x17
     d84:	98 8d       	ldd	r25, Y+24	; 0x18
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	98 8f       	std	Y+24, r25	; 0x18
     d8a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	8f 89       	ldd	r24, Y+23	; 0x17
     d8e:	98 8d       	ldd	r25, Y+24	; 0x18
     d90:	89 2b       	or	r24, r25
     d92:	69 f7       	brne	.-38     	; 0xd6e <LCD_displayCharacter+0x28e>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6b 89       	ldd	r22, Y+19	; 0x13
     d98:	7c 89       	ldd	r23, Y+20	; 0x14
     d9a:	8d 89       	ldd	r24, Y+21	; 0x15
     d9c:	9e 89       	ldd	r25, Y+22	; 0x16
     d9e:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	98 8f       	std	Y+24, r25	; 0x18
     da8:	8f 8b       	std	Y+23, r24	; 0x17
     daa:	8f 89       	ldd	r24, Y+23	; 0x17
     dac:	98 8d       	ldd	r25, Y+24	; 0x18
     dae:	9c 8f       	std	Y+28, r25	; 0x1c
     db0:	8b 8f       	std	Y+27, r24	; 0x1b
     db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <LCD_displayCharacter+0x2d6>
     dba:	9c 8f       	std	Y+28, r25	; 0x1c
     dbc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e8       	ldi	r26, 0x80	; 128
     dce:	bf e3       	ldi	r27, 0x3F	; 63
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	ab 83       	std	Y+3, r26	; 0x03
     dd6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a ef       	ldi	r20, 0xFA	; 250
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	69 81       	ldd	r22, Y+1	; 0x01
     de2:	7a 81       	ldd	r23, Y+2	; 0x02
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	af 83       	std	Y+7, r26	; 0x07
     df6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <LCD_displayCharacter+0x33a>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	89 87       	std	Y+9, r24	; 0x09
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	3f ef       	ldi	r19, 0xFF	; 255
     e1e:	4f e7       	ldi	r20, 0x7F	; 127
     e20:	57 e4       	ldi	r21, 0x47	; 71
     e22:	6d 81       	ldd	r22, Y+5	; 0x05
     e24:	7e 81       	ldd	r23, Y+6	; 0x06
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	98 85       	ldd	r25, Y+8	; 0x08
     e2a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e2       	ldi	r20, 0x20	; 32
     e38:	51 e4       	ldi	r21, 0x41	; 65
     e3a:	69 81       	ldd	r22, Y+1	; 0x01
     e3c:	7a 81       	ldd	r23, Y+2	; 0x02
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9a 87       	std	Y+10, r25	; 0x0a
     e58:	89 87       	std	Y+9, r24	; 0x09
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <LCD_displayCharacter+0x39a>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 87       	std	Y+12, r25	; 0x0c
     e62:	8b 87       	std	Y+11, r24	; 0x0b
     e64:	8b 85       	ldd	r24, Y+11	; 0x0b
     e66:	9c 85       	ldd	r25, Y+12	; 0x0c
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <LCD_displayCharacter+0x388>
     e6c:	9c 87       	std	Y+12, r25	; 0x0c
     e6e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9a 87       	std	Y+10, r25	; 0x0a
     e78:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	89 2b       	or	r24, r25
     e80:	69 f7       	brne	.-38     	; 0xe5c <LCD_displayCharacter+0x37c>
	_delay_ms(1); /* delay for processing Th = 13ns */

}
     e82:	14 c0       	rjmp	.+40     	; 0xeac <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6d 81       	ldd	r22, Y+5	; 0x05
     e86:	7e 81       	ldd	r23, Y+6	; 0x06
     e88:	8f 81       	ldd	r24, Y+7	; 0x07
     e8a:	98 85       	ldd	r25, Y+8	; 0x08
     e8c:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9a 87       	std	Y+10, r25	; 0x0a
     e96:	89 87       	std	Y+9, r24	; 0x09
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9c:	9e 87       	std	Y+14, r25	; 0x0e
     e9e:	8d 87       	std	Y+13, r24	; 0x0d
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCD_displayCharacter+0x3c4>
     ea8:	9e 87       	std	Y+14, r25	; 0x0e
     eaa:	8d 87       	std	Y+13, r24	; 0x0d
     eac:	00 00       	nop
     eae:	e9 96       	adiw	r28, 0x39	; 57
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <LCD_displayString+0x6>
     ec6:	1f 92       	push	r1
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ed0:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(Str[i]);
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2a 81       	ldd	r18, Y+2	; 0x02
     edc:	3b 81       	ldd	r19, Y+3	; 0x03
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	fc 01       	movw	r30, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	0e 94 70 05 	call	0xae0	; 0xae0 <LCD_displayCharacter>
		i++;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2a 81       	ldd	r18, Y+2	; 0x02
     ef8:	3b 81       	ldd	r19, Y+3	; 0x03
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	88 23       	and	r24, r24
     f04:	39 f7       	brne	.-50     	; 0xed4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
     f06:	00 00       	nop
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <LCD_moveCursor+0x6>
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	79 f0       	breq	.+30     	; 0xf4e <LCD_moveCursor+0x3a>
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	91 05       	cpc	r25, r1
     f34:	1c f4       	brge	.+6      	; 0xf3c <LCD_moveCursor+0x28>
     f36:	89 2b       	or	r24, r25
     f38:	39 f0       	breq	.+14     	; 0xf48 <LCD_moveCursor+0x34>
     f3a:	15 c0       	rjmp	.+42     	; 0xf66 <LCD_moveCursor+0x52>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	91 05       	cpc	r25, r1
     f40:	51 f0       	breq	.+20     	; 0xf56 <LCD_moveCursor+0x42>
     f42:	03 97       	sbiw	r24, 0x03	; 3
     f44:	61 f0       	breq	.+24     	; 0xf5e <LCD_moveCursor+0x4a>
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <LCD_moveCursor+0x52>
	{
		case 0:
			lcd_memory_address=col;
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	89 83       	std	Y+1, r24	; 0x01
				break;
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <LCD_moveCursor+0x52>
		case 1:
			lcd_memory_address=col+0x40;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
				break;
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <LCD_moveCursor+0x52>
		case 2:
			lcd_memory_address=col+0x10;
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	80 5f       	subi	r24, 0xF0	; 240
     f5a:	89 83       	std	Y+1, r24	; 0x01
				break;
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <LCD_moveCursor+0x52>
		case 3:
			lcd_memory_address=col+0x50;
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	80 5b       	subi	r24, 0xB0	; 176
     f62:	89 83       	std	Y+1, r24	; 0x01
				break;
     f64:	00 00       	nop
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	0e 94 80 03 	call	0x700	; 0x700 <LCD_sendCommand>
}
     f6e:	00 00       	nop
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <LCD_displayStringRowColumn+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <LCD_displayStringRowColumn+0x8>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	6a 83       	std	Y+2, r22	; 0x02
     f8c:	5c 83       	std	Y+4, r21	; 0x04
     f8e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     f90:	6a 81       	ldd	r22, Y+2	; 0x02
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	0e 94 8a 07 	call	0xf14	; 0xf14 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	0e 94 60 07 	call	0xec0	; 0xec0 <LCD_displayString>
}
     fa0:	00 00       	nop
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	62 97       	sbiw	r28, 0x12	; 18
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	9a 8b       	std	Y+18, r25	; 0x12
     fc6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     fc8:	89 89       	ldd	r24, Y+17	; 0x11
     fca:	9a 89       	ldd	r25, Y+18	; 0x12
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	9e 01       	movw	r18, r28
     fd2:	2f 5f       	subi	r18, 0xFF	; 255
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	b9 01       	movw	r22, r18
     fd8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <itoa>
   LCD_displayString(buff); /* Display the string */
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 60 07 	call	0xec0	; 0xec0 <LCD_displayString>
}
     fe4:	00 00       	nop
     fe6:	62 96       	adiw	r28, 0x12	; 18
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0e 94 80 03 	call	0x700	; 0x700 <LCD_sendCommand>
}
    1006:	00 00       	nop
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <Ultrasonic_init>:
 * Description:
 * Initializes the ultrasonic sensor module.
 * Configures ICU for distance measurement and sets up GPIO for trigger pin.
 */
void Ultrasonic_init(void)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 d0       	rcall	.+0      	; 0x1014 <Ultrasonic_init+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    ICU_ConfigType ICU_Configurations = {F_CPU_8, RISING_EDGE};
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&ICU_Configurations);
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	0e 94 15 02 	call	0x42a	; 0x42a <ICU_init>
    ICU_setCallBack(Ultrasonic_edgeProcessing);
    1028:	89 e5       	ldi	r24, 0x59	; 89
    102a:	99 e0       	ldi	r25, 0x09	; 9
    102c:	0e 94 a9 02 	call	0x552	; 0x552 <ICU_setCallBack>
    GPIO_setupPinDirection(TRIGGER_PORT_ID, TRIGGER_PIN_ID, PIN_OUTPUT);
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	65 e0       	ldi	r22, 0x05	; 5
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
}
    103a:	00 00       	nop
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <Ultrasonic_Trigger>:
 * Ultrasonic_Trigger
 * Description:
 * Sends a trigger pulse to the ultrasonic sensor.
 */
static void Ultrasonic_Trigger(void)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	a0 97       	sbiw	r28, 0x20	; 32
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_HIGH);
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	65 e0       	ldi	r22, 0x05	; 5
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e2       	ldi	r26, 0x20	; 32
    106a:	b1 e4       	ldi	r27, 0x41	; 65
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	ab 83       	std	Y+3, r26	; 0x03
    1072:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1074:	2b ea       	ldi	r18, 0xAB	; 171
    1076:	3a ea       	ldi	r19, 0xAA	; 170
    1078:	4a e2       	ldi	r20, 0x2A	; 42
    107a:	50 e4       	ldi	r21, 0x40	; 64
    107c:	69 81       	ldd	r22, Y+1	; 0x01
    107e:	7a 81       	ldd	r23, Y+2	; 0x02
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	af 83       	std	Y+7, r26	; 0x07
    1092:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	ab 81       	ldd	r26, Y+3	; 0x03
    109a:	bc 81       	ldd	r27, Y+4	; 0x04
    109c:	9c 01       	movw	r18, r24
    109e:	ad 01       	movw	r20, r26
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 ca 09 	call	0x1394	; 0x1394 <__addsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	89 87       	std	Y+9, r24	; 0x09
    10ae:	9a 87       	std	Y+10, r25	; 0x0a
    10b0:	ab 87       	std	Y+11, r26	; 0x0b
    10b2:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	6d 81       	ldd	r22, Y+5	; 0x05
    10be:	7e 81       	ldd	r23, Y+6	; 0x06
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	1c f4       	brge	.+6      	; 0x10d2 <Ultrasonic_Trigger+0x8c>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8d 87       	std	Y+13, r24	; 0x0d
    10d0:	b2 c0       	rjmp	.+356    	; 0x1236 <Ultrasonic_Trigger+0x1f0>
	else if (__tmp2 > 65535)
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	57 e4       	ldi	r21, 0x47	; 71
    10da:	69 85       	ldd	r22, Y+9	; 0x09
    10dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    10de:	8b 85       	ldd	r24, Y+11	; 0x0b
    10e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	0c f0       	brlt	.+2      	; 0x10ec <Ultrasonic_Trigger+0xa6>
    10ea:	7b c0       	rjmp	.+246    	; 0x11e2 <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a e7       	ldi	r20, 0x7A	; 122
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	69 81       	ldd	r22, Y+1	; 0x01
    10f6:	7a 81       	ldd	r23, Y+2	; 0x02
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__divsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8e 87       	std	Y+14, r24	; 0x0e
    1106:	9f 87       	std	Y+15, r25	; 0x0f
    1108:	a8 8b       	std	Y+16, r26	; 0x10
    110a:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a ef       	ldi	r20, 0xFA	; 250
    1112:	54 e4       	ldi	r21, 0x44	; 68
    1114:	6e 85       	ldd	r22, Y+14	; 0x0e
    1116:	7f 85       	ldd	r23, Y+15	; 0x0f
    1118:	88 89       	ldd	r24, Y+16	; 0x10
    111a:	99 89       	ldd	r25, Y+17	; 0x11
    111c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8a 8b       	std	Y+18, r24	; 0x12
    1126:	9b 8b       	std	Y+19, r25	; 0x13
    1128:	ac 8b       	std	Y+20, r26	; 0x14
    112a:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e8       	ldi	r20, 0x80	; 128
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	6a 89       	ldd	r22, Y+18	; 0x12
    1136:	7b 89       	ldd	r23, Y+19	; 0x13
    1138:	8c 89       	ldd	r24, Y+20	; 0x14
    113a:	9d 89       	ldd	r25, Y+21	; 0x15
    113c:	0e 94 36 0a 	call	0x146c	; 0x146c <__cmpsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <Ultrasonic_Trigger+0x108>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9f 8b       	std	Y+23, r25	; 0x17
    114a:	8e 8b       	std	Y+22, r24	; 0x16
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <Ultrasonic_Trigger+0x186>
	else if (__tmp > 65535)
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	6a 89       	ldd	r22, Y+18	; 0x12
    1158:	7b 89       	ldd	r23, Y+19	; 0x13
    115a:	8c 89       	ldd	r24, Y+20	; 0x14
    115c:	9d 89       	ldd	r25, Y+21	; 0x15
    115e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <Ultrasonic_Trigger+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e2       	ldi	r20, 0x20	; 32
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1170:	7f 85       	ldd	r23, Y+15	; 0x0f
    1172:	88 89       	ldd	r24, Y+16	; 0x10
    1174:	99 89       	ldd	r25, Y+17	; 0x11
    1176:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9f 8b       	std	Y+23, r25	; 0x17
    118c:	8e 8b       	std	Y+22, r24	; 0x16
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <Ultrasonic_Trigger+0x168>
    1190:	88 ec       	ldi	r24, 0xC8	; 200
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	99 8f       	std	Y+25, r25	; 0x19
    1196:	88 8f       	std	Y+24, r24	; 0x18
    1198:	88 8d       	ldd	r24, Y+24	; 0x18
    119a:	99 8d       	ldd	r25, Y+25	; 0x19
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <Ultrasonic_Trigger+0x156>
    11a0:	99 8f       	std	Y+25, r25	; 0x19
    11a2:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8e 89       	ldd	r24, Y+22	; 0x16
    11a6:	9f 89       	ldd	r25, Y+23	; 0x17
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9f 8b       	std	Y+23, r25	; 0x17
    11ac:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8e 89       	ldd	r24, Y+22	; 0x16
    11b0:	9f 89       	ldd	r25, Y+23	; 0x17
    11b2:	89 2b       	or	r24, r25
    11b4:	69 f7       	brne	.-38     	; 0x1190 <Ultrasonic_Trigger+0x14a>
    11b6:	3f c0       	rjmp	.+126    	; 0x1236 <Ultrasonic_Trigger+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6a 89       	ldd	r22, Y+18	; 0x12
    11ba:	7b 89       	ldd	r23, Y+19	; 0x13
    11bc:	8c 89       	ldd	r24, Y+20	; 0x14
    11be:	9d 89       	ldd	r25, Y+21	; 0x15
    11c0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9f 8b       	std	Y+23, r25	; 0x17
    11ca:	8e 8b       	std	Y+22, r24	; 0x16
    11cc:	8e 89       	ldd	r24, Y+22	; 0x16
    11ce:	9f 89       	ldd	r25, Y+23	; 0x17
    11d0:	9b 8f       	std	Y+27, r25	; 0x1b
    11d2:	8a 8f       	std	Y+26, r24	; 0x1a
    11d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <Ultrasonic_Trigger+0x192>
    11dc:	9b 8f       	std	Y+27, r25	; 0x1b
    11de:	8a 8f       	std	Y+26, r24	; 0x1a
    11e0:	2a c0       	rjmp	.+84     	; 0x1236 <Ultrasonic_Trigger+0x1f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	6d 81       	ldd	r22, Y+5	; 0x05
    11ec:	7e 81       	ldd	r23, Y+6	; 0x06
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__gesf2>
    11f6:	18 16       	cp	r1, r24
    11f8:	ac f4       	brge	.+42     	; 0x1224 <Ultrasonic_Trigger+0x1de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    11fa:	69 85       	ldd	r22, Y+9	; 0x09
    11fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    11fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1200:	9c 85       	ldd	r25, Y+12	; 0x0c
    1202:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9d 8f       	std	Y+29, r25	; 0x1d
    120c:	8c 8f       	std	Y+28, r24	; 0x1c
    120e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1210:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1212:	9f 8f       	std	Y+31, r25	; 0x1f
    1214:	8e 8f       	std	Y+30, r24	; 0x1e
    1216:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1218:	9f 8d       	ldd	r25, Y+31	; 0x1f
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <Ultrasonic_Trigger+0x1d4>
    121e:	9f 8f       	std	Y+31, r25	; 0x1f
    1220:	8e 8f       	std	Y+30, r24	; 0x1e
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <Ultrasonic_Trigger+0x1fc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1224:	6d 81       	ldd	r22, Y+5	; 0x05
    1226:	7e 81       	ldd	r23, Y+6	; 0x06
    1228:	8f 81       	ldd	r24, Y+7	; 0x07
    122a:	98 85       	ldd	r25, Y+8	; 0x08
    122c:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8d 87       	std	Y+13, r24	; 0x0d
    1236:	8d 85       	ldd	r24, Y+13	; 0x0d
    1238:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    123a:	88 a1       	ldd	r24, Y+32	; 0x20
    123c:	8a 95       	dec	r24
    123e:	f1 f7       	brne	.-4      	; 0x123c <Ultrasonic_Trigger+0x1f6>
    1240:	88 a3       	std	Y+32, r24	; 0x20
    _delay_us(10);
    GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_LOW);
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	65 e0       	ldi	r22, 0x05	; 5
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_writePin>
}
    124c:	00 00       	nop
    124e:	a0 96       	adiw	r28, 0x20	; 32
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <Ultrasonic_readDistance>:
 *
 * Returns:
 * - Distance in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Ultrasonic_readDistance+0x6>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    uint16 distance = 0;
    126a:	1a 82       	std	Y+2, r1	; 0x02
    126c:	19 82       	std	Y+1, r1	; 0x01
    Ultrasonic_Trigger();
    126e:	0e 94 23 08 	call	0x1046	; 0x1046 <Ultrasonic_Trigger>
    while (g_edgeCount != 2);
    1272:	00 00       	nop
    1274:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <g_edgeCount>
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	e1 f7       	brne	.-8      	; 0x1274 <Ultrasonic_readDistance+0x14>
    g_edgeCount = 0;
    127c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <g_edgeCount>
    distance = 1 + (timerValue / 58);
    1280:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <timerValue>
    1284:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <timerValue+0x1>
    1288:	9c 01       	movw	r18, r24
    128a:	af e9       	ldi	r26, 0x9F	; 159
    128c:	b6 e4       	ldi	r27, 0x46	; 70
    128e:	0e 94 ba 09 	call	0x1374	; 0x1374 <__umulhisi3>
    1292:	92 95       	swap	r25
    1294:	82 95       	swap	r24
    1296:	8f 70       	andi	r24, 0x0F	; 15
    1298:	89 27       	eor	r24, r25
    129a:	9f 70       	andi	r25, 0x0F	; 15
    129c:	89 27       	eor	r24, r25
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
    return distance;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <Ultrasonic_edgeProcessing>:
 * Ultrasonic_edgeProcessing
 * Description:
 * Handles edge interrupts from the ICU for ultrasonic sensor timing.
 */
void Ultrasonic_edgeProcessing(void)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    g_edgeCount++;
    12ba:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <g_edgeCount>
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <g_edgeCount>
    if (g_edgeCount == 1)
    12c4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <g_edgeCount>
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <Ultrasonic_edgeProcessing+0x26>
    {
        ICU_clearTimerValue();
    12cc:	0e 94 9c 02 	call	0x538	; 0x538 <ICU_clearTimerValue>
        ICU_setEdgeDetection(FALLING_EDGE);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 6d 02 	call	0x4da	; 0x4da <ICU_setEdgeDetection>
    {
        timerValue = ICU_getTimerValue();
        ICU_setEdgeDetection(RISING_EDGE);
        ICU_clearTimerValue();
    }
}
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <Ultrasonic_edgeProcessing+0x44>
    if (g_edgeCount == 1)
    {
        ICU_clearTimerValue();
        ICU_setEdgeDetection(FALLING_EDGE);
    }
    else if (g_edgeCount == 2)
    12d8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <g_edgeCount>
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	59 f4       	brne	.+22     	; 0x12f6 <Ultrasonic_edgeProcessing+0x44>
    {
        timerValue = ICU_getTimerValue();
    12e0:	0e 94 90 02 	call	0x520	; 0x520 <ICU_getTimerValue>
    12e4:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <timerValue+0x1>
    12e8:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <timerValue>
        ICU_setEdgeDetection(RISING_EDGE);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 6d 02 	call	0x4da	; 0x4da <ICU_setEdgeDetection>
        ICU_clearTimerValue();
    12f2:	0e 94 9c 02 	call	0x538	; 0x538 <ICU_clearTimerValue>
    }
}
    12f6:	00 00       	nop
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <main>:
#include "../HAL/ultrasonic.h"
#include "../LIB/avr_registers_types.h"
#include "../HAL/lcd.h"

int main(void)
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <main+0x6>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	uint16 distance = 0; /* Declaring a unsigned short variable to store distance */
    1308:	1a 82       	std	Y+2, r1	; 0x02
    130a:	19 82       	std	Y+1, r1	; 0x01

	SREG.bits.I_BIT = 1; /* Enabling Interrupts */
    130c:	8f e5       	ldi	r24, 0x5F	; 95
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	fc 01       	movw	r30, r24
    1312:	20 81       	ld	r18, Z
    1314:	20 68       	ori	r18, 0x80	; 128
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18


	LCD_init(); /* Initializing the LCD */
    131a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_init>
	Ultrasonic_init(); /* Initializing the ULTRASONIC sensor */
    131e:	0e 94 07 08 	call	0x100e	; 0x100e <Ultrasonic_init>

	LCD_displayString("Distance = ");  /* Displaying the initial messsage on LCD */
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 60 07 	call	0xec0	; 0xec0 <LCD_displayString>

	while(1)  /* Main Loop */
	{
		distance = Ultrasonic_readDistance(); /* Reading the distance from the ULTRASONIC into the distance variable */
    132a:	0e 94 30 09 	call	0x1260	; 0x1260 <Ultrasonic_readDistance>
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01

		if(distance > 100)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	85 36       	cpi	r24, 0x65	; 101
    1338:	91 05       	cpc	r25, r1
    133a:	48 f0       	brcs	.+18     	; 0x134e <main+0x50>
		{
			LCD_moveCursor(0,11);
    133c:	6b e0       	ldi	r22, 0x0B	; 11
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 8a 07 	call	0xf14	; 0xf14 <LCD_moveCursor>
			LCD_integerToString(distance);
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_integerToString>
    134c:	0c c0       	rjmp	.+24     	; 0x1366 <main+0x68>
		}
		else
		{
			LCD_moveCursor(0,11);
    134e:	6b e0       	ldi	r22, 0x0B	; 11
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 8a 07 	call	0xf14	; 0xf14 <LCD_moveCursor>
			LCD_integerToString(distance);
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_integerToString>
			LCD_displayString(" ");
    135e:	84 e8       	ldi	r24, 0x84	; 132
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 60 07 	call	0xec0	; 0xec0 <LCD_displayString>
		}
		LCD_displayStringRowColumn(0,14,"cm");   /* Displaying "cm" on LCD after the value */
    1366:	46 e8       	ldi	r20, 0x86	; 134
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	6e e0       	ldi	r22, 0x0E	; 14
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0e 94 be 07 	call	0xf7c	; 0xf7c <LCD_displayStringRowColumn>

	LCD_displayString("Distance = ");  /* Displaying the initial messsage on LCD */

	while(1)  /* Main Loop */
	{
		distance = Ultrasonic_readDistance(); /* Reading the distance from the ULTRASONIC into the distance variable */
    1372:	db cf       	rjmp	.-74     	; 0x132a <main+0x2c>

00001374 <__umulhisi3>:
    1374:	a2 9f       	mul	r26, r18
    1376:	b0 01       	movw	r22, r0
    1378:	b3 9f       	mul	r27, r19
    137a:	c0 01       	movw	r24, r0
    137c:	a3 9f       	mul	r26, r19
    137e:	70 0d       	add	r23, r0
    1380:	81 1d       	adc	r24, r1
    1382:	11 24       	eor	r1, r1
    1384:	91 1d       	adc	r25, r1
    1386:	b2 9f       	mul	r27, r18
    1388:	70 0d       	add	r23, r0
    138a:	81 1d       	adc	r24, r1
    138c:	11 24       	eor	r1, r1
    138e:	91 1d       	adc	r25, r1
    1390:	08 95       	ret

00001392 <__subsf3>:
    1392:	50 58       	subi	r21, 0x80	; 128

00001394 <__addsf3>:
    1394:	bb 27       	eor	r27, r27
    1396:	aa 27       	eor	r26, r26
    1398:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__addsf3x>
    139c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_round>
    13a0:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_pscA>
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__addsf3+0x20>
    13a6:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_pscB>
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__addsf3+0x20>
    13ac:	39 f4       	brne	.+14     	; 0x13bc <__addsf3+0x28>
    13ae:	9f 3f       	cpi	r25, 0xFF	; 255
    13b0:	19 f4       	brne	.+6      	; 0x13b8 <__addsf3+0x24>
    13b2:	26 f4       	brtc	.+8      	; 0x13bc <__addsf3+0x28>
    13b4:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_nan>
    13b8:	0e f4       	brtc	.+2      	; 0x13bc <__addsf3+0x28>
    13ba:	e0 95       	com	r30
    13bc:	e7 fb       	bst	r30, 7
    13be:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_inf>

000013c2 <__addsf3x>:
    13c2:	e9 2f       	mov	r30, r25
    13c4:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_split3>
    13c8:	58 f3       	brcs	.-42     	; 0x13a0 <__addsf3+0xc>
    13ca:	ba 17       	cp	r27, r26
    13cc:	62 07       	cpc	r22, r18
    13ce:	73 07       	cpc	r23, r19
    13d0:	84 07       	cpc	r24, r20
    13d2:	95 07       	cpc	r25, r21
    13d4:	20 f0       	brcs	.+8      	; 0x13de <__addsf3x+0x1c>
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <__addsf3x+0x34>
    13d8:	a6 f5       	brtc	.+104    	; 0x1442 <__addsf3x+0x80>
    13da:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__fp_zero>
    13de:	0e f4       	brtc	.+2      	; 0x13e2 <__addsf3x+0x20>
    13e0:	e0 95       	com	r30
    13e2:	0b 2e       	mov	r0, r27
    13e4:	ba 2f       	mov	r27, r26
    13e6:	a0 2d       	mov	r26, r0
    13e8:	0b 01       	movw	r0, r22
    13ea:	b9 01       	movw	r22, r18
    13ec:	90 01       	movw	r18, r0
    13ee:	0c 01       	movw	r0, r24
    13f0:	ca 01       	movw	r24, r20
    13f2:	a0 01       	movw	r20, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	ff 27       	eor	r31, r31
    13f8:	59 1b       	sub	r21, r25
    13fa:	99 f0       	breq	.+38     	; 0x1422 <__addsf3x+0x60>
    13fc:	59 3f       	cpi	r21, 0xF9	; 249
    13fe:	50 f4       	brcc	.+20     	; 0x1414 <__addsf3x+0x52>
    1400:	50 3e       	cpi	r21, 0xE0	; 224
    1402:	68 f1       	brcs	.+90     	; 0x145e <__addsf3x+0x9c>
    1404:	1a 16       	cp	r1, r26
    1406:	f0 40       	sbci	r31, 0x00	; 0
    1408:	a2 2f       	mov	r26, r18
    140a:	23 2f       	mov	r18, r19
    140c:	34 2f       	mov	r19, r20
    140e:	44 27       	eor	r20, r20
    1410:	58 5f       	subi	r21, 0xF8	; 248
    1412:	f3 cf       	rjmp	.-26     	; 0x13fa <__addsf3x+0x38>
    1414:	46 95       	lsr	r20
    1416:	37 95       	ror	r19
    1418:	27 95       	ror	r18
    141a:	a7 95       	ror	r26
    141c:	f0 40       	sbci	r31, 0x00	; 0
    141e:	53 95       	inc	r21
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__addsf3x+0x52>
    1422:	7e f4       	brtc	.+30     	; 0x1442 <__addsf3x+0x80>
    1424:	1f 16       	cp	r1, r31
    1426:	ba 0b       	sbc	r27, r26
    1428:	62 0b       	sbc	r22, r18
    142a:	73 0b       	sbc	r23, r19
    142c:	84 0b       	sbc	r24, r20
    142e:	ba f0       	brmi	.+46     	; 0x145e <__addsf3x+0x9c>
    1430:	91 50       	subi	r25, 0x01	; 1
    1432:	a1 f0       	breq	.+40     	; 0x145c <__addsf3x+0x9a>
    1434:	ff 0f       	add	r31, r31
    1436:	bb 1f       	adc	r27, r27
    1438:	66 1f       	adc	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	c2 f7       	brpl	.-16     	; 0x1430 <__addsf3x+0x6e>
    1440:	0e c0       	rjmp	.+28     	; 0x145e <__addsf3x+0x9c>
    1442:	ba 0f       	add	r27, r26
    1444:	62 1f       	adc	r22, r18
    1446:	73 1f       	adc	r23, r19
    1448:	84 1f       	adc	r24, r20
    144a:	48 f4       	brcc	.+18     	; 0x145e <__addsf3x+0x9c>
    144c:	87 95       	ror	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	b7 95       	ror	r27
    1454:	f7 95       	ror	r31
    1456:	9e 3f       	cpi	r25, 0xFE	; 254
    1458:	08 f0       	brcs	.+2      	; 0x145c <__addsf3x+0x9a>
    145a:	b0 cf       	rjmp	.-160    	; 0x13bc <__addsf3+0x28>
    145c:	93 95       	inc	r25
    145e:	88 0f       	add	r24, r24
    1460:	08 f0       	brcs	.+2      	; 0x1464 <__addsf3x+0xa2>
    1462:	99 27       	eor	r25, r25
    1464:	ee 0f       	add	r30, r30
    1466:	97 95       	ror	r25
    1468:	87 95       	ror	r24
    146a:	08 95       	ret

0000146c <__cmpsf2>:
    146c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_cmp>
    1470:	08 f4       	brcc	.+2      	; 0x1474 <__cmpsf2+0x8>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	08 95       	ret

00001476 <__divsf3>:
    1476:	0e 94 4f 0a 	call	0x149e	; 0x149e <__divsf3x>
    147a:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_round>
    147e:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_pscB>
    1482:	58 f0       	brcs	.+22     	; 0x149a <__divsf3+0x24>
    1484:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_pscA>
    1488:	40 f0       	brcs	.+16     	; 0x149a <__divsf3+0x24>
    148a:	29 f4       	brne	.+10     	; 0x1496 <__divsf3+0x20>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	29 f0       	breq	.+10     	; 0x149a <__divsf3+0x24>
    1490:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_inf>
    1494:	51 11       	cpse	r21, r1
    1496:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_szero>
    149a:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_nan>

0000149e <__divsf3x>:
    149e:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_split3>
    14a2:	68 f3       	brcs	.-38     	; 0x147e <__divsf3+0x8>

000014a4 <__divsf3_pse>:
    14a4:	99 23       	and	r25, r25
    14a6:	b1 f3       	breq	.-20     	; 0x1494 <__divsf3+0x1e>
    14a8:	55 23       	and	r21, r21
    14aa:	91 f3       	breq	.-28     	; 0x1490 <__divsf3+0x1a>
    14ac:	95 1b       	sub	r25, r21
    14ae:	55 0b       	sbc	r21, r21
    14b0:	bb 27       	eor	r27, r27
    14b2:	aa 27       	eor	r26, r26
    14b4:	62 17       	cp	r22, r18
    14b6:	73 07       	cpc	r23, r19
    14b8:	84 07       	cpc	r24, r20
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <__divsf3_pse+0x26>
    14bc:	9f 5f       	subi	r25, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	44 1f       	adc	r20, r20
    14c6:	aa 1f       	adc	r26, r26
    14c8:	a9 f3       	breq	.-22     	; 0x14b4 <__divsf3_pse+0x10>
    14ca:	35 d0       	rcall	.+106    	; 0x1536 <__divsf3_pse+0x92>
    14cc:	0e 2e       	mov	r0, r30
    14ce:	3a f0       	brmi	.+14     	; 0x14de <__divsf3_pse+0x3a>
    14d0:	e0 e8       	ldi	r30, 0x80	; 128
    14d2:	32 d0       	rcall	.+100    	; 0x1538 <__divsf3_pse+0x94>
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	e6 95       	lsr	r30
    14da:	00 1c       	adc	r0, r0
    14dc:	ca f7       	brpl	.-14     	; 0x14d0 <__divsf3_pse+0x2c>
    14de:	2b d0       	rcall	.+86     	; 0x1536 <__divsf3_pse+0x92>
    14e0:	fe 2f       	mov	r31, r30
    14e2:	29 d0       	rcall	.+82     	; 0x1536 <__divsf3_pse+0x92>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	bb 1f       	adc	r27, r27
    14ec:	26 17       	cp	r18, r22
    14ee:	37 07       	cpc	r19, r23
    14f0:	48 07       	cpc	r20, r24
    14f2:	ab 07       	cpc	r26, r27
    14f4:	b0 e8       	ldi	r27, 0x80	; 128
    14f6:	09 f0       	breq	.+2      	; 0x14fa <__divsf3_pse+0x56>
    14f8:	bb 0b       	sbc	r27, r27
    14fa:	80 2d       	mov	r24, r0
    14fc:	bf 01       	movw	r22, r30
    14fe:	ff 27       	eor	r31, r31
    1500:	93 58       	subi	r25, 0x83	; 131
    1502:	5f 4f       	sbci	r21, 0xFF	; 255
    1504:	3a f0       	brmi	.+14     	; 0x1514 <__divsf3_pse+0x70>
    1506:	9e 3f       	cpi	r25, 0xFE	; 254
    1508:	51 05       	cpc	r21, r1
    150a:	78 f0       	brcs	.+30     	; 0x152a <__divsf3_pse+0x86>
    150c:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_inf>
    1510:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_szero>
    1514:	5f 3f       	cpi	r21, 0xFF	; 255
    1516:	e4 f3       	brlt	.-8      	; 0x1510 <__divsf3_pse+0x6c>
    1518:	98 3e       	cpi	r25, 0xE8	; 232
    151a:	d4 f3       	brlt	.-12     	; 0x1510 <__divsf3_pse+0x6c>
    151c:	86 95       	lsr	r24
    151e:	77 95       	ror	r23
    1520:	67 95       	ror	r22
    1522:	b7 95       	ror	r27
    1524:	f7 95       	ror	r31
    1526:	9f 5f       	subi	r25, 0xFF	; 255
    1528:	c9 f7       	brne	.-14     	; 0x151c <__divsf3_pse+0x78>
    152a:	88 0f       	add	r24, r24
    152c:	91 1d       	adc	r25, r1
    152e:	96 95       	lsr	r25
    1530:	87 95       	ror	r24
    1532:	97 f9       	bld	r25, 7
    1534:	08 95       	ret
    1536:	e1 e0       	ldi	r30, 0x01	; 1
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	bb 1f       	adc	r27, r27
    1540:	62 17       	cp	r22, r18
    1542:	73 07       	cpc	r23, r19
    1544:	84 07       	cpc	r24, r20
    1546:	ba 07       	cpc	r27, r26
    1548:	20 f0       	brcs	.+8      	; 0x1552 <__divsf3_pse+0xae>
    154a:	62 1b       	sub	r22, r18
    154c:	73 0b       	sbc	r23, r19
    154e:	84 0b       	sbc	r24, r20
    1550:	ba 0b       	sbc	r27, r26
    1552:	ee 1f       	adc	r30, r30
    1554:	88 f7       	brcc	.-30     	; 0x1538 <__divsf3_pse+0x94>
    1556:	e0 95       	com	r30
    1558:	08 95       	ret

0000155a <__fixunssfsi>:
    155a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__fp_splitA>
    155e:	88 f0       	brcs	.+34     	; 0x1582 <__fixunssfsi+0x28>
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	98 f0       	brcs	.+38     	; 0x158a <__fixunssfsi+0x30>
    1564:	b9 2f       	mov	r27, r25
    1566:	99 27       	eor	r25, r25
    1568:	b7 51       	subi	r27, 0x17	; 23
    156a:	b0 f0       	brcs	.+44     	; 0x1598 <__fixunssfsi+0x3e>
    156c:	e1 f0       	breq	.+56     	; 0x15a6 <__fixunssfsi+0x4c>
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	1a f0       	brmi	.+6      	; 0x157e <__fixunssfsi+0x24>
    1578:	ba 95       	dec	r27
    157a:	c9 f7       	brne	.-14     	; 0x156e <__fixunssfsi+0x14>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <__fixunssfsi+0x4c>
    157e:	b1 30       	cpi	r27, 0x01	; 1
    1580:	91 f0       	breq	.+36     	; 0x15a6 <__fixunssfsi+0x4c>
    1582:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fp_zero>
    1586:	b1 e0       	ldi	r27, 0x01	; 1
    1588:	08 95       	ret
    158a:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__fp_zero>
    158e:	67 2f       	mov	r22, r23
    1590:	78 2f       	mov	r23, r24
    1592:	88 27       	eor	r24, r24
    1594:	b8 5f       	subi	r27, 0xF8	; 248
    1596:	39 f0       	breq	.+14     	; 0x15a6 <__fixunssfsi+0x4c>
    1598:	b9 3f       	cpi	r27, 0xF9	; 249
    159a:	cc f3       	brlt	.-14     	; 0x158e <__fixunssfsi+0x34>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b3 95       	inc	r27
    15a4:	d9 f7       	brne	.-10     	; 0x159c <__fixunssfsi+0x42>
    15a6:	3e f4       	brtc	.+14     	; 0x15b6 <__fixunssfsi+0x5c>
    15a8:	90 95       	com	r25
    15aa:	80 95       	com	r24
    15ac:	70 95       	com	r23
    15ae:	61 95       	neg	r22
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	8f 4f       	sbci	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	08 95       	ret

000015b8 <__fp_cmp>:
    15b8:	99 0f       	add	r25, r25
    15ba:	00 08       	sbc	r0, r0
    15bc:	55 0f       	add	r21, r21
    15be:	aa 0b       	sbc	r26, r26
    15c0:	e0 e8       	ldi	r30, 0x80	; 128
    15c2:	fe ef       	ldi	r31, 0xFE	; 254
    15c4:	16 16       	cp	r1, r22
    15c6:	17 06       	cpc	r1, r23
    15c8:	e8 07       	cpc	r30, r24
    15ca:	f9 07       	cpc	r31, r25
    15cc:	c0 f0       	brcs	.+48     	; 0x15fe <__fp_cmp+0x46>
    15ce:	12 16       	cp	r1, r18
    15d0:	13 06       	cpc	r1, r19
    15d2:	e4 07       	cpc	r30, r20
    15d4:	f5 07       	cpc	r31, r21
    15d6:	98 f0       	brcs	.+38     	; 0x15fe <__fp_cmp+0x46>
    15d8:	62 1b       	sub	r22, r18
    15da:	73 0b       	sbc	r23, r19
    15dc:	84 0b       	sbc	r24, r20
    15de:	95 0b       	sbc	r25, r21
    15e0:	39 f4       	brne	.+14     	; 0x15f0 <__fp_cmp+0x38>
    15e2:	0a 26       	eor	r0, r26
    15e4:	61 f0       	breq	.+24     	; 0x15fe <__fp_cmp+0x46>
    15e6:	23 2b       	or	r18, r19
    15e8:	24 2b       	or	r18, r20
    15ea:	25 2b       	or	r18, r21
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <__fp_cmp+0x3e>
    15ee:	08 95       	ret
    15f0:	0a 26       	eor	r0, r26
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <__fp_cmp+0x3e>
    15f4:	a1 40       	sbci	r26, 0x01	; 1
    15f6:	a6 95       	lsr	r26
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	81 1d       	adc	r24, r1
    15fc:	81 1d       	adc	r24, r1
    15fe:	08 95       	ret

00001600 <__fp_inf>:
    1600:	97 f9       	bld	r25, 7
    1602:	9f 67       	ori	r25, 0x7F	; 127
    1604:	80 e8       	ldi	r24, 0x80	; 128
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	60 e0       	ldi	r22, 0x00	; 0
    160a:	08 95       	ret

0000160c <__fp_nan>:
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	80 ec       	ldi	r24, 0xC0	; 192
    1610:	08 95       	ret

00001612 <__fp_pscA>:
    1612:	00 24       	eor	r0, r0
    1614:	0a 94       	dec	r0
    1616:	16 16       	cp	r1, r22
    1618:	17 06       	cpc	r1, r23
    161a:	18 06       	cpc	r1, r24
    161c:	09 06       	cpc	r0, r25
    161e:	08 95       	ret

00001620 <__fp_pscB>:
    1620:	00 24       	eor	r0, r0
    1622:	0a 94       	dec	r0
    1624:	12 16       	cp	r1, r18
    1626:	13 06       	cpc	r1, r19
    1628:	14 06       	cpc	r1, r20
    162a:	05 06       	cpc	r0, r21
    162c:	08 95       	ret

0000162e <__fp_round>:
    162e:	09 2e       	mov	r0, r25
    1630:	03 94       	inc	r0
    1632:	00 0c       	add	r0, r0
    1634:	11 f4       	brne	.+4      	; 0x163a <__fp_round+0xc>
    1636:	88 23       	and	r24, r24
    1638:	52 f0       	brmi	.+20     	; 0x164e <__fp_round+0x20>
    163a:	bb 0f       	add	r27, r27
    163c:	40 f4       	brcc	.+16     	; 0x164e <__fp_round+0x20>
    163e:	bf 2b       	or	r27, r31
    1640:	11 f4       	brne	.+4      	; 0x1646 <__fp_round+0x18>
    1642:	60 ff       	sbrs	r22, 0
    1644:	04 c0       	rjmp	.+8      	; 0x164e <__fp_round+0x20>
    1646:	6f 5f       	subi	r22, 0xFF	; 255
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	08 95       	ret

00001650 <__fp_split3>:
    1650:	57 fd       	sbrc	r21, 7
    1652:	90 58       	subi	r25, 0x80	; 128
    1654:	44 0f       	add	r20, r20
    1656:	55 1f       	adc	r21, r21
    1658:	59 f0       	breq	.+22     	; 0x1670 <__fp_splitA+0x10>
    165a:	5f 3f       	cpi	r21, 0xFF	; 255
    165c:	71 f0       	breq	.+28     	; 0x167a <__fp_splitA+0x1a>
    165e:	47 95       	ror	r20

00001660 <__fp_splitA>:
    1660:	88 0f       	add	r24, r24
    1662:	97 fb       	bst	r25, 7
    1664:	99 1f       	adc	r25, r25
    1666:	61 f0       	breq	.+24     	; 0x1680 <__fp_splitA+0x20>
    1668:	9f 3f       	cpi	r25, 0xFF	; 255
    166a:	79 f0       	breq	.+30     	; 0x168a <__fp_splitA+0x2a>
    166c:	87 95       	ror	r24
    166e:	08 95       	ret
    1670:	12 16       	cp	r1, r18
    1672:	13 06       	cpc	r1, r19
    1674:	14 06       	cpc	r1, r20
    1676:	55 1f       	adc	r21, r21
    1678:	f2 cf       	rjmp	.-28     	; 0x165e <__fp_split3+0xe>
    167a:	46 95       	lsr	r20
    167c:	f1 df       	rcall	.-30     	; 0x1660 <__fp_splitA>
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <__fp_splitA+0x30>
    1680:	16 16       	cp	r1, r22
    1682:	17 06       	cpc	r1, r23
    1684:	18 06       	cpc	r1, r24
    1686:	99 1f       	adc	r25, r25
    1688:	f1 cf       	rjmp	.-30     	; 0x166c <__fp_splitA+0xc>
    168a:	86 95       	lsr	r24
    168c:	71 05       	cpc	r23, r1
    168e:	61 05       	cpc	r22, r1
    1690:	08 94       	sec
    1692:	08 95       	ret

00001694 <__fp_zero>:
    1694:	e8 94       	clt

00001696 <__fp_szero>:
    1696:	bb 27       	eor	r27, r27
    1698:	66 27       	eor	r22, r22
    169a:	77 27       	eor	r23, r23
    169c:	cb 01       	movw	r24, r22
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <__gesf2>:
    16a2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_cmp>
    16a6:	08 f4       	brcc	.+2      	; 0x16aa <__gesf2+0x8>
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	08 95       	ret

000016ac <__mulsf3>:
    16ac:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__mulsf3x>
    16b0:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_round>
    16b4:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_pscA>
    16b8:	38 f0       	brcs	.+14     	; 0x16c8 <__mulsf3+0x1c>
    16ba:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_pscB>
    16be:	20 f0       	brcs	.+8      	; 0x16c8 <__mulsf3+0x1c>
    16c0:	95 23       	and	r25, r21
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <__mulsf3+0x1c>
    16c4:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_inf>
    16c8:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_nan>
    16cc:	11 24       	eor	r1, r1
    16ce:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_szero>

000016d2 <__mulsf3x>:
    16d2:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_split3>
    16d6:	70 f3       	brcs	.-36     	; 0x16b4 <__mulsf3+0x8>

000016d8 <__mulsf3_pse>:
    16d8:	95 9f       	mul	r25, r21
    16da:	c1 f3       	breq	.-16     	; 0x16cc <__mulsf3+0x20>
    16dc:	95 0f       	add	r25, r21
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	55 1f       	adc	r21, r21
    16e2:	62 9f       	mul	r22, r18
    16e4:	f0 01       	movw	r30, r0
    16e6:	72 9f       	mul	r23, r18
    16e8:	bb 27       	eor	r27, r27
    16ea:	f0 0d       	add	r31, r0
    16ec:	b1 1d       	adc	r27, r1
    16ee:	63 9f       	mul	r22, r19
    16f0:	aa 27       	eor	r26, r26
    16f2:	f0 0d       	add	r31, r0
    16f4:	b1 1d       	adc	r27, r1
    16f6:	aa 1f       	adc	r26, r26
    16f8:	64 9f       	mul	r22, r20
    16fa:	66 27       	eor	r22, r22
    16fc:	b0 0d       	add	r27, r0
    16fe:	a1 1d       	adc	r26, r1
    1700:	66 1f       	adc	r22, r22
    1702:	82 9f       	mul	r24, r18
    1704:	22 27       	eor	r18, r18
    1706:	b0 0d       	add	r27, r0
    1708:	a1 1d       	adc	r26, r1
    170a:	62 1f       	adc	r22, r18
    170c:	73 9f       	mul	r23, r19
    170e:	b0 0d       	add	r27, r0
    1710:	a1 1d       	adc	r26, r1
    1712:	62 1f       	adc	r22, r18
    1714:	83 9f       	mul	r24, r19
    1716:	a0 0d       	add	r26, r0
    1718:	61 1d       	adc	r22, r1
    171a:	22 1f       	adc	r18, r18
    171c:	74 9f       	mul	r23, r20
    171e:	33 27       	eor	r19, r19
    1720:	a0 0d       	add	r26, r0
    1722:	61 1d       	adc	r22, r1
    1724:	23 1f       	adc	r18, r19
    1726:	84 9f       	mul	r24, r20
    1728:	60 0d       	add	r22, r0
    172a:	21 1d       	adc	r18, r1
    172c:	82 2f       	mov	r24, r18
    172e:	76 2f       	mov	r23, r22
    1730:	6a 2f       	mov	r22, r26
    1732:	11 24       	eor	r1, r1
    1734:	9f 57       	subi	r25, 0x7F	; 127
    1736:	50 40       	sbci	r21, 0x00	; 0
    1738:	9a f0       	brmi	.+38     	; 0x1760 <__mulsf3_pse+0x88>
    173a:	f1 f0       	breq	.+60     	; 0x1778 <__mulsf3_pse+0xa0>
    173c:	88 23       	and	r24, r24
    173e:	4a f0       	brmi	.+18     	; 0x1752 <__mulsf3_pse+0x7a>
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	bb 1f       	adc	r27, r27
    1746:	66 1f       	adc	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	91 50       	subi	r25, 0x01	; 1
    174e:	50 40       	sbci	r21, 0x00	; 0
    1750:	a9 f7       	brne	.-22     	; 0x173c <__mulsf3_pse+0x64>
    1752:	9e 3f       	cpi	r25, 0xFE	; 254
    1754:	51 05       	cpc	r21, r1
    1756:	80 f0       	brcs	.+32     	; 0x1778 <__mulsf3_pse+0xa0>
    1758:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_inf>
    175c:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__fp_szero>
    1760:	5f 3f       	cpi	r21, 0xFF	; 255
    1762:	e4 f3       	brlt	.-8      	; 0x175c <__mulsf3_pse+0x84>
    1764:	98 3e       	cpi	r25, 0xE8	; 232
    1766:	d4 f3       	brlt	.-12     	; 0x175c <__mulsf3_pse+0x84>
    1768:	86 95       	lsr	r24
    176a:	77 95       	ror	r23
    176c:	67 95       	ror	r22
    176e:	b7 95       	ror	r27
    1770:	f7 95       	ror	r31
    1772:	e7 95       	ror	r30
    1774:	9f 5f       	subi	r25, 0xFF	; 255
    1776:	c1 f7       	brne	.-16     	; 0x1768 <__mulsf3_pse+0x90>
    1778:	fe 2b       	or	r31, r30
    177a:	88 0f       	add	r24, r24
    177c:	91 1d       	adc	r25, r1
    177e:	96 95       	lsr	r25
    1780:	87 95       	ror	r24
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret

00001786 <itoa>:
    1786:	45 32       	cpi	r20, 0x25	; 37
    1788:	51 05       	cpc	r21, r1
    178a:	20 f4       	brcc	.+8      	; 0x1794 <itoa+0xe>
    178c:	42 30       	cpi	r20, 0x02	; 2
    178e:	10 f0       	brcs	.+4      	; 0x1794 <itoa+0xe>
    1790:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__itoa_ncheck>
    1794:	fb 01       	movw	r30, r22
    1796:	10 82       	st	Z, r1
    1798:	cb 01       	movw	r24, r22
    179a:	08 95       	ret

0000179c <__itoa_ncheck>:
    179c:	bb 27       	eor	r27, r27
    179e:	4a 30       	cpi	r20, 0x0A	; 10
    17a0:	31 f4       	brne	.+12     	; 0x17ae <__itoa_ncheck+0x12>
    17a2:	99 23       	and	r25, r25
    17a4:	22 f4       	brpl	.+8      	; 0x17ae <__itoa_ncheck+0x12>
    17a6:	bd e2       	ldi	r27, 0x2D	; 45
    17a8:	90 95       	com	r25
    17aa:	81 95       	neg	r24
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__utoa_common>

000017b2 <__utoa_ncheck>:
    17b2:	bb 27       	eor	r27, r27

000017b4 <__utoa_common>:
    17b4:	fb 01       	movw	r30, r22
    17b6:	55 27       	eor	r21, r21
    17b8:	aa 27       	eor	r26, r26
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	aa 1f       	adc	r26, r26
    17c0:	a4 17       	cp	r26, r20
    17c2:	10 f0       	brcs	.+4      	; 0x17c8 <__utoa_common+0x14>
    17c4:	a4 1b       	sub	r26, r20
    17c6:	83 95       	inc	r24
    17c8:	50 51       	subi	r21, 0x10	; 16
    17ca:	b9 f7       	brne	.-18     	; 0x17ba <__utoa_common+0x6>
    17cc:	a0 5d       	subi	r26, 0xD0	; 208
    17ce:	aa 33       	cpi	r26, 0x3A	; 58
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <__utoa_common+0x20>
    17d2:	a9 5d       	subi	r26, 0xD9	; 217
    17d4:	a1 93       	st	Z+, r26
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	79 f7       	brne	.-34     	; 0x17b8 <__utoa_common+0x4>
    17da:	b1 11       	cpse	r27, r1
    17dc:	b1 93       	st	Z+, r27
    17de:	11 92       	st	Z+, r1
    17e0:	cb 01       	movw	r24, r22
    17e2:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <strrev>

000017e6 <strrev>:
    17e6:	dc 01       	movw	r26, r24
    17e8:	fc 01       	movw	r30, r24
    17ea:	67 2f       	mov	r22, r23
    17ec:	71 91       	ld	r23, Z+
    17ee:	77 23       	and	r23, r23
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <strrev+0x4>
    17f2:	32 97       	sbiw	r30, 0x02	; 2
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <strrev+0x18>
    17f6:	7c 91       	ld	r23, X
    17f8:	6d 93       	st	X+, r22
    17fa:	70 83       	st	Z, r23
    17fc:	62 91       	ld	r22, -Z
    17fe:	ae 17       	cp	r26, r30
    1800:	bf 07       	cpc	r27, r31
    1802:	c8 f3       	brcs	.-14     	; 0x17f6 <strrev+0x10>
    1804:	08 95       	ret

00001806 <_exit>:
    1806:	f8 94       	cli

00001808 <__stop_program>:
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <__stop_program>
