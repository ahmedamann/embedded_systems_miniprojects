
fancontroller_eclipseWS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000016bc  00001730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000030cc  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00003813  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00008047  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008078  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  0000859a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00008a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00008a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 b5 08 	call	0x116a	; 0x116a <main>
      7a:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
 *             - refVolt: Reference voltage selection.
 *             - prescaler: ADC clock prescaler.
 * Returns: None
 */
void ADC_init(const ADC_ConfigType* Config_Ptr)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <ADC_init+0x6>
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	9a 83       	std	Y+2, r25	; 0x02
      8e:	89 83       	std	Y+1, r24	; 0x01
    /* Initialize the ADC control register to 0 */
    ADCSRA.byte = 0;
      90:	86 e2       	ldi	r24, 0x26	; 38
      92:	90 e0       	ldi	r25, 0x00	; 0
      94:	fc 01       	movw	r30, r24
      96:	10 82       	st	Z, r1

    /* Enable the ADC */
    ADC_ENABLE;
      98:	86 e2       	ldi	r24, 0x26	; 38
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	fc 01       	movw	r30, r24
      9e:	40 81       	ld	r20, Z
      a0:	40 68       	ori	r20, 0x80	; 128
      a2:	fc 01       	movw	r30, r24
      a4:	40 83       	st	Z, r20

    /* Set ADC reference voltage */
    ADC_REFVOLT(Config_Ptr->refVolt);
      a6:	87 e2       	ldi	r24, 0x27	; 39
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	fc 01       	movw	r30, r24
      ac:	80 81       	ld	r24, Z
      ae:	48 2f       	mov	r20, r24
      b0:	89 81       	ldd	r24, Y+1	; 0x01
      b2:	9a 81       	ldd	r25, Y+2	; 0x02
      b4:	fc 01       	movw	r30, r24
      b6:	80 81       	ld	r24, Z
      b8:	88 2f       	mov	r24, r24
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	38 2f       	mov	r19, r24
      be:	36 95       	lsr	r19
      c0:	36 95       	lsr	r19
      c2:	28 2f       	mov	r18, r24
      c4:	22 95       	swap	r18
      c6:	22 0f       	add	r18, r18
      c8:	22 0f       	add	r18, r18
      ca:	20 7c       	andi	r18, 0xC0	; 192
      cc:	82 2f       	mov	r24, r18
      ce:	24 2f       	mov	r18, r20
      d0:	28 2b       	or	r18, r24
      d2:	87 e2       	ldi	r24, 0x27	; 39
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18

    /* Set ADC prescaler */
    ADC_PRESCALER(Config_Ptr->prescaler);
      da:	86 e2       	ldi	r24, 0x26	; 38
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	fc 01       	movw	r30, r24
      e0:	30 81       	ld	r19, Z
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	9a 81       	ldd	r25, Y+2	; 0x02
      e6:	fc 01       	movw	r30, r24
      e8:	21 81       	ldd	r18, Z+1	; 0x01
      ea:	86 e2       	ldi	r24, 0x26	; 38
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	23 2b       	or	r18, r19
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
}
      f4:	00 00       	nop
      f6:	0f 90       	pop	r0
      f8:	0f 90       	pop	r0
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <ADC_readChannel>:
 *
 * channel_num: ADC channel number (0 to 7).
 * Returns: 16-bit ADC conversion result from the specified channel.
 */
uint16 ADC_readChannel(uint8 channel_num)
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	1f 92       	push	r1
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
     10a:	89 83       	std	Y+1, r24	; 0x01
    /* Ensure channel number is within valid range */
    channel_num &= 0x07;
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	87 70       	andi	r24, 0x07	; 7
     110:	89 83       	std	Y+1, r24	; 0x01

    /* Select ADC channel */
    ADC_SELECT_CHANNEL(channel_num);
     112:	87 e2       	ldi	r24, 0x27	; 39
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	fc 01       	movw	r30, r24
     118:	80 81       	ld	r24, Z
     11a:	98 2f       	mov	r25, r24
     11c:	90 7e       	andi	r25, 0xE0	; 224
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	8f 71       	andi	r24, 0x1F	; 31
     122:	29 2f       	mov	r18, r25
     124:	28 2b       	or	r18, r24
     126:	87 e2       	ldi	r24, 0x27	; 39
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18

    /* Start ADC conversion */
    ADC_START_CONVERSION;
     12e:	86 e2       	ldi	r24, 0x26	; 38
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	fc 01       	movw	r30, r24
     134:	20 81       	ld	r18, Z
     136:	20 64       	ori	r18, 0x40	; 64
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18

    /* Wait until ADC conversion completes (polling) */
    while(ADCSRA.bits.ADIF == 0);
     13c:	00 00       	nop
     13e:	86 e2       	ldi	r24, 0x26	; 38
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	80 81       	ld	r24, Z
     146:	82 95       	swap	r24
     148:	81 70       	andi	r24, 0x01	; 1
     14a:	88 23       	and	r24, r24
     14c:	c1 f3       	breq	.-16     	; 0x13e <ADC_readChannel+0x3e>

    /* Clear ADC conversion complete flag */
    ADC_CLEAR_FLAG;
     14e:	86 e2       	ldi	r24, 0x26	; 38
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	20 81       	ld	r18, Z
     156:	20 61       	ori	r18, 0x10	; 16
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18

    /* Return ADC conversion result */
    return ADC.twoBytes;
     15c:	84 e2       	ldi	r24, 0x24	; 36
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
}
     166:	0f 90       	pop	r0
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <GPIO_setupPinDirection>:
 * Parameters:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - direction: Desired direction of the pin (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <GPIO_setupPinDirection+0x6>
     174:	1f 92       	push	r1
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	89 83       	std	Y+1, r24	; 0x01
     17c:	6a 83       	std	Y+2, r22	; 0x02
     17e:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT) {
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	88 30       	cpi	r24, 0x08	; 8
     184:	08 f0       	brcs	.+2      	; 0x188 <GPIO_setupPinDirection+0x1a>
     186:	52 c0       	rjmp	.+164    	; 0x22c <GPIO_setupPinDirection+0xbe>
        if (direction == PIN_OUTPUT) {
     188:	8b 81       	ldd	r24, Y+3	; 0x03
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	31 f5       	brne	.+76     	; 0x1da <GPIO_setupPinDirection+0x6c>
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	80 5a       	subi	r24, 0xA0	; 160
     19a:	9f 4f       	sbci	r25, 0xFF	; 255
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	91 81       	ldd	r25, Z+1	; 0x01
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	48 2f       	mov	r20, r24
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	28 2f       	mov	r18, r24
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GPIO_setupPinDirection+0x4a>
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	2a 95       	dec	r18
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GPIO_setupPinDirection+0x46>
     1bc:	24 2f       	mov	r18, r20
     1be:	28 2b       	or	r18, r24
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	88 2f       	mov	r24, r24
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	80 5a       	subi	r24, 0xA0	; 160
     1cc:	9f 4f       	sbci	r25, 0xFF	; 255
     1ce:	fc 01       	movw	r30, r24
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
        } else if (direction == PIN_INPUT) {
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
        }
    }
}
     1d8:	29 c0       	rjmp	.+82     	; 0x22c <GPIO_setupPinDirection+0xbe>
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    if (pin_num < NUM_OF_PINS_PER_PORT) {
        if (direction == PIN_OUTPUT) {
            DIRECTION_REG[port_num]->byte |= (1 << pin_num); // Set pin as output
        } else if (direction == PIN_INPUT) {
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	88 23       	and	r24, r24
     1de:	31 f5       	brne	.+76     	; 0x22c <GPIO_setupPinDirection+0xbe>
            DIRECTION_REG[port_num]->byte &= ~(1 << pin_num); // Set pin as input
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	80 5a       	subi	r24, 0xA0	; 160
     1ec:	9f 4f       	sbci	r25, 0xFF	; 255
     1ee:	fc 01       	movw	r30, r24
     1f0:	80 81       	ld	r24, Z
     1f2:	91 81       	ldd	r25, Z+1	; 0x01
     1f4:	fc 01       	movw	r30, r24
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	28 2f       	mov	r18, r24
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <GPIO_setupPinDirection+0x9c>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	2a 95       	dec	r18
     20c:	e2 f7       	brpl	.-8      	; 0x206 <GPIO_setupPinDirection+0x98>
     20e:	80 95       	com	r24
     210:	24 2f       	mov	r18, r20
     212:	28 23       	and	r18, r24
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	80 5a       	subi	r24, 0xA0	; 160
     220:	9f 4f       	sbci	r25, 0xFF	; 255
     222:	fc 01       	movw	r30, r24
     224:	80 81       	ld	r24, Z
     226:	91 81       	ldd	r25, Z+1	; 0x01
     228:	fc 01       	movw	r30, r24
     22a:	20 83       	st	Z, r18
        }
    }
}
     22c:	00 00       	nop
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <GPIO_setupPinDirectionR>:
 * - last_pin_num: Last pin number in the range (0 to NUM_OF_PINS_PER_PORT-1).
 * - port_num: Port number where the pins are located.
 * - direction: Desired direction of the pins (PIN_OUTPUT or PIN_INPUT).
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	00 d0       	rcall	.+0      	; 0x240 <GPIO_setupPinDirectionR+0x6>
     240:	00 d0       	rcall	.+0      	; 0x242 <GPIO_setupPinDirectionR+0x8>
     242:	1f 92       	push	r1
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	8a 83       	std	Y+2, r24	; 0x02
     24a:	6b 83       	std	Y+3, r22	; 0x03
     24c:	4c 83       	std	Y+4, r20	; 0x04
     24e:	2d 83       	std	Y+5, r18	; 0x05
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
     250:	8a 81       	ldd	r24, Y+2	; 0x02
     252:	88 30       	cpi	r24, 0x08	; 8
     254:	38 f5       	brcc	.+78     	; 0x2a4 <GPIO_setupPinDirectionR+0x6a>
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	88 30       	cpi	r24, 0x08	; 8
     25a:	20 f5       	brcc	.+72     	; 0x2a4 <GPIO_setupPinDirectionR+0x6a>
     25c:	8c 81       	ldd	r24, Y+4	; 0x04
     25e:	84 30       	cpi	r24, 0x04	; 4
     260:	08 f5       	brcc	.+66     	; 0x2a4 <GPIO_setupPinDirectionR+0x6a>
        if (last_pin_num > first_pin_num) {
     262:	9b 81       	ldd	r25, Y+3	; 0x03
     264:	8a 81       	ldd	r24, Y+2	; 0x02
     266:	89 17       	cp	r24, r25
     268:	e8 f4       	brcc	.+58     	; 0x2a4 <GPIO_setupPinDirectionR+0x6a>
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     26a:	19 82       	std	Y+1, r1	; 0x01
     26c:	0b c0       	rjmp	.+22     	; 0x284 <GPIO_setupPinDirectionR+0x4a>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
     26e:	9a 81       	ldd	r25, Y+2	; 0x02
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	89 0f       	add	r24, r25
     274:	4d 81       	ldd	r20, Y+5	; 0x05
     276:	68 2f       	mov	r22, r24
     278:	8c 81       	ldd	r24, Y+4	; 0x04
     27a:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>
 */
void GPIO_setupPinDirectionR(uint8 first_pin_num, uint8 last_pin_num, uint8 port_num, GPIO_PinDirectionType direction)
{
    if ((first_pin_num < NUM_OF_PINS_PER_PORT) && (last_pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS)) {
        if (last_pin_num > first_pin_num) {
            for (uint8 i = 0; i <= (last_pin_num - first_pin_num); i++) {
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	8f 5f       	subi	r24, 0xFF	; 255
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	28 2f       	mov	r18, r24
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	48 2f       	mov	r20, r24
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	ba 01       	movw	r22, r20
     298:	68 1b       	sub	r22, r24
     29a:	79 0b       	sbc	r23, r25
     29c:	cb 01       	movw	r24, r22
     29e:	82 17       	cp	r24, r18
     2a0:	93 07       	cpc	r25, r19
     2a2:	2c f7       	brge	.-54     	; 0x26e <GPIO_setupPinDirectionR+0x34>
                GPIO_setupPinDirection(port_num, first_pin_num + i, direction);
            }
        }
    }
}
     2a4:	00 00       	nop
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <GPIO_writePin>:
 * - port_num: Port number where the pin is located.
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * - value: Logic level to be written (LOGIC_HIGH or LOGIC_LOW).
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <GPIO_writePin+0x6>
     2bc:	1f 92       	push	r1
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	6a 83       	std	Y+2, r22	; 0x02
     2c6:	4b 83       	std	Y+3, r20	; 0x03
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     2c8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ca:	88 30       	cpi	r24, 0x08	; 8
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <GPIO_writePin+0x1a>
     2ce:	56 c0       	rjmp	.+172    	; 0x37c <GPIO_writePin+0xc6>
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	84 30       	cpi	r24, 0x04	; 4
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <GPIO_writePin+0x22>
     2d6:	52 c0       	rjmp	.+164    	; 0x37c <GPIO_writePin+0xc6>
        if (value == LOGIC_HIGH) {
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	31 f5       	brne	.+76     	; 0x32a <GPIO_writePin+0x74>
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	88 59       	subi	r24, 0x98	; 152
     2ea:	9f 4f       	sbci	r25, 0xFF	; 255
     2ec:	fc 01       	movw	r30, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	91 81       	ldd	r25, Z+1	; 0x01
     2f2:	fc 01       	movw	r30, r24
     2f4:	80 81       	ld	r24, Z
     2f6:	48 2f       	mov	r20, r24
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <GPIO_writePin+0x52>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	2a 95       	dec	r18
     30a:	e2 f7       	brpl	.-8      	; 0x304 <GPIO_writePin+0x4e>
     30c:	24 2f       	mov	r18, r20
     30e:	28 2b       	or	r18, r24
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	88 59       	subi	r24, 0x98	; 152
     31c:	9f 4f       	sbci	r25, 0xFF	; 255
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
        } else if (value == LOGIC_LOW) {
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
        }
    }
}
     328:	29 c0       	rjmp	.+82     	; 0x37c <GPIO_writePin+0xc6>
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
        if (value == LOGIC_HIGH) {
            WRITE_REG[port_num]->byte |= (1 << pin_num); // Set pin to logic high
        } else if (value == LOGIC_LOW) {
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	88 23       	and	r24, r24
     32e:	31 f5       	brne	.+76     	; 0x37c <GPIO_writePin+0xc6>
            WRITE_REG[port_num]->byte &= ~(1 << pin_num); // Set pin to logic low
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	88 59       	subi	r24, 0x98	; 152
     33c:	9f 4f       	sbci	r25, 0xFF	; 255
     33e:	fc 01       	movw	r30, r24
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	48 2f       	mov	r20, r24
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	28 2f       	mov	r18, r24
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_writePin+0xa4>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	2a 95       	dec	r18
     35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_writePin+0xa0>
     35e:	80 95       	com	r24
     360:	24 2f       	mov	r18, r20
     362:	28 23       	and	r18, r24
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	88 59       	subi	r24, 0x98	; 152
     370:	9f 4f       	sbci	r25, 0xFF	; 255
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
        }
    }
}
     37c:	00 00       	nop
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <GPIO_readPin>:
 * - pin_num: Pin number within the port (0 to NUM_OF_PINS_PER_PORT-1).
 * Returns:
 * - Logic level of the pin (LOGIC_HIGH or LOGIC_LOW).
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	00 d0       	rcall	.+0      	; 0x390 <GPIO_readPin+0x6>
     390:	1f 92       	push	r1
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	8a 83       	std	Y+2, r24	; 0x02
     398:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
     39a:	19 82       	std	Y+1, r1	; 0x01

    if (pin_num < NUM_OF_PINS_PER_PORT && port_num < NUM_OF_PORTS) {
     39c:	8b 81       	ldd	r24, Y+3	; 0x03
     39e:	88 30       	cpi	r24, 0x08	; 8
     3a0:	f8 f4       	brcc	.+62     	; 0x3e0 <GPIO_readPin+0x56>
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	84 30       	cpi	r24, 0x04	; 4
     3a6:	e0 f4       	brcc	.+56     	; 0x3e0 <GPIO_readPin+0x56>
        if (READ_REG[port_num]->byte & (1 << pin_num)) {
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	80 59       	subi	r24, 0x90	; 144
     3b4:	9f 4f       	sbci	r25, 0xFF	; 255
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	91 81       	ldd	r25, Z+1	; 0x01
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2b 81       	ldd	r18, Y+3	; 0x03
     3c6:	22 2f       	mov	r18, r18
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GPIO_readPin+0x46>
     3cc:	95 95       	asr	r25
     3ce:	87 95       	ror	r24
     3d0:	2a 95       	dec	r18
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <GPIO_readPin+0x42>
     3d4:	81 70       	andi	r24, 0x01	; 1
     3d6:	99 27       	eor	r25, r25
     3d8:	89 2b       	or	r24, r25
     3da:	11 f0       	breq	.+4      	; 0x3e0 <GPIO_readPin+0x56>
            pin_value = LOGIC_HIGH; // Pin is logic high
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	89 83       	std	Y+1, r24	; 0x01
        }
    }

    return pin_value;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <GPIO_setupPortDirection>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - direction: Desired direction of the port (PORT_INPUT or PORT_OUTPUT).
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <GPIO_setupPortDirection+0x6>
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	68 f4       	brcc	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
        DIRECTION_REG[port_num]->byte = direction; // Set port direction
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	88 2f       	mov	r24, r24
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	80 5a       	subi	r24, 0xA0	; 160
     40e:	9f 4f       	sbci	r25, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	91 81       	ldd	r25, Z+1	; 0x01
     416:	2a 81       	ldd	r18, Y+2	; 0x02
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
    }
}
     41c:	00 00       	nop
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <GPIO_writePort>:
 * Parameters:
 * - port_num: Port number where all pins are located.
 * - value: Value to be written to the port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <GPIO_writePort+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	89 83       	std	Y+1, r24	; 0x01
     434:	6a 83       	std	Y+2, r22	; 0x02
    if (port_num < NUM_OF_PORTS) {
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	84 30       	cpi	r24, 0x04	; 4
     43a:	68 f4       	brcc	.+26     	; 0x456 <GPIO_writePort+0x2e>
        WRITE_REG[port_num]->byte = value; // Write value to port
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 59       	subi	r24, 0x98	; 152
     448:	9f 4f       	sbci	r25, 0xFF	; 255
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	2a 81       	ldd	r18, Y+2	; 0x02
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18
    }
}
     456:	00 00       	nop
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <GPIO_readPort>:
 * - port_num: Port number to read from.
 * Returns:
 * - Value read from the port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <GPIO_readPort+0x6>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 value = LOGIC_LOW;
     46e:	19 82       	std	Y+1, r1	; 0x01

    if (port_num < NUM_OF_PORTS) {
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	84 30       	cpi	r24, 0x04	; 4
     474:	68 f4       	brcc	.+26     	; 0x490 <GPIO_readPort+0x2e>
        value = READ_REG[port_num]->byte; // Read value from port
     476:	8a 81       	ldd	r24, Y+2	; 0x02
     478:	88 2f       	mov	r24, r24
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	80 59       	subi	r24, 0x90	; 144
     482:	9f 4f       	sbci	r25, 0xFF	; 255
     484:	fc 01       	movw	r30, r24
     486:	80 81       	ld	r24, Z
     488:	91 81       	ldd	r25, Z+1	; 0x01
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
     490:	89 81       	ldd	r24, Y+1	; 0x01
}
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <PWM_Timer0_Start>:
#include "pwm.h"

PWM_Prescaler prescaler = F_CPU8;

void PWM_Timer0_Start(uint8 duty_cycle)
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	1f 92       	push	r1
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	89 83       	std	Y+1, r24	; 0x01
    /* Start Timer 0 counting from 0 */
    TIMER0_START_FROM(0);
     4a8:	82 e5       	ldi	r24, 0x52	; 82
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	10 82       	st	Z, r1

    /* Set the PWM duty cycle by calculating the value for the OCR0 register
       (duty_cycle is provided as a percentage, so it's scaled to 0-255) */
    TIMER0_SET_DUTY_CYCLE(duty_cycle);
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	88 2f       	mov	r24, r24
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	4f ef       	ldi	r20, 0xFF	; 255
     4b8:	48 9f       	mul	r20, r24
     4ba:	90 01       	movw	r18, r0
     4bc:	49 9f       	mul	r20, r25
     4be:	30 0d       	add	r19, r0
     4c0:	11 24       	eor	r1, r1
     4c2:	c9 01       	movw	r24, r18
     4c4:	96 95       	lsr	r25
     4c6:	87 95       	ror	r24
     4c8:	96 95       	lsr	r25
     4ca:	87 95       	ror	r24
     4cc:	9c 01       	movw	r18, r24
     4ce:	ab e7       	ldi	r26, 0x7B	; 123
     4d0:	b4 e1       	ldi	r27, 0x14	; 20
     4d2:	0e 94 38 09 	call	0x1270	; 0x1270 <__umulhisi3>
     4d6:	9c 01       	movw	r18, r24
     4d8:	36 95       	lsr	r19
     4da:	27 95       	ror	r18
     4dc:	8c e5       	ldi	r24, 0x5C	; 92
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18

    /* Set the direction of the PWM output pin (OC0) to output */
    GPIO_setupPinDirection(PWM_OC0_PORT, PWM_OC0_PIN, PIN_OUTPUT);
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	63 e0       	ldi	r22, 0x03	; 3
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>

    /* Configure Timer 0 for Fast PWM mode with non-inverted output */
    TIMER0_FAST_PWM_MODE;
     4ee:	83 e5       	ldi	r24, 0x53	; 83
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 81       	ld	r18, Z
     4f6:	83 e5       	ldi	r24, 0x53	; 83
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	28 66       	ori	r18, 0x68	; 104
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18

    /* Start Timer 0 with a prescaler of 8 */
    TIMER0_PRESCALER(prescaler);
     500:	83 e5       	ldi	r24, 0x53	; 83
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	fc 01       	movw	r30, r24
     506:	30 81       	ld	r19, Z
     508:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <prescaler>
     50c:	28 2f       	mov	r18, r24
     50e:	27 70       	andi	r18, 0x07	; 7
     510:	83 e5       	ldi	r24, 0x53	; 83
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	23 2b       	or	r18, r19
     516:	fc 01       	movw	r30, r24
     518:	20 83       	st	Z, r18


}
     51a:	00 00       	nop
     51c:	0f 90       	pop	r0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <LCD_init>:
 * 1. Configures the direction of RS and E pins as output.
 * 2. Sets the data mode to 8-bits.
 * 3. Performs necessary initialization delays.
 */
void LCD_init(void)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	2e 97       	sbiw	r28, 0x0e	; 14
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
    /* Configure RS and E pins as output */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>

    /* Configure data port as output */
    GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
     54c:	6f ef       	ldi	r22, 0xFF	; 255
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 f7 01 	call	0x3ee	; 0x3ee <GPIO_setupPortDirection>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	a0 ea       	ldi	r26, 0xA0	; 160
     55a:	b1 e4       	ldi	r27, 0x41	; 65
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	ab 83       	std	Y+3, r26	; 0x03
     562:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	4a e7       	ldi	r20, 0x7A	; 122
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	7a 81       	ldd	r23, Y+2	; 0x02
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	8d 83       	std	Y+5, r24	; 0x05
     57e:	9e 83       	std	Y+6, r25	; 0x06
     580:	af 83       	std	Y+7, r26	; 0x07
     582:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e8       	ldi	r20, 0x80	; 128
     58a:	5f e3       	ldi	r21, 0x3F	; 63
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	7e 81       	ldd	r23, Y+6	; 0x06
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     598:	88 23       	and	r24, r24
     59a:	2c f4       	brge	.+10     	; 0x5a6 <LCD_init+0x82>
		__ticks = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9a 87       	std	Y+10, r25	; 0x0a
     5a2:	89 87       	std	Y+9, r24	; 0x09
     5a4:	3f c0       	rjmp	.+126    	; 0x624 <LCD_init+0x100>
	else if (__tmp > 65535)
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	3f ef       	ldi	r19, 0xFF	; 255
     5aa:	4f e7       	ldi	r20, 0x7F	; 127
     5ac:	57 e4       	ldi	r21, 0x47	; 71
     5ae:	6d 81       	ldd	r22, Y+5	; 0x05
     5b0:	7e 81       	ldd	r23, Y+6	; 0x06
     5b2:	8f 81       	ldd	r24, Y+7	; 0x07
     5b4:	98 85       	ldd	r25, Y+8	; 0x08
     5b6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     5ba:	18 16       	cp	r1, r24
     5bc:	4c f5       	brge	.+82     	; 0x610 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e2       	ldi	r20, 0x20	; 32
     5c4:	51 e4       	ldi	r21, 0x41	; 65
     5c6:	69 81       	ldd	r22, Y+1	; 0x01
     5c8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	9a 87       	std	Y+10, r25	; 0x0a
     5e4:	89 87       	std	Y+9, r24	; 0x09
     5e6:	0f c0       	rjmp	.+30     	; 0x606 <LCD_init+0xe2>
     5e8:	89 e1       	ldi	r24, 0x19	; 25
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9c 87       	std	Y+12, r25	; 0x0c
     5ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_init+0xd0>
     5f8:	9c 87       	std	Y+12, r25	; 0x0c
     5fa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fc:	89 85       	ldd	r24, Y+9	; 0x09
     5fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	9a 87       	std	Y+10, r25	; 0x0a
     604:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	89 2b       	or	r24, r25
     60c:	69 f7       	brne	.-38     	; 0x5e8 <LCD_init+0xc4>
     60e:	14 c0       	rjmp	.+40     	; 0x638 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     610:	6d 81       	ldd	r22, Y+5	; 0x05
     612:	7e 81       	ldd	r23, Y+6	; 0x06
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	98 85       	ldd	r25, Y+8	; 0x08
     618:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	9a 87       	std	Y+10, r25	; 0x0a
     622:	89 87       	std	Y+9, r24	; 0x09
     624:	89 85       	ldd	r24, Y+9	; 0x09
     626:	9a 85       	ldd	r25, Y+10	; 0x0a
     628:	9e 87       	std	Y+14, r25	; 0x0e
     62a:	8d 87       	std	Y+13, r24	; 0x0d
     62c:	8d 85       	ldd	r24, Y+13	; 0x0d
     62e:	9e 85       	ldd	r25, Y+14	; 0x0e
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <LCD_init+0x10c>
     634:	9e 87       	std	Y+14, r25	; 0x0e
     636:	8d 87       	std	Y+13, r24	; 0x0d

    _delay_ms(20);  /* Delay for LCD power-on (must be > 15ms) */

    /* Initialize LCD settings */
    LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* 2-line display, 8-bit data */
     638:	88 e3       	ldi	r24, 0x38	; 56
     63a:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_sendCommand>
    LCD_sendCommand(LCD_CURSOR_OFF); /* Turn off cursor */
     63e:	8c e0       	ldi	r24, 0x0C	; 12
     640:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_sendCommand>
    LCD_sendCommand(LCD_CLEAR_COMMAND); /* Clear LCD screen */
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_sendCommand>
}
     64a:	00 00       	nop
     64c:	2e 96       	adiw	r28, 0x0e	; 14
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <LCD_sendCommand>:
 *
 * Parameters:
 * - command: Command byte to be sent to the LCD.
 */
void LCD_sendCommand(uint8 command)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	e9 97       	sbiw	r28, 0x39	; 57
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	89 af       	std	Y+57, r24	; 0x39
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	a0 e8       	ldi	r26, 0x80	; 128
     684:	bf e3       	ldi	r27, 0x3F	; 63
     686:	8b a7       	std	Y+43, r24	; 0x2b
     688:	9c a7       	std	Y+44, r25	; 0x2c
     68a:	ad a7       	std	Y+45, r26	; 0x2d
     68c:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4a e7       	ldi	r20, 0x7A	; 122
     694:	53 e4       	ldi	r21, 0x43	; 67
     696:	6b a5       	ldd	r22, Y+43	; 0x2b
     698:	7c a5       	ldd	r23, Y+44	; 0x2c
     69a:	8d a5       	ldd	r24, Y+45	; 0x2d
     69c:	9e a5       	ldd	r25, Y+46	; 0x2e
     69e:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	8f a7       	std	Y+47, r24	; 0x2f
     6a8:	98 ab       	std	Y+48, r25	; 0x30
     6aa:	a9 ab       	std	Y+49, r26	; 0x31
     6ac:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e8       	ldi	r20, 0x80	; 128
     6b4:	5f e3       	ldi	r21, 0x3F	; 63
     6b6:	6f a5       	ldd	r22, Y+47	; 0x2f
     6b8:	78 a9       	ldd	r23, Y+48	; 0x30
     6ba:	89 a9       	ldd	r24, Y+49	; 0x31
     6bc:	9a a9       	ldd	r25, Y+50	; 0x32
     6be:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     6c2:	88 23       	and	r24, r24
     6c4:	2c f4       	brge	.+10     	; 0x6d0 <LCD_sendCommand+0x72>
		__ticks = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	9c ab       	std	Y+52, r25	; 0x34
     6cc:	8b ab       	std	Y+51, r24	; 0x33
     6ce:	3f c0       	rjmp	.+126    	; 0x74e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	3f ef       	ldi	r19, 0xFF	; 255
     6d4:	4f e7       	ldi	r20, 0x7F	; 127
     6d6:	57 e4       	ldi	r21, 0x47	; 71
     6d8:	6f a5       	ldd	r22, Y+47	; 0x2f
     6da:	78 a9       	ldd	r23, Y+48	; 0x30
     6dc:	89 a9       	ldd	r24, Y+49	; 0x31
     6de:	9a a9       	ldd	r25, Y+50	; 0x32
     6e0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     6e4:	18 16       	cp	r1, r24
     6e6:	4c f5       	brge	.+82     	; 0x73a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e2       	ldi	r20, 0x20	; 32
     6ee:	51 e4       	ldi	r21, 0x41	; 65
     6f0:	6b a5       	ldd	r22, Y+43	; 0x2b
     6f2:	7c a5       	ldd	r23, Y+44	; 0x2c
     6f4:	8d a5       	ldd	r24, Y+45	; 0x2d
     6f6:	9e a5       	ldd	r25, Y+46	; 0x2e
     6f8:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	9c ab       	std	Y+52, r25	; 0x34
     70e:	8b ab       	std	Y+51, r24	; 0x33
     710:	0f c0       	rjmp	.+30     	; 0x730 <LCD_sendCommand+0xd2>
     712:	89 e1       	ldi	r24, 0x19	; 25
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9e ab       	std	Y+54, r25	; 0x36
     718:	8d ab       	std	Y+53, r24	; 0x35
     71a:	8d a9       	ldd	r24, Y+53	; 0x35
     71c:	9e a9       	ldd	r25, Y+54	; 0x36
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <LCD_sendCommand+0xc0>
     722:	9e ab       	std	Y+54, r25	; 0x36
     724:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     726:	8b a9       	ldd	r24, Y+51	; 0x33
     728:	9c a9       	ldd	r25, Y+52	; 0x34
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	9c ab       	std	Y+52, r25	; 0x34
     72e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     730:	8b a9       	ldd	r24, Y+51	; 0x33
     732:	9c a9       	ldd	r25, Y+52	; 0x34
     734:	89 2b       	or	r24, r25
     736:	69 f7       	brne	.-38     	; 0x712 <LCD_sendCommand+0xb4>
     738:	14 c0       	rjmp	.+40     	; 0x762 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73a:	6f a5       	ldd	r22, Y+47	; 0x2f
     73c:	78 a9       	ldd	r23, Y+48	; 0x30
     73e:	89 a9       	ldd	r24, Y+49	; 0x31
     740:	9a a9       	ldd	r25, Y+50	; 0x32
     742:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9c ab       	std	Y+52, r25	; 0x34
     74c:	8b ab       	std	Y+51, r24	; 0x33
     74e:	8b a9       	ldd	r24, Y+51	; 0x33
     750:	9c a9       	ldd	r25, Y+52	; 0x34
     752:	98 af       	std	Y+56, r25	; 0x38
     754:	8f ab       	std	Y+55, r24	; 0x37
     756:	8f a9       	ldd	r24, Y+55	; 0x37
     758:	98 ad       	ldd	r25, Y+56	; 0x38
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_sendCommand+0xfc>
     75e:	98 af       	std	Y+56, r25	; 0x38
     760:	8f ab       	std	Y+55, r24	; 0x37
    _delay_ms(1); /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a0 e8       	ldi	r26, 0x80	; 128
     772:	bf e3       	ldi	r27, 0x3F	; 63
     774:	8d 8f       	std	Y+29, r24	; 0x1d
     776:	9e 8f       	std	Y+30, r25	; 0x1e
     778:	af 8f       	std	Y+31, r26	; 0x1f
     77a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	4a e7       	ldi	r20, 0x7A	; 122
     782:	53 e4       	ldi	r21, 0x43	; 67
     784:	6d 8d       	ldd	r22, Y+29	; 0x1d
     786:	7e 8d       	ldd	r23, Y+30	; 0x1e
     788:	8f 8d       	ldd	r24, Y+31	; 0x1f
     78a:	98 a1       	ldd	r25, Y+32	; 0x20
     78c:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	89 a3       	std	Y+33, r24	; 0x21
     796:	9a a3       	std	Y+34, r25	; 0x22
     798:	ab a3       	std	Y+35, r26	; 0x23
     79a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e8       	ldi	r20, 0x80	; 128
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	69 a1       	ldd	r22, Y+33	; 0x21
     7a6:	7a a1       	ldd	r23, Y+34	; 0x22
     7a8:	8b a1       	ldd	r24, Y+35	; 0x23
     7aa:	9c a1       	ldd	r25, Y+36	; 0x24
     7ac:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     7b0:	88 23       	and	r24, r24
     7b2:	2c f4       	brge	.+10     	; 0x7be <LCD_sendCommand+0x160>
		__ticks = 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9e a3       	std	Y+38, r25	; 0x26
     7ba:	8d a3       	std	Y+37, r24	; 0x25
     7bc:	3f c0       	rjmp	.+126    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	else if (__tmp > 65535)
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	57 e4       	ldi	r21, 0x47	; 71
     7c6:	69 a1       	ldd	r22, Y+33	; 0x21
     7c8:	7a a1       	ldd	r23, Y+34	; 0x22
     7ca:	8b a1       	ldd	r24, Y+35	; 0x23
     7cc:	9c a1       	ldd	r25, Y+36	; 0x24
     7ce:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	4c f5       	brge	.+82     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e2       	ldi	r20, 0x20	; 32
     7dc:	51 e4       	ldi	r21, 0x41	; 65
     7de:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7e0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e4:	98 a1       	ldd	r25, Y+32	; 0x20
     7e6:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	bc 01       	movw	r22, r24
     7f0:	cd 01       	movw	r24, r26
     7f2:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	9e a3       	std	Y+38, r25	; 0x26
     7fc:	8d a3       	std	Y+37, r24	; 0x25
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     800:	89 e1       	ldi	r24, 0x19	; 25
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	98 a7       	std	Y+40, r25	; 0x28
     806:	8f a3       	std	Y+39, r24	; 0x27
     808:	8f a1       	ldd	r24, Y+39	; 0x27
     80a:	98 a5       	ldd	r25, Y+40	; 0x28
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     810:	98 a7       	std	Y+40, r25	; 0x28
     812:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     814:	8d a1       	ldd	r24, Y+37	; 0x25
     816:	9e a1       	ldd	r25, Y+38	; 0x26
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	9e a3       	std	Y+38, r25	; 0x26
     81c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81e:	8d a1       	ldd	r24, Y+37	; 0x25
     820:	9e a1       	ldd	r25, Y+38	; 0x26
     822:	89 2b       	or	r24, r25
     824:	69 f7       	brne	.-38     	; 0x800 <__DATA_REGION_LENGTH__>
     826:	14 c0       	rjmp	.+40     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     828:	69 a1       	ldd	r22, Y+33	; 0x21
     82a:	7a a1       	ldd	r23, Y+34	; 0x22
     82c:	8b a1       	ldd	r24, Y+35	; 0x23
     82e:	9c a1       	ldd	r25, Y+36	; 0x24
     830:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	9e a3       	std	Y+38, r25	; 0x26
     83a:	8d a3       	std	Y+37, r24	; 0x25
     83c:	8d a1       	ldd	r24, Y+37	; 0x25
     83e:	9e a1       	ldd	r25, Y+38	; 0x26
     840:	9a a7       	std	Y+42, r25	; 0x2a
     842:	89 a7       	std	Y+41, r24	; 0x29
     844:	89 a5       	ldd	r24, Y+41	; 0x29
     846:	9a a5       	ldd	r25, Y+42	; 0x2a
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     84c:	9a a7       	std	Y+42, r25	; 0x2a
     84e:	89 a7       	std	Y+41, r24	; 0x29
    _delay_ms(1); /* Delay for processing (Tpw - Tdws = 190ns) */
    GPIO_writePort(LCD_DATA_PORT_ID, command); /* Output command to data bus (D0 --> D7) */
     850:	69 ad       	ldd	r22, Y+57	; 0x39
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 14 02 	call	0x428	; 0x428 <GPIO_writePort>
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e8       	ldi	r26, 0x80	; 128
     85e:	bf e3       	ldi	r27, 0x3F	; 63
     860:	8f 87       	std	Y+15, r24	; 0x0f
     862:	98 8b       	std	Y+16, r25	; 0x10
     864:	a9 8b       	std	Y+17, r26	; 0x11
     866:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	4a e7       	ldi	r20, 0x7A	; 122
     86e:	53 e4       	ldi	r21, 0x43	; 67
     870:	6f 85       	ldd	r22, Y+15	; 0x0f
     872:	78 89       	ldd	r23, Y+16	; 0x10
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	9a 89       	ldd	r25, Y+18	; 0x12
     878:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	8b 8b       	std	Y+19, r24	; 0x13
     882:	9c 8b       	std	Y+20, r25	; 0x14
     884:	ad 8b       	std	Y+21, r26	; 0x15
     886:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e8       	ldi	r20, 0x80	; 128
     88e:	5f e3       	ldi	r21, 0x3F	; 63
     890:	6b 89       	ldd	r22, Y+19	; 0x13
     892:	7c 89       	ldd	r23, Y+20	; 0x14
     894:	8d 89       	ldd	r24, Y+21	; 0x15
     896:	9e 89       	ldd	r25, Y+22	; 0x16
     898:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     89c:	88 23       	and	r24, r24
     89e:	2c f4       	brge	.+10     	; 0x8aa <__stack+0x4b>
		__ticks = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	98 8f       	std	Y+24, r25	; 0x18
     8a6:	8f 8b       	std	Y+23, r24	; 0x17
     8a8:	3f c0       	rjmp	.+126    	; 0x928 <__stack+0xc9>
	else if (__tmp > 65535)
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	3f ef       	ldi	r19, 0xFF	; 255
     8ae:	4f e7       	ldi	r20, 0x7F	; 127
     8b0:	57 e4       	ldi	r21, 0x47	; 71
     8b2:	6b 89       	ldd	r22, Y+19	; 0x13
     8b4:	7c 89       	ldd	r23, Y+20	; 0x14
     8b6:	8d 89       	ldd	r24, Y+21	; 0x15
     8b8:	9e 89       	ldd	r25, Y+22	; 0x16
     8ba:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     8be:	18 16       	cp	r1, r24
     8c0:	4c f5       	brge	.+82     	; 0x914 <__stack+0xb5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e2       	ldi	r20, 0x20	; 32
     8c8:	51 e4       	ldi	r21, 0x41	; 65
     8ca:	6f 85       	ldd	r22, Y+15	; 0x0f
     8cc:	78 89       	ldd	r23, Y+16	; 0x10
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	9a 89       	ldd	r25, Y+18	; 0x12
     8d2:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	bc 01       	movw	r22, r24
     8dc:	cd 01       	movw	r24, r26
     8de:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	98 8f       	std	Y+24, r25	; 0x18
     8e8:	8f 8b       	std	Y+23, r24	; 0x17
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xab>
     8ec:	89 e1       	ldi	r24, 0x19	; 25
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	9a 8f       	std	Y+26, r25	; 0x1a
     8f2:	89 8f       	std	Y+25, r24	; 0x19
     8f4:	89 8d       	ldd	r24, Y+25	; 0x19
     8f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <__stack+0x99>
     8fc:	9a 8f       	std	Y+26, r25	; 0x1a
     8fe:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     900:	8f 89       	ldd	r24, Y+23	; 0x17
     902:	98 8d       	ldd	r25, Y+24	; 0x18
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	98 8f       	std	Y+24, r25	; 0x18
     908:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     90a:	8f 89       	ldd	r24, Y+23	; 0x17
     90c:	98 8d       	ldd	r25, Y+24	; 0x18
     90e:	89 2b       	or	r24, r25
     910:	69 f7       	brne	.-38     	; 0x8ec <__stack+0x8d>
     912:	14 c0       	rjmp	.+40     	; 0x93c <__stack+0xdd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     914:	6b 89       	ldd	r22, Y+19	; 0x13
     916:	7c 89       	ldd	r23, Y+20	; 0x14
     918:	8d 89       	ldd	r24, Y+21	; 0x15
     91a:	9e 89       	ldd	r25, Y+22	; 0x16
     91c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	98 8f       	std	Y+24, r25	; 0x18
     926:	8f 8b       	std	Y+23, r24	; 0x17
     928:	8f 89       	ldd	r24, Y+23	; 0x17
     92a:	98 8d       	ldd	r25, Y+24	; 0x18
     92c:	9c 8f       	std	Y+28, r25	; 0x1c
     92e:	8b 8f       	std	Y+27, r24	; 0x1b
     930:	8b 8d       	ldd	r24, Y+27	; 0x1b
     932:	9c 8d       	ldd	r25, Y+28	; 0x1c
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	f1 f7       	brne	.-4      	; 0x934 <__stack+0xd5>
     938:	9c 8f       	std	Y+28, r25	; 0x1c
     93a:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(1); /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e8       	ldi	r26, 0x80	; 128
     94c:	bf e3       	ldi	r27, 0x3F	; 63
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	9a 83       	std	Y+2, r25	; 0x02
     952:	ab 83       	std	Y+3, r26	; 0x03
     954:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	4a e7       	ldi	r20, 0x7A	; 122
     95c:	53 e4       	ldi	r21, 0x43	; 67
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	7a 81       	ldd	r23, Y+2	; 0x02
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	8d 83       	std	Y+5, r24	; 0x05
     970:	9e 83       	std	Y+6, r25	; 0x06
     972:	af 83       	std	Y+7, r26	; 0x07
     974:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	6d 81       	ldd	r22, Y+5	; 0x05
     980:	7e 81       	ldd	r23, Y+6	; 0x06
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     98a:	88 23       	and	r24, r24
     98c:	2c f4       	brge	.+10     	; 0x998 <__stack+0x139>
		__ticks = 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9a 87       	std	Y+10, r25	; 0x0a
     994:	89 87       	std	Y+9, r24	; 0x09
     996:	3f c0       	rjmp	.+126    	; 0xa16 <__stack+0x1b7>
	else if (__tmp > 65535)
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	4f e7       	ldi	r20, 0x7F	; 127
     99e:	57 e4       	ldi	r21, 0x47	; 71
     9a0:	6d 81       	ldd	r22, Y+5	; 0x05
     9a2:	7e 81       	ldd	r23, Y+6	; 0x06
     9a4:	8f 81       	ldd	r24, Y+7	; 0x07
     9a6:	98 85       	ldd	r25, Y+8	; 0x08
     9a8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     9ac:	18 16       	cp	r1, r24
     9ae:	4c f5       	brge	.+82     	; 0xa02 <__stack+0x1a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e2       	ldi	r20, 0x20	; 32
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	69 81       	ldd	r22, Y+1	; 0x01
     9ba:	7a 81       	ldd	r23, Y+2	; 0x02
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9a 87       	std	Y+10, r25	; 0x0a
     9d6:	89 87       	std	Y+9, r24	; 0x09
     9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <__stack+0x199>
     9da:	89 e1       	ldi	r24, 0x19	; 25
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	9c 87       	std	Y+12, r25	; 0x0c
     9e0:	8b 87       	std	Y+11, r24	; 0x0b
     9e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <__stack+0x187>
     9ea:	9c 87       	std	Y+12, r25	; 0x0c
     9ec:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	9a 87       	std	Y+10, r25	; 0x0a
     9f6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f8:	89 85       	ldd	r24, Y+9	; 0x09
     9fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     9fc:	89 2b       	or	r24, r25
     9fe:	69 f7       	brne	.-38     	; 0x9da <__stack+0x17b>
    _delay_ms(1); /* Delay for processing (Th = 13ns) */
}
     a00:	14 c0       	rjmp	.+40     	; 0xa2a <__stack+0x1cb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a02:	6d 81       	ldd	r22, Y+5	; 0x05
     a04:	7e 81       	ldd	r23, Y+6	; 0x06
     a06:	8f 81       	ldd	r24, Y+7	; 0x07
     a08:	98 85       	ldd	r25, Y+8	; 0x08
     a0a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	9a 87       	std	Y+10, r25	; 0x0a
     a14:	89 87       	std	Y+9, r24	; 0x09
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1a:	9e 87       	std	Y+14, r25	; 0x0e
     a1c:	8d 87       	std	Y+13, r24	; 0x0d
     a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a20:	9e 85       	ldd	r25, Y+14	; 0x0e
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <__stack+0x1c3>
     a26:	9e 87       	std	Y+14, r25	; 0x0e
     a28:	8d 87       	std	Y+13, r24	; 0x0d
     a2a:	00 00       	nop
     a2c:	e9 96       	adiw	r28, 0x39	; 57
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <LCD_displayCharacter>:
 *
 * Parameters:
 * - data: Character to be displayed.
 */
void LCD_displayCharacter(uint8 data)
{
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	e9 97       	sbiw	r28, 0x39	; 57
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	89 af       	std	Y+57, r24	; 0x39
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 e8       	ldi	r26, 0x80	; 128
     a64:	bf e3       	ldi	r27, 0x3F	; 63
     a66:	8b a7       	std	Y+43, r24	; 0x2b
     a68:	9c a7       	std	Y+44, r25	; 0x2c
     a6a:	ad a7       	std	Y+45, r26	; 0x2d
     a6c:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	4a e7       	ldi	r20, 0x7A	; 122
     a74:	53 e4       	ldi	r21, 0x43	; 67
     a76:	6b a5       	ldd	r22, Y+43	; 0x2b
     a78:	7c a5       	ldd	r23, Y+44	; 0x2c
     a7a:	8d a5       	ldd	r24, Y+45	; 0x2d
     a7c:	9e a5       	ldd	r25, Y+46	; 0x2e
     a7e:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	8f a7       	std	Y+47, r24	; 0x2f
     a88:	98 ab       	std	Y+48, r25	; 0x30
     a8a:	a9 ab       	std	Y+49, r26	; 0x31
     a8c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	6f a5       	ldd	r22, Y+47	; 0x2f
     a98:	78 a9       	ldd	r23, Y+48	; 0x30
     a9a:	89 a9       	ldd	r24, Y+49	; 0x31
     a9c:	9a a9       	ldd	r25, Y+50	; 0x32
     a9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	2c f4       	brge	.+10     	; 0xab0 <LCD_displayCharacter+0x72>
		__ticks = 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	9c ab       	std	Y+52, r25	; 0x34
     aac:	8b ab       	std	Y+51, r24	; 0x33
     aae:	3f c0       	rjmp	.+126    	; 0xb2e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f e7       	ldi	r20, 0x7F	; 127
     ab6:	57 e4       	ldi	r21, 0x47	; 71
     ab8:	6f a5       	ldd	r22, Y+47	; 0x2f
     aba:	78 a9       	ldd	r23, Y+48	; 0x30
     abc:	89 a9       	ldd	r24, Y+49	; 0x31
     abe:	9a a9       	ldd	r25, Y+50	; 0x32
     ac0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     ac4:	18 16       	cp	r1, r24
     ac6:	4c f5       	brge	.+82     	; 0xb1a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e2       	ldi	r20, 0x20	; 32
     ace:	51 e4       	ldi	r21, 0x41	; 65
     ad0:	6b a5       	ldd	r22, Y+43	; 0x2b
     ad2:	7c a5       	ldd	r23, Y+44	; 0x2c
     ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ad8:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	9c ab       	std	Y+52, r25	; 0x34
     aee:	8b ab       	std	Y+51, r24	; 0x33
     af0:	0f c0       	rjmp	.+30     	; 0xb10 <LCD_displayCharacter+0xd2>
     af2:	89 e1       	ldi	r24, 0x19	; 25
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	9e ab       	std	Y+54, r25	; 0x36
     af8:	8d ab       	std	Y+53, r24	; 0x35
     afa:	8d a9       	ldd	r24, Y+53	; 0x35
     afc:	9e a9       	ldd	r25, Y+54	; 0x36
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <LCD_displayCharacter+0xc0>
     b02:	9e ab       	std	Y+54, r25	; 0x36
     b04:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b06:	8b a9       	ldd	r24, Y+51	; 0x33
     b08:	9c a9       	ldd	r25, Y+52	; 0x34
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	9c ab       	std	Y+52, r25	; 0x34
     b0e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b10:	8b a9       	ldd	r24, Y+51	; 0x33
     b12:	9c a9       	ldd	r25, Y+52	; 0x34
     b14:	89 2b       	or	r24, r25
     b16:	69 f7       	brne	.-38     	; 0xaf2 <LCD_displayCharacter+0xb4>
     b18:	14 c0       	rjmp	.+40     	; 0xb42 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b1a:	6f a5       	ldd	r22, Y+47	; 0x2f
     b1c:	78 a9       	ldd	r23, Y+48	; 0x30
     b1e:	89 a9       	ldd	r24, Y+49	; 0x31
     b20:	9a a9       	ldd	r25, Y+50	; 0x32
     b22:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	9c ab       	std	Y+52, r25	; 0x34
     b2c:	8b ab       	std	Y+51, r24	; 0x33
     b2e:	8b a9       	ldd	r24, Y+51	; 0x33
     b30:	9c a9       	ldd	r25, Y+52	; 0x34
     b32:	98 af       	std	Y+56, r25	; 0x38
     b34:	8f ab       	std	Y+55, r24	; 0x37
     b36:	8f a9       	ldd	r24, Y+55	; 0x37
     b38:	98 ad       	ldd	r25, Y+56	; 0x38
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <LCD_displayCharacter+0xfc>
     b3e:	98 af       	std	Y+56, r25	; 0x38
     b40:	8f ab       	std	Y+55, r24	; 0x37
    _delay_ms(1); /* Delay for processing (Tas = 50ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e8       	ldi	r26, 0x80	; 128
     b52:	bf e3       	ldi	r27, 0x3F	; 63
     b54:	8d 8f       	std	Y+29, r24	; 0x1d
     b56:	9e 8f       	std	Y+30, r25	; 0x1e
     b58:	af 8f       	std	Y+31, r26	; 0x1f
     b5a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	4a e7       	ldi	r20, 0x7A	; 122
     b62:	53 e4       	ldi	r21, 0x43	; 67
     b64:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b66:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b68:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b6a:	98 a1       	ldd	r25, Y+32	; 0x20
     b6c:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	89 a3       	std	Y+33, r24	; 0x21
     b76:	9a a3       	std	Y+34, r25	; 0x22
     b78:	ab a3       	std	Y+35, r26	; 0x23
     b7a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e8       	ldi	r20, 0x80	; 128
     b82:	5f e3       	ldi	r21, 0x3F	; 63
     b84:	69 a1       	ldd	r22, Y+33	; 0x21
     b86:	7a a1       	ldd	r23, Y+34	; 0x22
     b88:	8b a1       	ldd	r24, Y+35	; 0x23
     b8a:	9c a1       	ldd	r25, Y+36	; 0x24
     b8c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     b90:	88 23       	and	r24, r24
     b92:	2c f4       	brge	.+10     	; 0xb9e <LCD_displayCharacter+0x160>
		__ticks = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	9e a3       	std	Y+38, r25	; 0x26
     b9a:	8d a3       	std	Y+37, r24	; 0x25
     b9c:	3f c0       	rjmp	.+126    	; 0xc1c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	3f ef       	ldi	r19, 0xFF	; 255
     ba2:	4f e7       	ldi	r20, 0x7F	; 127
     ba4:	57 e4       	ldi	r21, 0x47	; 71
     ba6:	69 a1       	ldd	r22, Y+33	; 0x21
     ba8:	7a a1       	ldd	r23, Y+34	; 0x22
     baa:	8b a1       	ldd	r24, Y+35	; 0x23
     bac:	9c a1       	ldd	r25, Y+36	; 0x24
     bae:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	4c f5       	brge	.+82     	; 0xc08 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e2       	ldi	r20, 0x20	; 32
     bbc:	51 e4       	ldi	r21, 0x41	; 65
     bbe:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bc0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bc4:	98 a1       	ldd	r25, Y+32	; 0x20
     bc6:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	9e a3       	std	Y+38, r25	; 0x26
     bdc:	8d a3       	std	Y+37, r24	; 0x25
     bde:	0f c0       	rjmp	.+30     	; 0xbfe <LCD_displayCharacter+0x1c0>
     be0:	89 e1       	ldi	r24, 0x19	; 25
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	98 a7       	std	Y+40, r25	; 0x28
     be6:	8f a3       	std	Y+39, r24	; 0x27
     be8:	8f a1       	ldd	r24, Y+39	; 0x27
     bea:	98 a5       	ldd	r25, Y+40	; 0x28
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <LCD_displayCharacter+0x1ae>
     bf0:	98 a7       	std	Y+40, r25	; 0x28
     bf2:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf4:	8d a1       	ldd	r24, Y+37	; 0x25
     bf6:	9e a1       	ldd	r25, Y+38	; 0x26
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	9e a3       	std	Y+38, r25	; 0x26
     bfc:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfe:	8d a1       	ldd	r24, Y+37	; 0x25
     c00:	9e a1       	ldd	r25, Y+38	; 0x26
     c02:	89 2b       	or	r24, r25
     c04:	69 f7       	brne	.-38     	; 0xbe0 <LCD_displayCharacter+0x1a2>
     c06:	14 c0       	rjmp	.+40     	; 0xc30 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c08:	69 a1       	ldd	r22, Y+33	; 0x21
     c0a:	7a a1       	ldd	r23, Y+34	; 0x22
     c0c:	8b a1       	ldd	r24, Y+35	; 0x23
     c0e:	9c a1       	ldd	r25, Y+36	; 0x24
     c10:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9e a3       	std	Y+38, r25	; 0x26
     c1a:	8d a3       	std	Y+37, r24	; 0x25
     c1c:	8d a1       	ldd	r24, Y+37	; 0x25
     c1e:	9e a1       	ldd	r25, Y+38	; 0x26
     c20:	9a a7       	std	Y+42, r25	; 0x2a
     c22:	89 a7       	std	Y+41, r24	; 0x29
     c24:	89 a5       	ldd	r24, Y+41	; 0x29
     c26:	9a a5       	ldd	r25, Y+42	; 0x2a
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <LCD_displayCharacter+0x1ea>
     c2c:	9a a7       	std	Y+42, r25	; 0x2a
     c2e:	89 a7       	std	Y+41, r24	; 0x29
    _delay_ms(1); /* Delay for processing (Tpw - Tdws = 190ns) */
    GPIO_writePort(LCD_DATA_PORT_ID, data); /* Output data to data bus (D0 --> D7) */
     c30:	69 ad       	ldd	r22, Y+57	; 0x39
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	0e 94 14 02 	call	0x428	; 0x428 <GPIO_writePort>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a0 e8       	ldi	r26, 0x80	; 128
     c3e:	bf e3       	ldi	r27, 0x3F	; 63
     c40:	8f 87       	std	Y+15, r24	; 0x0f
     c42:	98 8b       	std	Y+16, r25	; 0x10
     c44:	a9 8b       	std	Y+17, r26	; 0x11
     c46:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	4a e7       	ldi	r20, 0x7A	; 122
     c4e:	53 e4       	ldi	r21, 0x43	; 67
     c50:	6f 85       	ldd	r22, Y+15	; 0x0f
     c52:	78 89       	ldd	r23, Y+16	; 0x10
     c54:	89 89       	ldd	r24, Y+17	; 0x11
     c56:	9a 89       	ldd	r25, Y+18	; 0x12
     c58:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8b 8b       	std	Y+19, r24	; 0x13
     c62:	9c 8b       	std	Y+20, r25	; 0x14
     c64:	ad 8b       	std	Y+21, r26	; 0x15
     c66:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5f e3       	ldi	r21, 0x3F	; 63
     c70:	6b 89       	ldd	r22, Y+19	; 0x13
     c72:	7c 89       	ldd	r23, Y+20	; 0x14
     c74:	8d 89       	ldd	r24, Y+21	; 0x15
     c76:	9e 89       	ldd	r25, Y+22	; 0x16
     c78:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	2c f4       	brge	.+10     	; 0xc8a <LCD_displayCharacter+0x24c>
		__ticks = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	98 8f       	std	Y+24, r25	; 0x18
     c86:	8f 8b       	std	Y+23, r24	; 0x17
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	6b 89       	ldd	r22, Y+19	; 0x13
     c94:	7c 89       	ldd	r23, Y+20	; 0x14
     c96:	8d 89       	ldd	r24, Y+21	; 0x15
     c98:	9e 89       	ldd	r25, Y+22	; 0x16
     c9a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	4c f5       	brge	.+82     	; 0xcf4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e2       	ldi	r20, 0x20	; 32
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	6f 85       	ldd	r22, Y+15	; 0x0f
     cac:	78 89       	ldd	r23, Y+16	; 0x10
     cae:	89 89       	ldd	r24, Y+17	; 0x11
     cb0:	9a 89       	ldd	r25, Y+18	; 0x12
     cb2:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	98 8f       	std	Y+24, r25	; 0x18
     cc8:	8f 8b       	std	Y+23, r24	; 0x17
     cca:	0f c0       	rjmp	.+30     	; 0xcea <LCD_displayCharacter+0x2ac>
     ccc:	89 e1       	ldi	r24, 0x19	; 25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	89 8f       	std	Y+25, r24	; 0x19
     cd4:	89 8d       	ldd	r24, Y+25	; 0x19
     cd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <LCD_displayCharacter+0x29a>
     cdc:	9a 8f       	std	Y+26, r25	; 0x1a
     cde:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce0:	8f 89       	ldd	r24, Y+23	; 0x17
     ce2:	98 8d       	ldd	r25, Y+24	; 0x18
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	98 8f       	std	Y+24, r25	; 0x18
     ce8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	89 2b       	or	r24, r25
     cf0:	69 f7       	brne	.-38     	; 0xccc <LCD_displayCharacter+0x28e>
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf4:	6b 89       	ldd	r22, Y+19	; 0x13
     cf6:	7c 89       	ldd	r23, Y+20	; 0x14
     cf8:	8d 89       	ldd	r24, Y+21	; 0x15
     cfa:	9e 89       	ldd	r25, Y+22	; 0x16
     cfc:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	98 8f       	std	Y+24, r25	; 0x18
     d06:	8f 8b       	std	Y+23, r24	; 0x17
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	9c 8f       	std	Y+28, r25	; 0x1c
     d0e:	8b 8f       	std	Y+27, r24	; 0x1b
     d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_displayCharacter+0x2d6>
     d18:	9c 8f       	std	Y+28, r25	; 0x1c
     d1a:	8b 8f       	std	Y+27, r24	; 0x1b
    _delay_ms(1); /* Delay for processing (Tdsw = 100ns) */
    GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e8       	ldi	r26, 0x80	; 128
     d2c:	bf e3       	ldi	r27, 0x3F	; 63
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	ab 83       	std	Y+3, r26	; 0x03
     d34:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	4a e7       	ldi	r20, 0x7A	; 122
     d3c:	53 e4       	ldi	r21, 0x43	; 67
     d3e:	69 81       	ldd	r22, Y+1	; 0x01
     d40:	7a 81       	ldd	r23, Y+2	; 0x02
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	af 83       	std	Y+7, r26	; 0x07
     d54:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	2c f4       	brge	.+10     	; 0xd78 <LCD_displayCharacter+0x33a>
		__ticks = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9a 87       	std	Y+10, r25	; 0x0a
     d74:	89 87       	std	Y+9, r24	; 0x09
     d76:	3f c0       	rjmp	.+126    	; 0xdf6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	3f ef       	ldi	r19, 0xFF	; 255
     d7c:	4f e7       	ldi	r20, 0x7F	; 127
     d7e:	57 e4       	ldi	r21, 0x47	; 71
     d80:	6d 81       	ldd	r22, Y+5	; 0x05
     d82:	7e 81       	ldd	r23, Y+6	; 0x06
     d84:	8f 81       	ldd	r24, Y+7	; 0x07
     d86:	98 85       	ldd	r25, Y+8	; 0x08
     d88:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     d8c:	18 16       	cp	r1, r24
     d8e:	4c f5       	brge	.+82     	; 0xde2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e2       	ldi	r20, 0x20	; 32
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	69 81       	ldd	r22, Y+1	; 0x01
     d9a:	7a 81       	ldd	r23, Y+2	; 0x02
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	9a 87       	std	Y+10, r25	; 0x0a
     db6:	89 87       	std	Y+9, r24	; 0x09
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <LCD_displayCharacter+0x39a>
     dba:	89 e1       	ldi	r24, 0x19	; 25
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	8b 87       	std	Y+11, r24	; 0x0b
     dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCD_displayCharacter+0x388>
     dca:	9c 87       	std	Y+12, r25	; 0x0c
     dcc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	9a 87       	std	Y+10, r25	; 0x0a
     dd6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	89 2b       	or	r24, r25
     dde:	69 f7       	brne	.-38     	; 0xdba <LCD_displayCharacter+0x37c>
    _delay_ms(1); /* Delay for processing (Th = 13ns) */
}
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de2:	6d 81       	ldd	r22, Y+5	; 0x05
     de4:	7e 81       	ldd	r23, Y+6	; 0x06
     de6:	8f 81       	ldd	r24, Y+7	; 0x07
     de8:	98 85       	ldd	r25, Y+8	; 0x08
     dea:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	9a 87       	std	Y+10, r25	; 0x0a
     df4:	89 87       	std	Y+9, r24	; 0x09
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	9e 87       	std	Y+14, r25	; 0x0e
     dfc:	8d 87       	std	Y+13, r24	; 0x0d
     dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     e00:	9e 85       	ldd	r25, Y+14	; 0x0e
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LCD_displayCharacter+0x3c4>
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
     e0a:	00 00       	nop
     e0c:	e9 96       	adiw	r28, 0x39	; 57
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <LCD_displayString>:
 *
 * Parameters:
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	00 d0       	rcall	.+0      	; 0xe24 <LCD_displayString+0x6>
     e24:	1f 92       	push	r1
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	9b 83       	std	Y+3, r25	; 0x03
     e2c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
     e2e:	19 82       	std	Y+1, r1	; 0x01
    while (Str[i] != '\0')
     e30:	0e c0       	rjmp	.+28     	; 0xe4e <LCD_displayString+0x30>
    {
        LCD_displayCharacter(Str[i]);
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	2a 81       	ldd	r18, Y+2	; 0x02
     e3a:	3b 81       	ldd	r19, Y+3	; 0x03
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	fc 01       	movw	r30, r24
     e42:	80 81       	ld	r24, Z
     e44:	0e 94 1f 05 	call	0xa3e	; 0xa3e <LCD_displayCharacter>
        i++;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	89 83       	std	Y+1, r24	; 0x01
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayString(const char *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	2a 81       	ldd	r18, Y+2	; 0x02
     e56:	3b 81       	ldd	r19, Y+3	; 0x03
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	88 23       	and	r24, r24
     e62:	39 f7       	brne	.-50     	; 0xe32 <LCD_displayString+0x14>
    {
        LCD_displayCharacter(Str[i]);
        i++;
    }
}
     e64:	00 00       	nop
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <LCD_moveCursor>:
 * Parameters:
 * - row: Row index (0 to 1 for a 2-line display).
 * - col: Column index (0 to 15 for a 16-column display).
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <LCD_moveCursor+0x6>
     e78:	1f 92       	push	r1
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	6b 83       	std	Y+3, r22	; 0x03
    uint8 lcd_memory_address;

    switch(row)
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	19 f0       	breq	.+6      	; 0xe92 <LCD_moveCursor+0x20>
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	21 f0       	breq	.+8      	; 0xe98 <LCD_moveCursor+0x26>
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <LCD_moveCursor+0x2e>
    {
        case 0:
            lcd_memory_address = col;
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	89 83       	std	Y+1, r24	; 0x01
            break;
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <LCD_moveCursor+0x2e>
        case 1:
            lcd_memory_address = col + 0x40;
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	80 5c       	subi	r24, 0xC0	; 192
     e9c:	89 83       	std	Y+1, r24	; 0x01
            break;
     e9e:	00 00       	nop
        /* Add cases for additional rows if needed */
    }

    LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_sendCommand>
}
     ea8:	00 00       	nop
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <LCD_displayStringRowColumn>:
 * - row: Row index (0 to 1 for a 2-line display).
 * - col: Column index (0 to 15 for a 16-column display).
 * - Str: Pointer to the string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	00 d0       	rcall	.+0      	; 0xebc <LCD_displayStringRowColumn+0x6>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <LCD_displayStringRowColumn+0x8>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	5c 83       	std	Y+4, r21	; 0x04
     ec8:	4b 83       	std	Y+3, r20	; 0x03
    LCD_moveCursor(row, col); /* Move cursor to specified position */
     eca:	6a 81       	ldd	r22, Y+2	; 0x02
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_moveCursor>
    LCD_displayString(Str); /* Display the string */
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_displayString>
}
     eda:	00 00       	nop
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <LCD_intgerToString>:
 *
 * Parameters:
 * - data: Integer value to be converted and displayed.
 */
void LCD_intgerToString(int data)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	66 97       	sbiw	r28, 0x16	; 22
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9e 8b       	std	Y+22, r25	; 0x16
     f00:	8d 8b       	std	Y+21, r24	; 0x15
	char buff[20]; /* String to hold the ascii result */
	itoa(data,buff,10);
     f02:	8d 89       	ldd	r24, Y+21	; 0x15
     f04:	9e 89       	ldd	r25, Y+22	; 0x16
     f06:	4a e0       	ldi	r20, 0x0A	; 10
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	9e 01       	movw	r18, r28
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	b9 01       	movw	r22, r18
     f12:	0e 94 1c 0b 	call	0x1638	; 0x1638 <itoa>
	LCD_displayString(buff); /* Display the string */
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_displayString>
}
     f1e:	00 00       	nop
     f20:	66 96       	adiw	r28, 0x16	; 22
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	08 95       	ret

00000f32 <LCD_clearScreen>:
/*
 * Description:
 * Clears the LCD screen by sending the clear display command.
 */
void LCD_clearScreen(void)
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_sendCommand>
}
     f40:	00 00       	nop
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <LM35_getTemperature>:
 *
 * Returns:
 * - Calculated temperature value in degrees Celsius (uint8).
 */
uint8 LM35_getTemperature(void)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	61 97       	sbiw	r28, 0x11	; 17
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
    uint8 temp_value = 0;
     f5c:	19 82       	std	Y+1, r1	; 0x01

    /* Read ADC channel where the LM35 temperature sensor is connected */
    uint16 adcResult = ADC_readChannel(SENSOR_CHANNEL_ID);
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	0e 94 80 00 	call	0x100	; 0x100 <ADC_readChannel>
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 ea       	ldi	r26, 0xA0	; 160
     f6e:	b0 e4       	ldi	r27, 0x40	; 64
     f70:	8c 83       	std	Y+4, r24	; 0x04
     f72:	9d 83       	std	Y+5, r25	; 0x05
     f74:	ae 83       	std	Y+6, r26	; 0x06
     f76:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a e7       	ldi	r20, 0x7A	; 122
     f7e:	53 e4       	ldi	r21, 0x43	; 67
     f80:	6c 81       	ldd	r22, Y+4	; 0x04
     f82:	7d 81       	ldd	r23, Y+5	; 0x05
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	88 87       	std	Y+8, r24	; 0x08
     f92:	99 87       	std	Y+9, r25	; 0x09
     f94:	aa 87       	std	Y+10, r26	; 0x0a
     f96:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	68 85       	ldd	r22, Y+8	; 0x08
     fa2:	79 85       	ldd	r23, Y+9	; 0x09
     fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__cmpsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <LM35_getTemperature+0x72>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9d 87       	std	Y+13, r25	; 0x0d
     fb6:	8c 87       	std	Y+12, r24	; 0x0c
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <LM35_getTemperature+0xf0>
	else if (__tmp > 65535)
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	68 85       	ldd	r22, Y+8	; 0x08
     fc4:	79 85       	ldd	r23, Y+9	; 0x09
     fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fca:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__gesf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <LM35_getTemperature+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	6c 81       	ldd	r22, Y+4	; 0x04
     fdc:	7d 81       	ldd	r23, Y+5	; 0x05
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	9f 81       	ldd	r25, Y+7	; 0x07
     fe2:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9d 87       	std	Y+13, r25	; 0x0d
     ff8:	8c 87       	std	Y+12, r24	; 0x0c
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <LM35_getTemperature+0xd2>
     ffc:	89 e1       	ldi	r24, 0x19	; 25
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9f 87       	std	Y+15, r25	; 0x0f
    1002:	8e 87       	std	Y+14, r24	; 0x0e
    1004:	8e 85       	ldd	r24, Y+14	; 0x0e
    1006:	9f 85       	ldd	r25, Y+15	; 0x0f
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LM35_getTemperature+0xc0>
    100c:	9f 87       	std	Y+15, r25	; 0x0f
    100e:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8c 85       	ldd	r24, Y+12	; 0x0c
    1012:	9d 85       	ldd	r25, Y+13	; 0x0d
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9d 87       	std	Y+13, r25	; 0x0d
    1018:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8c 85       	ldd	r24, Y+12	; 0x0c
    101c:	9d 85       	ldd	r25, Y+13	; 0x0d
    101e:	89 2b       	or	r24, r25
    1020:	69 f7       	brne	.-38     	; 0xffc <LM35_getTemperature+0xb4>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <LM35_getTemperature+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	68 85       	ldd	r22, Y+8	; 0x08
    1026:	79 85       	ldd	r23, Y+9	; 0x09
    1028:	8a 85       	ldd	r24, Y+10	; 0x0a
    102a:	9b 85       	ldd	r25, Y+11	; 0x0b
    102c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9d 87       	std	Y+13, r25	; 0x0d
    1036:	8c 87       	std	Y+12, r24	; 0x0c
    1038:	8c 85       	ldd	r24, Y+12	; 0x0c
    103a:	9d 85       	ldd	r25, Y+13	; 0x0d
    103c:	99 8b       	std	Y+17, r25	; 0x11
    103e:	88 8b       	std	Y+16, r24	; 0x10
    1040:	88 89       	ldd	r24, Y+16	; 0x10
    1042:	99 89       	ldd	r25, Y+17	; 0x11
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <LM35_getTemperature+0xfc>
    1048:	99 8b       	std	Y+17, r25	; 0x11
    104a:	88 8b       	std	Y+16, r24	; 0x10

    /* Delay to ensure ADC result is updated (assuming synchronous ADC read) */
    _delay_ms(5);

    /* Calculate the temperature from the ADC value */
    temp_value = (uint8)(((uint32)adcResult * SENSOR_MAX_TEMPERATURE * ADC_REF_VOLT_VALUE) /
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	9c 01       	movw	r18, r24
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	86 e9       	ldi	r24, 0x96	; 150
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	dc 01       	movw	r26, r24
    105c:	0e 94 47 09 	call	0x128e	; 0x128e <__muluhisi3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__floatunsisf>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	2a e0       	ldi	r18, 0x0A	; 10
    1072:	37 ed       	ldi	r19, 0xD7	; 215
    1074:	43 e2       	ldi	r20, 0x23	; 35
    1076:	50 e4       	ldi	r21, 0x40	; 64
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 af 0a 	call	0x155e	; 0x155e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 ed       	ldi	r19, 0xD0	; 208
    1088:	4f eb       	ldi	r20, 0xBF	; 191
    108a:	54 e4       	ldi	r21, 0x44	; 68
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 57 09 	call	0x12ae	; 0x12ae <__divsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	89 83       	std	Y+1, r24	; 0x01
                         (ADC_MAXIMUM_VALUE * SENSOR_MAX_VOLT_VALUE));

    return temp_value;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a8:	61 96       	adiw	r28, 0x11	; 17
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <DCMOTOR_Init>:
 */

#include "motor.h"

void DCMOTOR_Init(void)
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	/* Setup Direction for IN1 and IN2 to be Output pins */
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,PIN_OUTPUT);
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,PIN_OUTPUT);
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_setupPinDirection>

	/* Stop the Motor initially */
	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
}
    10ea:	00 00       	nop
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <DCMOTOR_Rotate>:



/*Setup the direction of rotation of the motor*/
void DCMOTOR_Rotate(MOTOR_STATE state, uint8 speed)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <DCMOTOR_Rotate+0x6>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	81 f0       	breq	.+32     	; 0x112c <DCMOTOR_Rotate+0x3a>
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	91 05       	cpc	r25, r1
    1110:	c1 f0       	breq	.+48     	; 0x1142 <DCMOTOR_Rotate+0x50>
    1112:	89 2b       	or	r24, r25
    1114:	09 f5       	brne	.+66     	; 0x1158 <DCMOTOR_Rotate+0x66>
	{
		case STOP:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			break;
    112a:	16 c0       	rjmp	.+44     	; 0x1158 <DCMOTOR_Rotate+0x66>
		case CW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_HIGH);
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			break;
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <DCMOTOR_Rotate+0x66>
		case ACW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_HIGH);
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <GPIO_writePin>
			break;
    1156:	00 00       	nop
	}
	PWM_Timer0_Start(speed);
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_Timer0_Start>
}
    115e:	00 00       	nop
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <main>:
#include "./HAL/lm35.h"
#include "./HAL/motor.h"


int main(void)
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	00 d0       	rcall	.+0      	; 0x1170 <main+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <main+0x8>
    1172:	1f 92       	push	r1
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    /* Initialize variables for temperature, fan speed, and motor state */
    uint8 temperature = 0, speed = 0, motor_state = STOP;
    1178:	1b 82       	std	Y+3, r1	; 0x03
    117a:	19 82       	std	Y+1, r1	; 0x01
    117c:	1a 82       	std	Y+2, r1	; 0x02

    /* Configuration for ADC (Analog-to-Digital Converter) */
    ADC_ConfigType ADC_Config = {INTERNAL, F_CPU_8};
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	8c 83       	std	Y+4, r24	; 0x04
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	8d 83       	std	Y+5, r24	; 0x05

    /* Initialize LCD display, ADC module, and DC motor control */
    LCD_init();
    1186:	0e 94 92 02 	call	0x524	; 0x524 <LCD_init>
    ADC_init(&ADC_Config);
    118a:	ce 01       	movw	r24, r28
    118c:	04 96       	adiw	r24, 0x04	; 4
    118e:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
    DCMOTOR_Init();
    1192:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DCMOTOR_Init>

    /* Display initial status messages on the LCD */
    LCD_displayStringRowColumn(0, 4, "FAN is ");
    1196:	49 e7       	ldi	r20, 0x79	; 121
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
    LCD_displayStringRowColumn(1, 3, "Temp = ");
    11a2:	41 e8       	ldi	r20, 0x81	; 129
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	63 e0       	ldi	r22, 0x03	; 3
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>

    /* Main loop to continuously monitor temperature and control fan */
    while (1)
    {
        /* Read temperature from LM35 temperature sensor */
        temperature = LM35_getTemperature();
    11ae:	0e 94 a4 07 	call	0xf48	; 0xf48 <LM35_getTemperature>
    11b2:	8b 83       	std	Y+3, r24	; 0x03

        /* Display current temperature on LCD */
        LCD_moveCursor(1, 10);
    11b4:	6a e0       	ldi	r22, 0x0A	; 10
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_moveCursor>
        LCD_intgerToString(temperature);
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 75 07 	call	0xeea	; 0xeea <LCD_intgerToString>

        /* Clear any extra characters if temperature is less than 100 */
        if (temperature < 100)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	84 36       	cpi	r24, 0x64	; 100
    11ca:	20 f4       	brcc	.+8      	; 0x11d4 <main+0x6a>
        {
            LCD_displayString(" ");
    11cc:	89 e8       	ldi	r24, 0x89	; 137
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_displayString>
        }

        /* Display Celsius symbol next to the temperature */
        LCD_displayStringRowColumn(1, 14, "C");
    11d4:	4b e8       	ldi	r20, 0x8B	; 139
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	6e e0       	ldi	r22, 0x0E	; 14
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>

        /* Adjust fan speed and motor state based on temperature thresholds */
        if (temperature >= 120)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 37       	cpi	r24, 0x78	; 120
    11e4:	58 f0       	brcs	.+22     	; 0x11fc <main+0x92>
        {
            speed = 100;
    11e6:	84 e6       	ldi	r24, 0x64	; 100
    11e8:	89 83       	std	Y+1, r24	; 0x01
            motor_state = CW;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	8a 83       	std	Y+2, r24	; 0x02
            LCD_displayStringRowColumn(0, 10, " ON "); // Display "ON" status on LCD
    11ee:	4d e8       	ldi	r20, 0x8D	; 141
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	6a e0       	ldi	r22, 0x0A	; 10
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
    11fa:	35 c0       	rjmp	.+106    	; 0x1266 <main+0xfc>
        }
        else if (temperature >= 90)
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	8a 35       	cpi	r24, 0x5A	; 90
    1200:	58 f0       	brcs	.+22     	; 0x1218 <main+0xae>
        {
            speed = 75;
    1202:	8b e4       	ldi	r24, 0x4B	; 75
    1204:	89 83       	std	Y+1, r24	; 0x01
            motor_state = CW;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	8a 83       	std	Y+2, r24	; 0x02
            LCD_displayStringRowColumn(0, 10, " ON "); // Display "ON" status on LCD
    120a:	4d e8       	ldi	r20, 0x8D	; 141
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	6a e0       	ldi	r22, 0x0A	; 10
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
    1216:	27 c0       	rjmp	.+78     	; 0x1266 <main+0xfc>
        }
        else if (temperature >= 60)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	8c 33       	cpi	r24, 0x3C	; 60
    121c:	58 f0       	brcs	.+22     	; 0x1234 <main+0xca>
        {
            speed = 50;
    121e:	82 e3       	ldi	r24, 0x32	; 50
    1220:	89 83       	std	Y+1, r24	; 0x01
            motor_state = CW;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	8a 83       	std	Y+2, r24	; 0x02
            LCD_displayStringRowColumn(0, 10, " ON "); // Display "ON" status on LCD
    1226:	4d e8       	ldi	r20, 0x8D	; 141
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	6a e0       	ldi	r22, 0x0A	; 10
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
    1232:	19 c0       	rjmp	.+50     	; 0x1266 <main+0xfc>
        }
        else if (temperature >= 30)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	8e 31       	cpi	r24, 0x1E	; 30
    1238:	58 f0       	brcs	.+22     	; 0x1250 <main+0xe6>
        {
            speed = 25;
    123a:	89 e1       	ldi	r24, 0x19	; 25
    123c:	89 83       	std	Y+1, r24	; 0x01
            motor_state = CW;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 83       	std	Y+2, r24	; 0x02
            LCD_displayStringRowColumn(0, 10, " ON "); // Display "ON" status on LCD
    1242:	4d e8       	ldi	r20, 0x8D	; 141
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	6a e0       	ldi	r22, 0x0A	; 10
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
    124e:	0b c0       	rjmp	.+22     	; 0x1266 <main+0xfc>
        }
        else if (temperature < 30)
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	8e 31       	cpi	r24, 0x1E	; 30
    1254:	40 f4       	brcc	.+16     	; 0x1266 <main+0xfc>
        {
            speed = 0;
    1256:	19 82       	std	Y+1, r1	; 0x01
            motor_state = STOP;
    1258:	1a 82       	std	Y+2, r1	; 0x02
            LCD_displayStringRowColumn(0, 10, " OFF"); // Display "OFF" status on LCD
    125a:	42 e9       	ldi	r20, 0x92	; 146
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	6a e0       	ldi	r22, 0x0A	; 10
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <LCD_displayStringRowColumn>
        }

        /* Control DC motor rotation based on calculated speed and state */
        DCMOTOR_Rotate(motor_state, speed);
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <DCMOTOR_Rotate>

    /* Main loop to continuously monitor temperature and control fan */
    while (1)
    {
        /* Read temperature from LM35 temperature sensor */
        temperature = LM35_getTemperature();
    126e:	9f cf       	rjmp	.-194    	; 0x11ae <main+0x44>

00001270 <__umulhisi3>:
    1270:	a2 9f       	mul	r26, r18
    1272:	b0 01       	movw	r22, r0
    1274:	b3 9f       	mul	r27, r19
    1276:	c0 01       	movw	r24, r0
    1278:	a3 9f       	mul	r26, r19
    127a:	70 0d       	add	r23, r0
    127c:	81 1d       	adc	r24, r1
    127e:	11 24       	eor	r1, r1
    1280:	91 1d       	adc	r25, r1
    1282:	b2 9f       	mul	r27, r18
    1284:	70 0d       	add	r23, r0
    1286:	81 1d       	adc	r24, r1
    1288:	11 24       	eor	r1, r1
    128a:	91 1d       	adc	r25, r1
    128c:	08 95       	ret

0000128e <__muluhisi3>:
    128e:	0e 94 38 09 	call	0x1270	; 0x1270 <__umulhisi3>
    1292:	a5 9f       	mul	r26, r21
    1294:	90 0d       	add	r25, r0
    1296:	b4 9f       	mul	r27, r20
    1298:	90 0d       	add	r25, r0
    129a:	a4 9f       	mul	r26, r20
    129c:	80 0d       	add	r24, r0
    129e:	91 1d       	adc	r25, r1
    12a0:	11 24       	eor	r1, r1
    12a2:	08 95       	ret

000012a4 <__cmpsf2>:
    12a4:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_cmp>
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <__cmpsf2+0x8>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	08 95       	ret

000012ae <__divsf3>:
    12ae:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divsf3x>
    12b2:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__fp_round>
    12b6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_pscB>
    12ba:	58 f0       	brcs	.+22     	; 0x12d2 <__divsf3+0x24>
    12bc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscA>
    12c0:	40 f0       	brcs	.+16     	; 0x12d2 <__divsf3+0x24>
    12c2:	29 f4       	brne	.+10     	; 0x12ce <__divsf3+0x20>
    12c4:	5f 3f       	cpi	r21, 0xFF	; 255
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <__divsf3+0x24>
    12c8:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    12cc:	51 11       	cpse	r21, r1
    12ce:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_szero>
    12d2:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_nan>

000012d6 <__divsf3x>:
    12d6:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_split3>
    12da:	68 f3       	brcs	.-38     	; 0x12b6 <__divsf3+0x8>

000012dc <__divsf3_pse>:
    12dc:	99 23       	and	r25, r25
    12de:	b1 f3       	breq	.-20     	; 0x12cc <__divsf3+0x1e>
    12e0:	55 23       	and	r21, r21
    12e2:	91 f3       	breq	.-28     	; 0x12c8 <__divsf3+0x1a>
    12e4:	95 1b       	sub	r25, r21
    12e6:	55 0b       	sbc	r21, r21
    12e8:	bb 27       	eor	r27, r27
    12ea:	aa 27       	eor	r26, r26
    12ec:	62 17       	cp	r22, r18
    12ee:	73 07       	cpc	r23, r19
    12f0:	84 07       	cpc	r24, r20
    12f2:	38 f0       	brcs	.+14     	; 0x1302 <__divsf3_pse+0x26>
    12f4:	9f 5f       	subi	r25, 0xFF	; 255
    12f6:	5f 4f       	sbci	r21, 0xFF	; 255
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	44 1f       	adc	r20, r20
    12fe:	aa 1f       	adc	r26, r26
    1300:	a9 f3       	breq	.-22     	; 0x12ec <__divsf3_pse+0x10>
    1302:	35 d0       	rcall	.+106    	; 0x136e <__divsf3_pse+0x92>
    1304:	0e 2e       	mov	r0, r30
    1306:	3a f0       	brmi	.+14     	; 0x1316 <__divsf3_pse+0x3a>
    1308:	e0 e8       	ldi	r30, 0x80	; 128
    130a:	32 d0       	rcall	.+100    	; 0x1370 <__divsf3_pse+0x94>
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	e6 95       	lsr	r30
    1312:	00 1c       	adc	r0, r0
    1314:	ca f7       	brpl	.-14     	; 0x1308 <__divsf3_pse+0x2c>
    1316:	2b d0       	rcall	.+86     	; 0x136e <__divsf3_pse+0x92>
    1318:	fe 2f       	mov	r31, r30
    131a:	29 d0       	rcall	.+82     	; 0x136e <__divsf3_pse+0x92>
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	bb 1f       	adc	r27, r27
    1324:	26 17       	cp	r18, r22
    1326:	37 07       	cpc	r19, r23
    1328:	48 07       	cpc	r20, r24
    132a:	ab 07       	cpc	r26, r27
    132c:	b0 e8       	ldi	r27, 0x80	; 128
    132e:	09 f0       	breq	.+2      	; 0x1332 <__divsf3_pse+0x56>
    1330:	bb 0b       	sbc	r27, r27
    1332:	80 2d       	mov	r24, r0
    1334:	bf 01       	movw	r22, r30
    1336:	ff 27       	eor	r31, r31
    1338:	93 58       	subi	r25, 0x83	; 131
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	3a f0       	brmi	.+14     	; 0x134c <__divsf3_pse+0x70>
    133e:	9e 3f       	cpi	r25, 0xFE	; 254
    1340:	51 05       	cpc	r21, r1
    1342:	78 f0       	brcs	.+30     	; 0x1362 <__divsf3_pse+0x86>
    1344:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    1348:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_szero>
    134c:	5f 3f       	cpi	r21, 0xFF	; 255
    134e:	e4 f3       	brlt	.-8      	; 0x1348 <__divsf3_pse+0x6c>
    1350:	98 3e       	cpi	r25, 0xE8	; 232
    1352:	d4 f3       	brlt	.-12     	; 0x1348 <__divsf3_pse+0x6c>
    1354:	86 95       	lsr	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b7 95       	ror	r27
    135c:	f7 95       	ror	r31
    135e:	9f 5f       	subi	r25, 0xFF	; 255
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__divsf3_pse+0x78>
    1362:	88 0f       	add	r24, r24
    1364:	91 1d       	adc	r25, r1
    1366:	96 95       	lsr	r25
    1368:	87 95       	ror	r24
    136a:	97 f9       	bld	r25, 7
    136c:	08 95       	ret
    136e:	e1 e0       	ldi	r30, 0x01	; 1
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	bb 1f       	adc	r27, r27
    1378:	62 17       	cp	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	ba 07       	cpc	r27, r26
    1380:	20 f0       	brcs	.+8      	; 0x138a <__divsf3_pse+0xae>
    1382:	62 1b       	sub	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	84 0b       	sbc	r24, r20
    1388:	ba 0b       	sbc	r27, r26
    138a:	ee 1f       	adc	r30, r30
    138c:	88 f7       	brcc	.-30     	; 0x1370 <__divsf3_pse+0x94>
    138e:	e0 95       	com	r30
    1390:	08 95       	ret

00001392 <__fixunssfsi>:
    1392:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_splitA>
    1396:	88 f0       	brcs	.+34     	; 0x13ba <__fixunssfsi+0x28>
    1398:	9f 57       	subi	r25, 0x7F	; 127
    139a:	98 f0       	brcs	.+38     	; 0x13c2 <__fixunssfsi+0x30>
    139c:	b9 2f       	mov	r27, r25
    139e:	99 27       	eor	r25, r25
    13a0:	b7 51       	subi	r27, 0x17	; 23
    13a2:	b0 f0       	brcs	.+44     	; 0x13d0 <__fixunssfsi+0x3e>
    13a4:	e1 f0       	breq	.+56     	; 0x13de <__fixunssfsi+0x4c>
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	88 1f       	adc	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	1a f0       	brmi	.+6      	; 0x13b6 <__fixunssfsi+0x24>
    13b0:	ba 95       	dec	r27
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <__fixunssfsi+0x14>
    13b4:	14 c0       	rjmp	.+40     	; 0x13de <__fixunssfsi+0x4c>
    13b6:	b1 30       	cpi	r27, 0x01	; 1
    13b8:	91 f0       	breq	.+36     	; 0x13de <__fixunssfsi+0x4c>
    13ba:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_zero>
    13be:	b1 e0       	ldi	r27, 0x01	; 1
    13c0:	08 95       	ret
    13c2:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_zero>
    13c6:	67 2f       	mov	r22, r23
    13c8:	78 2f       	mov	r23, r24
    13ca:	88 27       	eor	r24, r24
    13cc:	b8 5f       	subi	r27, 0xF8	; 248
    13ce:	39 f0       	breq	.+14     	; 0x13de <__fixunssfsi+0x4c>
    13d0:	b9 3f       	cpi	r27, 0xF9	; 249
    13d2:	cc f3       	brlt	.-14     	; 0x13c6 <__fixunssfsi+0x34>
    13d4:	86 95       	lsr	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	b3 95       	inc	r27
    13dc:	d9 f7       	brne	.-10     	; 0x13d4 <__fixunssfsi+0x42>
    13de:	3e f4       	brtc	.+14     	; 0x13ee <__fixunssfsi+0x5c>
    13e0:	90 95       	com	r25
    13e2:	80 95       	com	r24
    13e4:	70 95       	com	r23
    13e6:	61 95       	neg	r22
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__floatunsisf>:
    13f0:	e8 94       	clt
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <__floatsisf+0x12>

000013f4 <__floatsisf>:
    13f4:	97 fb       	bst	r25, 7
    13f6:	3e f4       	brtc	.+14     	; 0x1406 <__floatsisf+0x12>
    13f8:	90 95       	com	r25
    13fa:	80 95       	com	r24
    13fc:	70 95       	com	r23
    13fe:	61 95       	neg	r22
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	99 23       	and	r25, r25
    1408:	a9 f0       	breq	.+42     	; 0x1434 <__floatsisf+0x40>
    140a:	f9 2f       	mov	r31, r25
    140c:	96 e9       	ldi	r25, 0x96	; 150
    140e:	bb 27       	eor	r27, r27
    1410:	93 95       	inc	r25
    1412:	f6 95       	lsr	r31
    1414:	87 95       	ror	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b7 95       	ror	r27
    141c:	f1 11       	cpse	r31, r1
    141e:	f8 cf       	rjmp	.-16     	; 0x1410 <__floatsisf+0x1c>
    1420:	fa f4       	brpl	.+62     	; 0x1460 <__floatsisf+0x6c>
    1422:	bb 0f       	add	r27, r27
    1424:	11 f4       	brne	.+4      	; 0x142a <__floatsisf+0x36>
    1426:	60 ff       	sbrs	r22, 0
    1428:	1b c0       	rjmp	.+54     	; 0x1460 <__floatsisf+0x6c>
    142a:	6f 5f       	subi	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	8f 4f       	sbci	r24, 0xFF	; 255
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	16 c0       	rjmp	.+44     	; 0x1460 <__floatsisf+0x6c>
    1434:	88 23       	and	r24, r24
    1436:	11 f0       	breq	.+4      	; 0x143c <__floatsisf+0x48>
    1438:	96 e9       	ldi	r25, 0x96	; 150
    143a:	11 c0       	rjmp	.+34     	; 0x145e <__floatsisf+0x6a>
    143c:	77 23       	and	r23, r23
    143e:	21 f0       	breq	.+8      	; 0x1448 <__floatsisf+0x54>
    1440:	9e e8       	ldi	r25, 0x8E	; 142
    1442:	87 2f       	mov	r24, r23
    1444:	76 2f       	mov	r23, r22
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <__floatsisf+0x5e>
    1448:	66 23       	and	r22, r22
    144a:	71 f0       	breq	.+28     	; 0x1468 <__floatsisf+0x74>
    144c:	96 e8       	ldi	r25, 0x86	; 134
    144e:	86 2f       	mov	r24, r22
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	2a f0       	brmi	.+10     	; 0x1460 <__floatsisf+0x6c>
    1456:	9a 95       	dec	r25
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	da f7       	brpl	.-10     	; 0x1456 <__floatsisf+0x62>
    1460:	88 0f       	add	r24, r24
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	97 f9       	bld	r25, 7
    1468:	08 95       	ret

0000146a <__fp_cmp>:
    146a:	99 0f       	add	r25, r25
    146c:	00 08       	sbc	r0, r0
    146e:	55 0f       	add	r21, r21
    1470:	aa 0b       	sbc	r26, r26
    1472:	e0 e8       	ldi	r30, 0x80	; 128
    1474:	fe ef       	ldi	r31, 0xFE	; 254
    1476:	16 16       	cp	r1, r22
    1478:	17 06       	cpc	r1, r23
    147a:	e8 07       	cpc	r30, r24
    147c:	f9 07       	cpc	r31, r25
    147e:	c0 f0       	brcs	.+48     	; 0x14b0 <__fp_cmp+0x46>
    1480:	12 16       	cp	r1, r18
    1482:	13 06       	cpc	r1, r19
    1484:	e4 07       	cpc	r30, r20
    1486:	f5 07       	cpc	r31, r21
    1488:	98 f0       	brcs	.+38     	; 0x14b0 <__fp_cmp+0x46>
    148a:	62 1b       	sub	r22, r18
    148c:	73 0b       	sbc	r23, r19
    148e:	84 0b       	sbc	r24, r20
    1490:	95 0b       	sbc	r25, r21
    1492:	39 f4       	brne	.+14     	; 0x14a2 <__fp_cmp+0x38>
    1494:	0a 26       	eor	r0, r26
    1496:	61 f0       	breq	.+24     	; 0x14b0 <__fp_cmp+0x46>
    1498:	23 2b       	or	r18, r19
    149a:	24 2b       	or	r18, r20
    149c:	25 2b       	or	r18, r21
    149e:	21 f4       	brne	.+8      	; 0x14a8 <__fp_cmp+0x3e>
    14a0:	08 95       	ret
    14a2:	0a 26       	eor	r0, r26
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <__fp_cmp+0x3e>
    14a6:	a1 40       	sbci	r26, 0x01	; 1
    14a8:	a6 95       	lsr	r26
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	81 1d       	adc	r24, r1
    14ae:	81 1d       	adc	r24, r1
    14b0:	08 95       	ret

000014b2 <__fp_inf>:
    14b2:	97 f9       	bld	r25, 7
    14b4:	9f 67       	ori	r25, 0x7F	; 127
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	08 95       	ret

000014be <__fp_nan>:
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	08 95       	ret

000014c4 <__fp_pscA>:
    14c4:	00 24       	eor	r0, r0
    14c6:	0a 94       	dec	r0
    14c8:	16 16       	cp	r1, r22
    14ca:	17 06       	cpc	r1, r23
    14cc:	18 06       	cpc	r1, r24
    14ce:	09 06       	cpc	r0, r25
    14d0:	08 95       	ret

000014d2 <__fp_pscB>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	14 06       	cpc	r1, r20
    14dc:	05 06       	cpc	r0, r21
    14de:	08 95       	ret

000014e0 <__fp_round>:
    14e0:	09 2e       	mov	r0, r25
    14e2:	03 94       	inc	r0
    14e4:	00 0c       	add	r0, r0
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__fp_round+0xc>
    14e8:	88 23       	and	r24, r24
    14ea:	52 f0       	brmi	.+20     	; 0x1500 <__fp_round+0x20>
    14ec:	bb 0f       	add	r27, r27
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <__fp_round+0x20>
    14f0:	bf 2b       	or	r27, r31
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__fp_round+0x18>
    14f4:	60 ff       	sbrs	r22, 0
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__fp_round+0x20>
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <__fp_split3>:
    1502:	57 fd       	sbrc	r21, 7
    1504:	90 58       	subi	r25, 0x80	; 128
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	59 f0       	breq	.+22     	; 0x1522 <__fp_splitA+0x10>
    150c:	5f 3f       	cpi	r21, 0xFF	; 255
    150e:	71 f0       	breq	.+28     	; 0x152c <__fp_splitA+0x1a>
    1510:	47 95       	ror	r20

00001512 <__fp_splitA>:
    1512:	88 0f       	add	r24, r24
    1514:	97 fb       	bst	r25, 7
    1516:	99 1f       	adc	r25, r25
    1518:	61 f0       	breq	.+24     	; 0x1532 <__fp_splitA+0x20>
    151a:	9f 3f       	cpi	r25, 0xFF	; 255
    151c:	79 f0       	breq	.+30     	; 0x153c <__fp_splitA+0x2a>
    151e:	87 95       	ror	r24
    1520:	08 95       	ret
    1522:	12 16       	cp	r1, r18
    1524:	13 06       	cpc	r1, r19
    1526:	14 06       	cpc	r1, r20
    1528:	55 1f       	adc	r21, r21
    152a:	f2 cf       	rjmp	.-28     	; 0x1510 <__fp_split3+0xe>
    152c:	46 95       	lsr	r20
    152e:	f1 df       	rcall	.-30     	; 0x1512 <__fp_splitA>
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <__fp_splitA+0x30>
    1532:	16 16       	cp	r1, r22
    1534:	17 06       	cpc	r1, r23
    1536:	18 06       	cpc	r1, r24
    1538:	99 1f       	adc	r25, r25
    153a:	f1 cf       	rjmp	.-30     	; 0x151e <__fp_splitA+0xc>
    153c:	86 95       	lsr	r24
    153e:	71 05       	cpc	r23, r1
    1540:	61 05       	cpc	r22, r1
    1542:	08 94       	sec
    1544:	08 95       	ret

00001546 <__fp_zero>:
    1546:	e8 94       	clt

00001548 <__fp_szero>:
    1548:	bb 27       	eor	r27, r27
    154a:	66 27       	eor	r22, r22
    154c:	77 27       	eor	r23, r23
    154e:	cb 01       	movw	r24, r22
    1550:	97 f9       	bld	r25, 7
    1552:	08 95       	ret

00001554 <__gesf2>:
    1554:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_cmp>
    1558:	08 f4       	brcc	.+2      	; 0x155c <__gesf2+0x8>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	08 95       	ret

0000155e <__mulsf3>:
    155e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__mulsf3x>
    1562:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__fp_round>
    1566:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscA>
    156a:	38 f0       	brcs	.+14     	; 0x157a <__mulsf3+0x1c>
    156c:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_pscB>
    1570:	20 f0       	brcs	.+8      	; 0x157a <__mulsf3+0x1c>
    1572:	95 23       	and	r25, r21
    1574:	11 f0       	breq	.+4      	; 0x157a <__mulsf3+0x1c>
    1576:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    157a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_nan>
    157e:	11 24       	eor	r1, r1
    1580:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_szero>

00001584 <__mulsf3x>:
    1584:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_split3>
    1588:	70 f3       	brcs	.-36     	; 0x1566 <__mulsf3+0x8>

0000158a <__mulsf3_pse>:
    158a:	95 9f       	mul	r25, r21
    158c:	c1 f3       	breq	.-16     	; 0x157e <__mulsf3+0x20>
    158e:	95 0f       	add	r25, r21
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	55 1f       	adc	r21, r21
    1594:	62 9f       	mul	r22, r18
    1596:	f0 01       	movw	r30, r0
    1598:	72 9f       	mul	r23, r18
    159a:	bb 27       	eor	r27, r27
    159c:	f0 0d       	add	r31, r0
    159e:	b1 1d       	adc	r27, r1
    15a0:	63 9f       	mul	r22, r19
    15a2:	aa 27       	eor	r26, r26
    15a4:	f0 0d       	add	r31, r0
    15a6:	b1 1d       	adc	r27, r1
    15a8:	aa 1f       	adc	r26, r26
    15aa:	64 9f       	mul	r22, r20
    15ac:	66 27       	eor	r22, r22
    15ae:	b0 0d       	add	r27, r0
    15b0:	a1 1d       	adc	r26, r1
    15b2:	66 1f       	adc	r22, r22
    15b4:	82 9f       	mul	r24, r18
    15b6:	22 27       	eor	r18, r18
    15b8:	b0 0d       	add	r27, r0
    15ba:	a1 1d       	adc	r26, r1
    15bc:	62 1f       	adc	r22, r18
    15be:	73 9f       	mul	r23, r19
    15c0:	b0 0d       	add	r27, r0
    15c2:	a1 1d       	adc	r26, r1
    15c4:	62 1f       	adc	r22, r18
    15c6:	83 9f       	mul	r24, r19
    15c8:	a0 0d       	add	r26, r0
    15ca:	61 1d       	adc	r22, r1
    15cc:	22 1f       	adc	r18, r18
    15ce:	74 9f       	mul	r23, r20
    15d0:	33 27       	eor	r19, r19
    15d2:	a0 0d       	add	r26, r0
    15d4:	61 1d       	adc	r22, r1
    15d6:	23 1f       	adc	r18, r19
    15d8:	84 9f       	mul	r24, r20
    15da:	60 0d       	add	r22, r0
    15dc:	21 1d       	adc	r18, r1
    15de:	82 2f       	mov	r24, r18
    15e0:	76 2f       	mov	r23, r22
    15e2:	6a 2f       	mov	r22, r26
    15e4:	11 24       	eor	r1, r1
    15e6:	9f 57       	subi	r25, 0x7F	; 127
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	9a f0       	brmi	.+38     	; 0x1612 <__mulsf3_pse+0x88>
    15ec:	f1 f0       	breq	.+60     	; 0x162a <__mulsf3_pse+0xa0>
    15ee:	88 23       	and	r24, r24
    15f0:	4a f0       	brmi	.+18     	; 0x1604 <__mulsf3_pse+0x7a>
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	bb 1f       	adc	r27, r27
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	91 50       	subi	r25, 0x01	; 1
    1600:	50 40       	sbci	r21, 0x00	; 0
    1602:	a9 f7       	brne	.-22     	; 0x15ee <__mulsf3_pse+0x64>
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	51 05       	cpc	r21, r1
    1608:	80 f0       	brcs	.+32     	; 0x162a <__mulsf3_pse+0xa0>
    160a:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    160e:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_szero>
    1612:	5f 3f       	cpi	r21, 0xFF	; 255
    1614:	e4 f3       	brlt	.-8      	; 0x160e <__mulsf3_pse+0x84>
    1616:	98 3e       	cpi	r25, 0xE8	; 232
    1618:	d4 f3       	brlt	.-12     	; 0x160e <__mulsf3_pse+0x84>
    161a:	86 95       	lsr	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b7 95       	ror	r27
    1622:	f7 95       	ror	r31
    1624:	e7 95       	ror	r30
    1626:	9f 5f       	subi	r25, 0xFF	; 255
    1628:	c1 f7       	brne	.-16     	; 0x161a <__mulsf3_pse+0x90>
    162a:	fe 2b       	or	r31, r30
    162c:	88 0f       	add	r24, r24
    162e:	91 1d       	adc	r25, r1
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	97 f9       	bld	r25, 7
    1636:	08 95       	ret

00001638 <itoa>:
    1638:	45 32       	cpi	r20, 0x25	; 37
    163a:	51 05       	cpc	r21, r1
    163c:	20 f4       	brcc	.+8      	; 0x1646 <itoa+0xe>
    163e:	42 30       	cpi	r20, 0x02	; 2
    1640:	10 f0       	brcs	.+4      	; 0x1646 <itoa+0xe>
    1642:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__itoa_ncheck>
    1646:	fb 01       	movw	r30, r22
    1648:	10 82       	st	Z, r1
    164a:	cb 01       	movw	r24, r22
    164c:	08 95       	ret

0000164e <__itoa_ncheck>:
    164e:	bb 27       	eor	r27, r27
    1650:	4a 30       	cpi	r20, 0x0A	; 10
    1652:	31 f4       	brne	.+12     	; 0x1660 <__itoa_ncheck+0x12>
    1654:	99 23       	and	r25, r25
    1656:	22 f4       	brpl	.+8      	; 0x1660 <__itoa_ncheck+0x12>
    1658:	bd e2       	ldi	r27, 0x2D	; 45
    165a:	90 95       	com	r25
    165c:	81 95       	neg	r24
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__utoa_common>

00001664 <__utoa_ncheck>:
    1664:	bb 27       	eor	r27, r27

00001666 <__utoa_common>:
    1666:	fb 01       	movw	r30, r22
    1668:	55 27       	eor	r21, r21
    166a:	aa 27       	eor	r26, r26
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	aa 1f       	adc	r26, r26
    1672:	a4 17       	cp	r26, r20
    1674:	10 f0       	brcs	.+4      	; 0x167a <__utoa_common+0x14>
    1676:	a4 1b       	sub	r26, r20
    1678:	83 95       	inc	r24
    167a:	50 51       	subi	r21, 0x10	; 16
    167c:	b9 f7       	brne	.-18     	; 0x166c <__utoa_common+0x6>
    167e:	a0 5d       	subi	r26, 0xD0	; 208
    1680:	aa 33       	cpi	r26, 0x3A	; 58
    1682:	08 f0       	brcs	.+2      	; 0x1686 <__utoa_common+0x20>
    1684:	a9 5d       	subi	r26, 0xD9	; 217
    1686:	a1 93       	st	Z+, r26
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	79 f7       	brne	.-34     	; 0x166a <__utoa_common+0x4>
    168c:	b1 11       	cpse	r27, r1
    168e:	b1 93       	st	Z+, r27
    1690:	11 92       	st	Z+, r1
    1692:	cb 01       	movw	r24, r22
    1694:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <strrev>

00001698 <strrev>:
    1698:	dc 01       	movw	r26, r24
    169a:	fc 01       	movw	r30, r24
    169c:	67 2f       	mov	r22, r23
    169e:	71 91       	ld	r23, Z+
    16a0:	77 23       	and	r23, r23
    16a2:	e1 f7       	brne	.-8      	; 0x169c <strrev+0x4>
    16a4:	32 97       	sbiw	r30, 0x02	; 2
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <strrev+0x18>
    16a8:	7c 91       	ld	r23, X
    16aa:	6d 93       	st	X+, r22
    16ac:	70 83       	st	Z, r23
    16ae:	62 91       	ld	r22, -Z
    16b0:	ae 17       	cp	r26, r30
    16b2:	bf 07       	cpc	r27, r31
    16b4:	c8 f3       	brcs	.-14     	; 0x16a8 <strrev+0x10>
    16b6:	08 95       	ret

000016b8 <_exit>:
    16b8:	f8 94       	cli

000016ba <__stop_program>:
    16ba:	ff cf       	rjmp	.-2      	; 0x16ba <__stop_program>
